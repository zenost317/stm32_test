
PID_motorDC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000568c  0800938c  0800938c  0000a38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea18  0800ea18  0001005c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ea18  0800ea18  0000fa18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea20  0800ea20  0001005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea20  0800ea20  0000fa20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ea24  0800ea24  0000fa24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800ea28  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  2000005c  0800ea84  0001005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000918  0800ea84  00010918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001802b  00000000  00000000  0001008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cab  00000000  00000000  000280b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f8  00000000  00000000  0002bd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001119  00000000  00000000  0002d360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b51d  00000000  00000000  0002e479  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e512  00000000  00000000  00049996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5943  00000000  00000000  00067ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d7eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000631c  00000000  00000000  0010d830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00113b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009374 	.word	0x08009374

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08009374 	.word	0x08009374

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b988 	b.w	8000d94 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	468e      	mov	lr, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	4688      	mov	r8, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d962      	bls.n	8000b78 <__udivmoddi4+0xdc>
 8000ab2:	fab2 f682 	clz	r6, r2
 8000ab6:	b14e      	cbz	r6, 8000acc <__udivmoddi4+0x30>
 8000ab8:	f1c6 0320 	rsb	r3, r6, #32
 8000abc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ac0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac4:	40b7      	lsls	r7, r6
 8000ac6:	ea43 0808 	orr.w	r8, r3, r8
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad0:	fa1f fc87 	uxth.w	ip, r7
 8000ad4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ade:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0x62>
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	f101 30ff 	add.w	r0, r1, #4294967295
 8000af0:	f080 80ea 	bcs.w	8000cc8 <__udivmoddi4+0x22c>
 8000af4:	429a      	cmp	r2, r3
 8000af6:	f240 80e7 	bls.w	8000cc8 <__udivmoddi4+0x22c>
 8000afa:	3902      	subs	r1, #2
 8000afc:	443b      	add	r3, r7
 8000afe:	1a9a      	subs	r2, r3, r2
 8000b00:	b2a3      	uxth	r3, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b12:	459c      	cmp	ip, r3
 8000b14:	d909      	bls.n	8000b2a <__udivmoddi4+0x8e>
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b1c:	f080 80d6 	bcs.w	8000ccc <__udivmoddi4+0x230>
 8000b20:	459c      	cmp	ip, r3
 8000b22:	f240 80d3 	bls.w	8000ccc <__udivmoddi4+0x230>
 8000b26:	443b      	add	r3, r7
 8000b28:	3802      	subs	r0, #2
 8000b2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b2e:	eba3 030c 	sub.w	r3, r3, ip
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11d      	cbz	r5, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40f3      	lsrs	r3, r6
 8000b38:	2200      	movs	r2, #0
 8000b3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d905      	bls.n	8000b52 <__udivmoddi4+0xb6>
 8000b46:	b10d      	cbz	r5, 8000b4c <__udivmoddi4+0xb0>
 8000b48:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e7f5      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b52:	fab3 f183 	clz	r1, r3
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d146      	bne.n	8000be8 <__udivmoddi4+0x14c>
 8000b5a:	4573      	cmp	r3, lr
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xc8>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 8105 	bhi.w	8000d6e <__udivmoddi4+0x2d2>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0e5      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b72:	e9c5 4800 	strd	r4, r8, [r5]
 8000b76:	e7e2      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f000 8090 	beq.w	8000c9e <__udivmoddi4+0x202>
 8000b7e:	fab2 f682 	clz	r6, r2
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	f040 80a4 	bne.w	8000cd0 <__udivmoddi4+0x234>
 8000b88:	1a8a      	subs	r2, r1, r2
 8000b8a:	0c03      	lsrs	r3, r0, #16
 8000b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b90:	b280      	uxth	r0, r0
 8000b92:	b2bc      	uxth	r4, r7
 8000b94:	2101      	movs	r1, #1
 8000b96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d907      	bls.n	8000bba <__udivmoddi4+0x11e>
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000bb0:	d202      	bcs.n	8000bb8 <__udivmoddi4+0x11c>
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	f200 80e0 	bhi.w	8000d78 <__udivmoddi4+0x2dc>
 8000bb8:	46c4      	mov	ip, r8
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bc8:	fb02 f404 	mul.w	r4, r2, r4
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x144>
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x142>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f200 80ca 	bhi.w	8000d72 <__udivmoddi4+0x2d6>
 8000bde:	4602      	mov	r2, r0
 8000be0:	1b1b      	subs	r3, r3, r4
 8000be2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000be6:	e7a5      	b.n	8000b34 <__udivmoddi4+0x98>
 8000be8:	f1c1 0620 	rsb	r6, r1, #32
 8000bec:	408b      	lsls	r3, r1
 8000bee:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf2:	431f      	orrs	r7, r3
 8000bf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c04:	4323      	orrs	r3, r4
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	fa1f fc87 	uxth.w	ip, r7
 8000c0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c12:	0c1c      	lsrs	r4, r3, #16
 8000c14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	fa02 f201 	lsl.w	r2, r2, r1
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x1a0>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000c2e:	f080 809c 	bcs.w	8000d6a <__udivmoddi4+0x2ce>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f240 8099 	bls.w	8000d6a <__udivmoddi4+0x2ce>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	fa1f fe83 	uxth.w	lr, r3
 8000c44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c48:	fb09 4413 	mls	r4, r9, r3, r4
 8000c4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c54:	45a4      	cmp	ip, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x1ce>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000c5e:	f080 8082 	bcs.w	8000d66 <__udivmoddi4+0x2ca>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	d97f      	bls.n	8000d66 <__udivmoddi4+0x2ca>
 8000c66:	3b02      	subs	r3, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	eba4 040c 	sub.w	r4, r4, ip
 8000c72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c76:	4564      	cmp	r4, ip
 8000c78:	4673      	mov	r3, lr
 8000c7a:	46e1      	mov	r9, ip
 8000c7c:	d362      	bcc.n	8000d44 <__udivmoddi4+0x2a8>
 8000c7e:	d05f      	beq.n	8000d40 <__udivmoddi4+0x2a4>
 8000c80:	b15d      	cbz	r5, 8000c9a <__udivmoddi4+0x1fe>
 8000c82:	ebb8 0203 	subs.w	r2, r8, r3
 8000c86:	eb64 0409 	sbc.w	r4, r4, r9
 8000c8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c92:	431e      	orrs	r6, r3
 8000c94:	40cc      	lsrs	r4, r1
 8000c96:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	e74f      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000c9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ca2:	0c01      	lsrs	r1, r0, #16
 8000ca4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ca8:	b280      	uxth	r0, r0
 8000caa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4638      	mov	r0, r7
 8000cb2:	463c      	mov	r4, r7
 8000cb4:	46b8      	mov	r8, r7
 8000cb6:	46be      	mov	lr, r7
 8000cb8:	2620      	movs	r6, #32
 8000cba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cbe:	eba2 0208 	sub.w	r2, r2, r8
 8000cc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cc6:	e766      	b.n	8000b96 <__udivmoddi4+0xfa>
 8000cc8:	4601      	mov	r1, r0
 8000cca:	e718      	b.n	8000afe <__udivmoddi4+0x62>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	e72c      	b.n	8000b2a <__udivmoddi4+0x8e>
 8000cd0:	f1c6 0220 	rsb	r2, r6, #32
 8000cd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cd8:	40b7      	lsls	r7, r6
 8000cda:	40b1      	lsls	r1, r6
 8000cdc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cea:	b2bc      	uxth	r4, r7
 8000cec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb08 f904 	mul.w	r9, r8, r4
 8000cfa:	40b0      	lsls	r0, r6
 8000cfc:	4589      	cmp	r9, r1
 8000cfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d02:	b280      	uxth	r0, r0
 8000d04:	d93e      	bls.n	8000d84 <__udivmoddi4+0x2e8>
 8000d06:	1879      	adds	r1, r7, r1
 8000d08:	f108 3cff 	add.w	ip, r8, #4294967295
 8000d0c:	d201      	bcs.n	8000d12 <__udivmoddi4+0x276>
 8000d0e:	4589      	cmp	r9, r1
 8000d10:	d81f      	bhi.n	8000d52 <__udivmoddi4+0x2b6>
 8000d12:	eba1 0109 	sub.w	r1, r1, r9
 8000d16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1a:	fb09 f804 	mul.w	r8, r9, r4
 8000d1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d22:	b292      	uxth	r2, r2
 8000d24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d28:	4542      	cmp	r2, r8
 8000d2a:	d229      	bcs.n	8000d80 <__udivmoddi4+0x2e4>
 8000d2c:	18ba      	adds	r2, r7, r2
 8000d2e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000d32:	d2c4      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d34:	4542      	cmp	r2, r8
 8000d36:	d2c2      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d38:	f1a9 0102 	sub.w	r1, r9, #2
 8000d3c:	443a      	add	r2, r7
 8000d3e:	e7be      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d40:	45f0      	cmp	r8, lr
 8000d42:	d29d      	bcs.n	8000c80 <__udivmoddi4+0x1e4>
 8000d44:	ebbe 0302 	subs.w	r3, lr, r2
 8000d48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	46e1      	mov	r9, ip
 8000d50:	e796      	b.n	8000c80 <__udivmoddi4+0x1e4>
 8000d52:	eba7 0909 	sub.w	r9, r7, r9
 8000d56:	4449      	add	r1, r9
 8000d58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d60:	fb09 f804 	mul.w	r8, r9, r4
 8000d64:	e7db      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d66:	4673      	mov	r3, lr
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1ce>
 8000d6a:	4650      	mov	r0, sl
 8000d6c:	e766      	b.n	8000c3c <__udivmoddi4+0x1a0>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e6fd      	b.n	8000b6e <__udivmoddi4+0xd2>
 8000d72:	443b      	add	r3, r7
 8000d74:	3a02      	subs	r2, #2
 8000d76:	e733      	b.n	8000be0 <__udivmoddi4+0x144>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	443b      	add	r3, r7
 8000d7e:	e71c      	b.n	8000bba <__udivmoddi4+0x11e>
 8000d80:	4649      	mov	r1, r9
 8000d82:	e79c      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d84:	eba1 0109 	sub.w	r1, r1, r9
 8000d88:	46c4      	mov	ip, r8
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fb09 f804 	mul.w	r8, r9, r4
 8000d92:	e7c4      	b.n	8000d1e <__udivmoddi4+0x282>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d9e:	463b      	mov	r3, r7
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000daa:	4b21      	ldr	r3, [pc, #132]	@ (8000e30 <MX_ADC1_Init+0x98>)
 8000dac:	4a21      	ldr	r2, [pc, #132]	@ (8000e34 <MX_ADC1_Init+0x9c>)
 8000dae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000db0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e30 <MX_ADC1_Init+0x98>)
 8000db2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000db6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000db8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e30 <MX_ADC1_Init+0x98>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <MX_ADC1_Init+0x98>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e30 <MX_ADC1_Init+0x98>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dca:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <MX_ADC1_Init+0x98>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dd2:	4b17      	ldr	r3, [pc, #92]	@ (8000e30 <MX_ADC1_Init+0x98>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dd8:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <MX_ADC1_Init+0x98>)
 8000dda:	4a17      	ldr	r2, [pc, #92]	@ (8000e38 <MX_ADC1_Init+0xa0>)
 8000ddc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_ADC1_Init+0x98>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <MX_ADC1_Init+0x98>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <MX_ADC1_Init+0x98>)
 8000dec:	2201      	movs	r2, #1
 8000dee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000df2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <MX_ADC1_Init+0x98>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000df8:	480d      	ldr	r0, [pc, #52]	@ (8000e30 <MX_ADC1_Init+0x98>)
 8000dfa:	f002 fd99 	bl	8003930 <HAL_ADC_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e04:	f000 fb84 	bl	8001510 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e14:	463b      	mov	r3, r7
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_ADC1_Init+0x98>)
 8000e1a:	f002 fedf 	bl	8003bdc <HAL_ADC_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e24:	f000 fb74 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000078 	.word	0x20000078
 8000e34:	40012000 	.word	0x40012000
 8000e38:	0f000001 	.word	0x0f000001

08000e3c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b08a      	sub	sp, #40	@ 0x28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a2f      	ldr	r2, [pc, #188]	@ (8000f18 <HAL_ADC_MspInit+0xdc>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d157      	bne.n	8000f0e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	613b      	str	r3, [r7, #16]
 8000e62:	4b2e      	ldr	r3, [pc, #184]	@ (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e66:	4a2d      	ldr	r2, [pc, #180]	@ (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	4b27      	ldr	r3, [pc, #156]	@ (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a26      	ldr	r2, [pc, #152]	@ (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b24      	ldr	r3, [pc, #144]	@ (8000f1c <HAL_ADC_MspInit+0xe0>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e96:	2301      	movs	r3, #1
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea2:	f107 0314 	add.w	r3, r7, #20
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	481d      	ldr	r0, [pc, #116]	@ (8000f20 <HAL_ADC_MspInit+0xe4>)
 8000eaa:	f003 fdc9 	bl	8004a40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000eae:	4b1d      	ldr	r3, [pc, #116]	@ (8000f24 <HAL_ADC_MspInit+0xe8>)
 8000eb0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f28 <HAL_ADC_MspInit+0xec>)
 8000eb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f24 <HAL_ADC_MspInit+0xe8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eba:	4b1a      	ldr	r3, [pc, #104]	@ (8000f24 <HAL_ADC_MspInit+0xe8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec0:	4b18      	ldr	r3, [pc, #96]	@ (8000f24 <HAL_ADC_MspInit+0xe8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	@ (8000f24 <HAL_ADC_MspInit+0xe8>)
 8000ec8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ecc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <HAL_ADC_MspInit+0xe8>)
 8000ed0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ed4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ed6:	4b13      	ldr	r3, [pc, #76]	@ (8000f24 <HAL_ADC_MspInit+0xe8>)
 8000ed8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000edc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ede:	4b11      	ldr	r3, [pc, #68]	@ (8000f24 <HAL_ADC_MspInit+0xe8>)
 8000ee0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ee4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f24 <HAL_ADC_MspInit+0xe8>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eec:	4b0d      	ldr	r3, [pc, #52]	@ (8000f24 <HAL_ADC_MspInit+0xe8>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ef2:	480c      	ldr	r0, [pc, #48]	@ (8000f24 <HAL_ADC_MspInit+0xe8>)
 8000ef4:	f003 fa34 	bl	8004360 <HAL_DMA_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000efe:	f000 fb07 	bl	8001510 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a07      	ldr	r2, [pc, #28]	@ (8000f24 <HAL_ADC_MspInit+0xe8>)
 8000f06:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f08:	4a06      	ldr	r2, [pc, #24]	@ (8000f24 <HAL_ADC_MspInit+0xe8>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f0e:	bf00      	nop
 8000f10:	3728      	adds	r7, #40	@ 0x28
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40012000 	.word	0x40012000
 8000f1c:	40023800 	.word	0x40023800
 8000f20:	40020400 	.word	0x40020400
 8000f24:	200000c0 	.word	0x200000c0
 8000f28:	40026410 	.word	0x40026410

08000f2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
 8000f36:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_DMA_Init+0x3c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <MX_DMA_Init+0x3c>)
 8000f3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_DMA_Init+0x3c>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2105      	movs	r1, #5
 8000f52:	2038      	movs	r0, #56	@ 0x38
 8000f54:	f003 f9cd 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f58:	2038      	movs	r0, #56	@ 0x38
 8000f5a:	f003 f9e6 	bl	800432a <HAL_NVIC_EnableIRQ>

}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40023800 	.word	0x40023800

08000f6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b08a      	sub	sp, #40	@ 0x28
 8000f70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	2200      	movs	r2, #0
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	609a      	str	r2, [r3, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
 8000f80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	4b41      	ldr	r3, [pc, #260]	@ (800108c <MX_GPIO_Init+0x120>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	4a40      	ldr	r2, [pc, #256]	@ (800108c <MX_GPIO_Init+0x120>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f92:	4b3e      	ldr	r3, [pc, #248]	@ (800108c <MX_GPIO_Init+0x120>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	60fb      	str	r3, [r7, #12]
 8000fa2:	4b3a      	ldr	r3, [pc, #232]	@ (800108c <MX_GPIO_Init+0x120>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	4a39      	ldr	r2, [pc, #228]	@ (800108c <MX_GPIO_Init+0x120>)
 8000fa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fae:	4b37      	ldr	r3, [pc, #220]	@ (800108c <MX_GPIO_Init+0x120>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b33      	ldr	r3, [pc, #204]	@ (800108c <MX_GPIO_Init+0x120>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a32      	ldr	r2, [pc, #200]	@ (800108c <MX_GPIO_Init+0x120>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b30      	ldr	r3, [pc, #192]	@ (800108c <MX_GPIO_Init+0x120>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	4b2c      	ldr	r3, [pc, #176]	@ (800108c <MX_GPIO_Init+0x120>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	4a2b      	ldr	r2, [pc, #172]	@ (800108c <MX_GPIO_Init+0x120>)
 8000fe0:	f043 0302 	orr.w	r3, r3, #2
 8000fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe6:	4b29      	ldr	r3, [pc, #164]	@ (800108c <MX_GPIO_Init+0x120>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ff8:	4825      	ldr	r0, [pc, #148]	@ (8001090 <MX_GPIO_Init+0x124>)
 8000ffa:	f003 fea5 	bl	8004d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BI2_Pin|BI1_Pin|STBY_Pin|AI1_Pin
 8000ffe:	2200      	movs	r2, #0
 8001000:	217c      	movs	r1, #124	@ 0x7c
 8001002:	4824      	ldr	r0, [pc, #144]	@ (8001094 <MX_GPIO_Init+0x128>)
 8001004:	f003 fea0 	bl	8004d48 <HAL_GPIO_WritePin>
                          |AI2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8001008:	2200      	movs	r2, #0
 800100a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800100e:	4822      	ldr	r0, [pc, #136]	@ (8001098 <MX_GPIO_Init+0x12c>)
 8001010:	f003 fe9a 	bl	8004d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001014:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4818      	ldr	r0, [pc, #96]	@ (8001090 <MX_GPIO_Init+0x124>)
 800102e:	f003 fd07 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : BI2_Pin BI1_Pin STBY_Pin AI1_Pin
                           AI2_Pin */
  GPIO_InitStruct.Pin = BI2_Pin|BI1_Pin|STBY_Pin|AI1_Pin
 8001032:	237c      	movs	r3, #124	@ 0x7c
 8001034:	617b      	str	r3, [r7, #20]
                          |AI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001036:	2301      	movs	r3, #1
 8001038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103e:	2300      	movs	r3, #0
 8001040:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	4812      	ldr	r0, [pc, #72]	@ (8001094 <MX_GPIO_Init+0x128>)
 800104a:	f003 fcf9 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 800104e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	2301      	movs	r3, #1
 8001056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	480c      	ldr	r0, [pc, #48]	@ (8001098 <MX_GPIO_Init+0x12c>)
 8001068:	f003 fcea 	bl	8004a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_Pin */
  GPIO_InitStruct.Pin = SW_Pin;
 800106c:	2308      	movs	r3, #8
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	@ (8001098 <MX_GPIO_Init+0x12c>)
 8001080:	f003 fcde 	bl	8004a40 <HAL_GPIO_Init>

}
 8001084:	bf00      	nop
 8001086:	3728      	adds	r7, #40	@ 0x28
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40023800 	.word	0x40023800
 8001090:	40020800 	.word	0x40020800
 8001094:	40020000 	.word	0x40020000
 8001098:	40020400 	.word	0x40020400

0800109c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a0:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010a2:	4a13      	ldr	r2, [pc, #76]	@ (80010f0 <MX_I2C1_Init+0x54>)
 80010a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010a8:	4a12      	ldr	r2, [pc, #72]	@ (80010f4 <MX_I2C1_Init+0x58>)
 80010aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010c6:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d2:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	@ (80010ec <MX_I2C1_Init+0x50>)
 80010da:	f003 fe69 	bl	8004db0 <HAL_I2C_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010e4:	f000 fa14 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000120 	.word	0x20000120
 80010f0:	40005400 	.word	0x40005400
 80010f4:	00061a80 	.word	0x00061a80

080010f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	@ 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0314 	add.w	r3, r7, #20
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a19      	ldr	r2, [pc, #100]	@ (800117c <HAL_I2C_MspInit+0x84>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d12c      	bne.n	8001174 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <HAL_I2C_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a17      	ldr	r2, [pc, #92]	@ (8001180 <HAL_I2C_MspInit+0x88>)
 8001124:	f043 0302 	orr.w	r3, r3, #2
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <HAL_I2C_MspInit+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001136:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800113c:	2312      	movs	r3, #18
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001148:	2304      	movs	r3, #4
 800114a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	480c      	ldr	r0, [pc, #48]	@ (8001184 <HAL_I2C_MspInit+0x8c>)
 8001154:	f003 fc74 	bl	8004a40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <HAL_I2C_MspInit+0x88>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001160:	4a07      	ldr	r2, [pc, #28]	@ (8001180 <HAL_I2C_MspInit+0x88>)
 8001162:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001166:	6413      	str	r3, [r2, #64]	@ 0x40
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <HAL_I2C_MspInit+0x88>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001174:	bf00      	nop
 8001176:	3728      	adds	r7, #40	@ 0x28
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	40005400 	.word	0x40005400
 8001180:	40023800 	.word	0x40023800
 8001184:	40020400 	.word	0x40020400

08001188 <map>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float map(float x, float in_min, float in_max, float out_min, float out_max)
{
 8001188:	b480      	push	{r7}
 800118a:	b087      	sub	sp, #28
 800118c:	af00      	add	r7, sp, #0
 800118e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001192:	edc7 0a04 	vstr	s1, [r7, #16]
 8001196:	ed87 1a03 	vstr	s2, [r7, #12]
 800119a:	edc7 1a02 	vstr	s3, [r7, #8]
 800119e:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80011a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80011a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80011aa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011ae:	edd7 6a01 	vldr	s13, [r7, #4]
 80011b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011ba:	ee67 6a27 	vmul.f32	s13, s14, s15
 80011be:	ed97 7a03 	vldr	s14, [r7, #12]
 80011c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80011ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80011d6:	eeb0 0a67 	vmov.f32	s0, s15
 80011da:	371c      	adds	r7, #28
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <setMotor>:
//
void setMotor(int dir, int pwm1, int pwm2)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
	TIM1->CCR1 = pwm1;
 80011f0:	4a29      	ldr	r2, [pc, #164]	@ (8001298 <setMotor+0xb4>)
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	6353      	str	r3, [r2, #52]	@ 0x34
	TIM1->CCR2 = pwm2;
 80011f6:	4a28      	ldr	r2, [pc, #160]	@ (8001298 <setMotor+0xb4>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6393      	str	r3, [r2, #56]	@ 0x38
	HAL_GPIO_WritePin(GPIOA, STBY_Pin, 1);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2110      	movs	r1, #16
 8001200:	4826      	ldr	r0, [pc, #152]	@ (800129c <setMotor+0xb8>)
 8001202:	f003 fda1 	bl	8004d48 <HAL_GPIO_WritePin>
	if(dir == 1)
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d114      	bne.n	8001236 <setMotor+0x52>
	{
		HAL_GPIO_WritePin(GPIOA, AI1_Pin, 1);
 800120c:	2201      	movs	r2, #1
 800120e:	2120      	movs	r1, #32
 8001210:	4822      	ldr	r0, [pc, #136]	@ (800129c <setMotor+0xb8>)
 8001212:	f003 fd99 	bl	8004d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AI2_Pin, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2140      	movs	r1, #64	@ 0x40
 800121a:	4820      	ldr	r0, [pc, #128]	@ (800129c <setMotor+0xb8>)
 800121c:	f003 fd94 	bl	8004d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BI1_Pin, 1);
 8001220:	2201      	movs	r2, #1
 8001222:	2108      	movs	r1, #8
 8001224:	481d      	ldr	r0, [pc, #116]	@ (800129c <setMotor+0xb8>)
 8001226:	f003 fd8f 	bl	8004d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BI2_Pin, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2104      	movs	r1, #4
 800122e:	481b      	ldr	r0, [pc, #108]	@ (800129c <setMotor+0xb8>)
 8001230:	f003 fd8a 	bl	8004d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AI1_Pin, 0);
		HAL_GPIO_WritePin(GPIOA, AI2_Pin, 0);
		HAL_GPIO_WritePin(GPIOA, BI1_Pin, 0);
		HAL_GPIO_WritePin(GPIOA, BI2_Pin, 0);
	}
}
 8001234:	e02c      	b.n	8001290 <setMotor+0xac>
	else if(dir == -1)
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800123c:	d114      	bne.n	8001268 <setMotor+0x84>
		HAL_GPIO_WritePin(GPIOA, AI1_Pin, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2120      	movs	r1, #32
 8001242:	4816      	ldr	r0, [pc, #88]	@ (800129c <setMotor+0xb8>)
 8001244:	f003 fd80 	bl	8004d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AI2_Pin, 1);
 8001248:	2201      	movs	r2, #1
 800124a:	2140      	movs	r1, #64	@ 0x40
 800124c:	4813      	ldr	r0, [pc, #76]	@ (800129c <setMotor+0xb8>)
 800124e:	f003 fd7b 	bl	8004d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BI1_Pin, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2108      	movs	r1, #8
 8001256:	4811      	ldr	r0, [pc, #68]	@ (800129c <setMotor+0xb8>)
 8001258:	f003 fd76 	bl	8004d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BI2_Pin, 1);
 800125c:	2201      	movs	r2, #1
 800125e:	2104      	movs	r1, #4
 8001260:	480e      	ldr	r0, [pc, #56]	@ (800129c <setMotor+0xb8>)
 8001262:	f003 fd71 	bl	8004d48 <HAL_GPIO_WritePin>
}
 8001266:	e013      	b.n	8001290 <setMotor+0xac>
		HAL_GPIO_WritePin(GPIOA, AI1_Pin, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2120      	movs	r1, #32
 800126c:	480b      	ldr	r0, [pc, #44]	@ (800129c <setMotor+0xb8>)
 800126e:	f003 fd6b 	bl	8004d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AI2_Pin, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2140      	movs	r1, #64	@ 0x40
 8001276:	4809      	ldr	r0, [pc, #36]	@ (800129c <setMotor+0xb8>)
 8001278:	f003 fd66 	bl	8004d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BI1_Pin, 0);
 800127c:	2200      	movs	r2, #0
 800127e:	2108      	movs	r1, #8
 8001280:	4806      	ldr	r0, [pc, #24]	@ (800129c <setMotor+0xb8>)
 8001282:	f003 fd61 	bl	8004d48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BI2_Pin, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2104      	movs	r1, #4
 800128a:	4804      	ldr	r0, [pc, #16]	@ (800129c <setMotor+0xb8>)
 800128c:	f003 fd5c 	bl	8004d48 <HAL_GPIO_WritePin>
}
 8001290:	bf00      	nop
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40010000 	.word	0x40010000
 800129c:	40020000 	.word	0x40020000

080012a0 <HAL_TIM_PeriodElapsedCallback>:
//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a13      	ldr	r2, [pc, #76]	@ (80012fc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d120      	bne.n	80012f4 <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		encoderRaw2 = TIM4->CNT;
 80012b2:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80012b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b6:	4a13      	ldr	r2, [pc, #76]	@ (8001304 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80012b8:	6013      	str	r3, [r2, #0]
		encoderVal2 = (int16_t)(encoderRaw2 >> 2);
 80012ba:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	4b11      	ldr	r3, [pc, #68]	@ (8001308 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80012c4:	801a      	strh	r2, [r3, #0]
		update_encoder(&htim4);
 80012c6:	4811      	ldr	r0, [pc, #68]	@ (800130c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80012c8:	f000 f928 	bl	800151c <update_encoder>
		encoderVel = encoder.velocity;
 80012cc:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80012ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012d2:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80012d4:	801a      	strh	r2, [r3, #0]
		encoderPos = encoder.position;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80012d8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80012dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80012de:	801a      	strh	r2, [r3, #0]

		encoderRaw1 = TIM3->CNT;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80012e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001320 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80012e6:	6013      	str	r3, [r2, #0]
		encoderVal1 = (int16_t)(encoderRaw1 >> 2);
 80012e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001320 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	089b      	lsrs	r3, r3, #2
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001324 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80012f2:	801a      	strh	r2, [r3, #0]
	}
}
 80012f4:	bf00      	nop
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40014400 	.word	0x40014400
 8001300:	40000800 	.word	0x40000800
 8001304:	20000180 	.word	0x20000180
 8001308:	20000184 	.word	0x20000184
 800130c:	200006f4 	.word	0x200006f4
 8001310:	2000018c 	.word	0x2000018c
 8001314:	20000186 	.word	0x20000186
 8001318:	20000188 	.word	0x20000188
 800131c:	40000400 	.word	0x40000400
 8001320:	20000178 	.word	0x20000178
 8001324:	2000017c 	.word	0x2000017c

08001328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132c:	f002 fa6a 	bl	8003804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001330:	f000 f884 	bl	800143c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001334:	f7ff fe1a 	bl	8000f6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001338:	f7ff fdf8 	bl	8000f2c <MX_DMA_Init>
  MX_TIM1_Init();
 800133c:	f001 fe9a 	bl	8003074 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001340:	f7ff fd2a 	bl	8000d98 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001344:	f001 ffc2 	bl	80032cc <MX_TIM3_Init>
  MX_I2C1_Init();
 8001348:	f7ff fea8 	bl	800109c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800134c:	f002 f9be 	bl	80036cc <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001350:	f000 f9ea 	bl	8001728 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001354:	f001 ff3a 	bl	80031cc <MX_TIM2_Init>
  MX_TIM4_Init();
 8001358:	f002 f80c 	bl	8003374 <MX_TIM4_Init>
  MX_RTC_Init();
 800135c:	f000 f95e 	bl	800161c <MX_RTC_Init>
  MX_TIM10_Init();
 8001360:	f002 f85c 	bl	800341c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001364:	2100      	movs	r1, #0
 8001366:	4829      	ldr	r0, [pc, #164]	@ (800140c <main+0xe4>)
 8001368:	f005 faec 	bl	8006944 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800136c:	2104      	movs	r1, #4
 800136e:	4827      	ldr	r0, [pc, #156]	@ (800140c <main+0xe4>)
 8001370:	f005 fae8 	bl	8006944 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001374:	2100      	movs	r1, #0
 8001376:	4826      	ldr	r0, [pc, #152]	@ (8001410 <main+0xe8>)
 8001378:	f005 fae4 	bl	8006944 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800137c:	2104      	movs	r1, #4
 800137e:	4824      	ldr	r0, [pc, #144]	@ (8001410 <main+0xe8>)
 8001380:	f005 fae0 	bl	8006944 <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001384:	213c      	movs	r1, #60	@ 0x3c
 8001386:	4823      	ldr	r0, [pc, #140]	@ (8001414 <main+0xec>)
 8001388:	f005 fc32 	bl	8006bf0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800138c:	213c      	movs	r1, #60	@ 0x3c
 800138e:	4822      	ldr	r0, [pc, #136]	@ (8001418 <main+0xf0>)
 8001390:	f005 fc2e 	bl	8006bf0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim10);
 8001394:	4821      	ldr	r0, [pc, #132]	@ (800141c <main+0xf4>)
 8001396:	f005 fa19 	bl	80067cc <HAL_TIM_Base_Start_IT>

  ssd1306_Init();
 800139a:	f000 fa7d 	bl	8001898 <ssd1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_ADC_Start_DMA(&hadc1, &adc_val, 1);
 800139e:	2201      	movs	r2, #1
 80013a0:	491f      	ldr	r1, [pc, #124]	@ (8001420 <main+0xf8>)
 80013a2:	4820      	ldr	r0, [pc, #128]	@ (8001424 <main+0xfc>)
 80013a4:	f002 fb08 	bl	80039b8 <HAL_ADC_Start_DMA>

	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80013a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013ac:	481e      	ldr	r0, [pc, #120]	@ (8001428 <main+0x100>)
 80013ae:	f003 fce4 	bl	8004d7a <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 80013b2:	2064      	movs	r0, #100	@ 0x64
 80013b4:	f002 fa98 	bl	80038e8 <HAL_Delay>
//	speed = map(adc_val, 0, 4095, 0, 65535);
//
//	setMotor(1, 32767, 0);
//	HAL_Delay(100);

	speed = map(adc_val, 0, 4095, 0, 65535);
 80013b8:	4b19      	ldr	r3, [pc, #100]	@ (8001420 <main+0xf8>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	ee07 3a90 	vmov	s15, r3
 80013c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013c4:	ed9f 2a19 	vldr	s4, [pc, #100]	@ 800142c <main+0x104>
 80013c8:	eddf 1a19 	vldr	s3, [pc, #100]	@ 8001430 <main+0x108>
 80013cc:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8001434 <main+0x10c>
 80013d0:	eddf 0a17 	vldr	s1, [pc, #92]	@ 8001430 <main+0x108>
 80013d4:	eeb0 0a67 	vmov.f32	s0, s15
 80013d8:	f7ff fed6 	bl	8001188 <map>
 80013dc:	eef0 7a40 	vmov.f32	s15, s0
 80013e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e4:	ee17 3a90 	vmov	r3, s15
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <main+0x110>)
 80013ec:	801a      	strh	r2, [r3, #0]

	setMotor(-1, 65535, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	f7ff fef4 	bl	80011e4 <setMotor>
	HAL_Delay(100);
 80013fc:	2064      	movs	r0, #100	@ 0x64
 80013fe:	f002 fa73 	bl	80038e8 <HAL_Delay>

	ssd1306_TestAll();
 8001402:	f001 fd21 	bl	8002e48 <ssd1306_TestAll>
	HAL_ADC_Start_DMA(&hadc1, &adc_val, 1);
 8001406:	bf00      	nop
 8001408:	e7c9      	b.n	800139e <main+0x76>
 800140a:	bf00      	nop
 800140c:	2000061c 	.word	0x2000061c
 8001410:	20000664 	.word	0x20000664
 8001414:	200006ac 	.word	0x200006ac
 8001418:	200006f4 	.word	0x200006f4
 800141c:	2000073c 	.word	0x2000073c
 8001420:	20000174 	.word	0x20000174
 8001424:	20000078 	.word	0x20000078
 8001428:	40020800 	.word	0x40020800
 800142c:	477fff00 	.word	0x477fff00
 8001430:	00000000 	.word	0x00000000
 8001434:	457ff000 	.word	0x457ff000
 8001438:	20000176 	.word	0x20000176

0800143c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b094      	sub	sp, #80	@ 0x50
 8001440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001442:	f107 0320 	add.w	r3, r7, #32
 8001446:	2230      	movs	r2, #48	@ 0x30
 8001448:	2100      	movs	r1, #0
 800144a:	4618      	mov	r0, r3
 800144c:	f006 fdba 	bl	8007fc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	4b28      	ldr	r3, [pc, #160]	@ (8001508 <SystemClock_Config+0xcc>)
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	4a27      	ldr	r2, [pc, #156]	@ (8001508 <SystemClock_Config+0xcc>)
 800146a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800146e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001470:	4b25      	ldr	r3, [pc, #148]	@ (8001508 <SystemClock_Config+0xcc>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	4b22      	ldr	r3, [pc, #136]	@ (800150c <SystemClock_Config+0xd0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a21      	ldr	r2, [pc, #132]	@ (800150c <SystemClock_Config+0xd0>)
 8001486:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b1f      	ldr	r3, [pc, #124]	@ (800150c <SystemClock_Config+0xd0>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001498:	2309      	movs	r3, #9
 800149a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800149c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014a2:	2301      	movs	r3, #1
 80014a4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a6:	2302      	movs	r3, #2
 80014a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80014b0:	230c      	movs	r3, #12
 80014b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80014b4:	2360      	movs	r3, #96	@ 0x60
 80014b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80014bc:	2304      	movs	r3, #4
 80014be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c0:	f107 0320 	add.w	r3, r7, #32
 80014c4:	4618      	mov	r0, r3
 80014c6:	f004 f921 	bl	800570c <HAL_RCC_OscConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014d0:	f000 f81e 	bl	8001510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d4:	230f      	movs	r3, #15
 80014d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d8:	2302      	movs	r3, #2
 80014da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	2103      	movs	r1, #3
 80014f0:	4618      	mov	r0, r3
 80014f2:	f004 fb83 	bl	8005bfc <HAL_RCC_ClockConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014fc:	f000 f808 	bl	8001510 <Error_Handler>
  }
}
 8001500:	bf00      	nop
 8001502:	3750      	adds	r7, #80	@ 0x50
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
}
 8001516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <Error_Handler+0x8>

0800151c <update_encoder>:
		.position = 0,
		.prev_encoder_raw = 0,
};

void update_encoder(TIM_HandleTypeDef *htim)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	uint32_t temp_counter = __HAL_TIM_GET_COUNTER(htim);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152a:	60fb      	str	r3, [r7, #12]
	static uint8_t first_time = 0;

	if(!first_time)
 800152c:	4b39      	ldr	r3, [pc, #228]	@ (8001614 <update_encoder+0xf8>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d106      	bne.n	8001542 <update_encoder+0x26>
	{
		encoder.velocity = 0;
 8001534:	4b38      	ldr	r3, [pc, #224]	@ (8001618 <update_encoder+0xfc>)
 8001536:	2200      	movs	r2, #0
 8001538:	801a      	strh	r2, [r3, #0]
		first_time = 1;
 800153a:	4b36      	ldr	r3, [pc, #216]	@ (8001614 <update_encoder+0xf8>)
 800153c:	2201      	movs	r2, #1
 800153e:	701a      	strb	r2, [r3, #0]
 8001540:	e052      	b.n	80015e8 <update_encoder+0xcc>
	}
	else
	{
		if(temp_counter == encoder.prev_encoder_raw)
 8001542:	4b35      	ldr	r3, [pc, #212]	@ (8001618 <update_encoder+0xfc>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	429a      	cmp	r2, r3
 800154a:	d103      	bne.n	8001554 <update_encoder+0x38>
		{
			encoder.velocity = 0;
 800154c:	4b32      	ldr	r3, [pc, #200]	@ (8001618 <update_encoder+0xfc>)
 800154e:	2200      	movs	r2, #0
 8001550:	801a      	strh	r2, [r3, #0]
 8001552:	e049      	b.n	80015e8 <update_encoder+0xcc>
		}
		else if(temp_counter > encoder.prev_encoder_raw)
 8001554:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <update_encoder+0xfc>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	429a      	cmp	r2, r3
 800155c:	d922      	bls.n	80015a4 <update_encoder+0x88>
		{
			if (__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0310 	and.w	r3, r3, #16
 8001568:	2b10      	cmp	r3, #16
 800156a:	d110      	bne.n	800158e <update_encoder+0x72>
			{
				encoder.velocity = -encoder.prev_encoder_raw - (__HAL_TIM_GET_AUTORELOAD(htim) - temp_counter);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	b29a      	uxth	r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001576:	b29b      	uxth	r3, r3
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	b29a      	uxth	r2, r3
 800157c:	4b26      	ldr	r3, [pc, #152]	@ (8001618 <update_encoder+0xfc>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	b29b      	uxth	r3, r3
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	b29b      	uxth	r3, r3
 8001586:	b21a      	sxth	r2, r3
 8001588:	4b23      	ldr	r3, [pc, #140]	@ (8001618 <update_encoder+0xfc>)
 800158a:	801a      	strh	r2, [r3, #0]
 800158c:	e02c      	b.n	80015e8 <update_encoder+0xcc>
			}
			else
			{
				encoder.velocity = temp_counter - encoder.prev_encoder_raw;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	b29a      	uxth	r2, r3
 8001592:	4b21      	ldr	r3, [pc, #132]	@ (8001618 <update_encoder+0xfc>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	b29b      	uxth	r3, r3
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	b29b      	uxth	r3, r3
 800159c:	b21a      	sxth	r2, r3
 800159e:	4b1e      	ldr	r3, [pc, #120]	@ (8001618 <update_encoder+0xfc>)
 80015a0:	801a      	strh	r2, [r3, #0]
 80015a2:	e021      	b.n	80015e8 <update_encoder+0xcc>
			}
		}
		else
		{
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b10      	cmp	r3, #16
 80015b0:	d10a      	bne.n	80015c8 <update_encoder+0xac>
			{
				encoder.velocity = temp_counter - encoder.prev_encoder_raw;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <update_encoder+0xfc>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	b29b      	uxth	r3, r3
 80015c0:	b21a      	sxth	r2, r3
 80015c2:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <update_encoder+0xfc>)
 80015c4:	801a      	strh	r2, [r3, #0]
 80015c6:	e00f      	b.n	80015e8 <update_encoder+0xcc>
			}
			else
			{
				encoder.velocity = temp_counter + (__HAL_TIM_GET_AUTORELOAD(htim) - encoder.prev_encoder_raw);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <update_encoder+0xfc>)
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	b29a      	uxth	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4413      	add	r3, r2
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	b21a      	sxth	r2, r3
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <update_encoder+0xfc>)
 80015e6:	801a      	strh	r2, [r3, #0]
			}
		}
	}

	encoder.position += encoder.velocity;
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <update_encoder+0xfc>)
 80015ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <update_encoder+0xfc>)
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <update_encoder+0xfc>)
 8001600:	805a      	strh	r2, [r3, #2]
	encoder.prev_encoder_raw = temp_counter;
 8001602:	4a05      	ldr	r2, [pc, #20]	@ (8001618 <update_encoder+0xfc>)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	6053      	str	r3, [r2, #4]

}
 8001608:	bf00      	nop
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	20000194 	.word	0x20000194
 8001618:	2000018c 	.word	0x2000018c

0800161c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001630:	2300      	movs	r3, #0
 8001632:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001634:	4b24      	ldr	r3, [pc, #144]	@ (80016c8 <MX_RTC_Init+0xac>)
 8001636:	4a25      	ldr	r2, [pc, #148]	@ (80016cc <MX_RTC_Init+0xb0>)
 8001638:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800163a:	4b23      	ldr	r3, [pc, #140]	@ (80016c8 <MX_RTC_Init+0xac>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001640:	4b21      	ldr	r3, [pc, #132]	@ (80016c8 <MX_RTC_Init+0xac>)
 8001642:	227f      	movs	r2, #127	@ 0x7f
 8001644:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001646:	4b20      	ldr	r3, [pc, #128]	@ (80016c8 <MX_RTC_Init+0xac>)
 8001648:	22ff      	movs	r2, #255	@ 0xff
 800164a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800164c:	4b1e      	ldr	r3, [pc, #120]	@ (80016c8 <MX_RTC_Init+0xac>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001652:	4b1d      	ldr	r3, [pc, #116]	@ (80016c8 <MX_RTC_Init+0xac>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001658:	4b1b      	ldr	r3, [pc, #108]	@ (80016c8 <MX_RTC_Init+0xac>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800165e:	481a      	ldr	r0, [pc, #104]	@ (80016c8 <MX_RTC_Init+0xac>)
 8001660:	f004 fd9c 	bl	800619c <HAL_RTC_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800166a:	f7ff ff51 	bl	8001510 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800166e:	2300      	movs	r3, #0
 8001670:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001672:	2300      	movs	r3, #0
 8001674:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001676:	2300      	movs	r3, #0
 8001678:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	2201      	movs	r2, #1
 8001686:	4619      	mov	r1, r3
 8001688:	480f      	ldr	r0, [pc, #60]	@ (80016c8 <MX_RTC_Init+0xac>)
 800168a:	f004 fe08 	bl	800629e <HAL_RTC_SetTime>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001694:	f7ff ff3c 	bl	8001510 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001698:	2301      	movs	r3, #1
 800169a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800169c:	2301      	movs	r3, #1
 800169e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80016a8:	463b      	mov	r3, r7
 80016aa:	2201      	movs	r2, #1
 80016ac:	4619      	mov	r1, r3
 80016ae:	4806      	ldr	r0, [pc, #24]	@ (80016c8 <MX_RTC_Init+0xac>)
 80016b0:	f004 fe8f 	bl	80063d2 <HAL_RTC_SetDate>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80016ba:	f7ff ff29 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000198 	.word	0x20000198
 80016cc:	40002800 	.word	0x40002800

080016d0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016d8:	f107 0308 	add.w	r3, r7, #8
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001720 <HAL_RTC_MspInit+0x50>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d111      	bne.n	8001718 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016f4:	2302      	movs	r3, #2
 80016f6:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016fc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016fe:	f107 0308 	add.w	r3, r7, #8
 8001702:	4618      	mov	r0, r3
 8001704:	f004 fc5a 	bl	8005fbc <HAL_RCCEx_PeriphCLKConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800170e:	f7ff feff 	bl	8001510 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001712:	4b04      	ldr	r3, [pc, #16]	@ (8001724 <HAL_RTC_MspInit+0x54>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001718:	bf00      	nop
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40002800 	.word	0x40002800
 8001724:	42470e3c 	.word	0x42470e3c

08001728 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800172c:	4b17      	ldr	r3, [pc, #92]	@ (800178c <MX_SPI2_Init+0x64>)
 800172e:	4a18      	ldr	r2, [pc, #96]	@ (8001790 <MX_SPI2_Init+0x68>)
 8001730:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001732:	4b16      	ldr	r3, [pc, #88]	@ (800178c <MX_SPI2_Init+0x64>)
 8001734:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001738:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800173a:	4b14      	ldr	r3, [pc, #80]	@ (800178c <MX_SPI2_Init+0x64>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001740:	4b12      	ldr	r3, [pc, #72]	@ (800178c <MX_SPI2_Init+0x64>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001746:	4b11      	ldr	r3, [pc, #68]	@ (800178c <MX_SPI2_Init+0x64>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800174c:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <MX_SPI2_Init+0x64>)
 800174e:	2200      	movs	r2, #0
 8001750:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <MX_SPI2_Init+0x64>)
 8001754:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001758:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800175a:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <MX_SPI2_Init+0x64>)
 800175c:	2200      	movs	r2, #0
 800175e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001760:	4b0a      	ldr	r3, [pc, #40]	@ (800178c <MX_SPI2_Init+0x64>)
 8001762:	2200      	movs	r2, #0
 8001764:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <MX_SPI2_Init+0x64>)
 8001768:	2200      	movs	r2, #0
 800176a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800176c:	4b07      	ldr	r3, [pc, #28]	@ (800178c <MX_SPI2_Init+0x64>)
 800176e:	2200      	movs	r2, #0
 8001770:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <MX_SPI2_Init+0x64>)
 8001774:	220a      	movs	r2, #10
 8001776:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	@ (800178c <MX_SPI2_Init+0x64>)
 800177a:	f004 ff4f 	bl	800661c <HAL_SPI_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001784:	f7ff fec4 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200001b8 	.word	0x200001b8
 8001790:	40003800 	.word	0x40003800

08001794 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a19      	ldr	r2, [pc, #100]	@ (8001818 <HAL_SPI_MspInit+0x84>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d12c      	bne.n	8001810 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b18      	ldr	r3, [pc, #96]	@ (800181c <HAL_SPI_MspInit+0x88>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	4a17      	ldr	r2, [pc, #92]	@ (800181c <HAL_SPI_MspInit+0x88>)
 80017c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c6:	4b15      	ldr	r3, [pc, #84]	@ (800181c <HAL_SPI_MspInit+0x88>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b11      	ldr	r3, [pc, #68]	@ (800181c <HAL_SPI_MspInit+0x88>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a10      	ldr	r2, [pc, #64]	@ (800181c <HAL_SPI_MspInit+0x88>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <HAL_SPI_MspInit+0x88>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017ee:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001800:	2305      	movs	r3, #5
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4805      	ldr	r0, [pc, #20]	@ (8001820 <HAL_SPI_MspInit+0x8c>)
 800180c:	f003 f918 	bl	8004a40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001810:	bf00      	nop
 8001812:	3728      	adds	r7, #40	@ 0x28
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40003800 	.word	0x40003800
 800181c:	40023800 	.word	0x40023800
 8001820:	40020400 	.word	0x40020400

08001824 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af04      	add	r7, sp, #16
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	2301      	movs	r3, #1
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	1dfb      	adds	r3, r7, #7
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2301      	movs	r3, #1
 800184e:	2200      	movs	r2, #0
 8001850:	2178      	movs	r1, #120	@ 0x78
 8001852:	4803      	ldr	r0, [pc, #12]	@ (8001860 <ssd1306_WriteCommand+0x2c>)
 8001854:	f003 fbf0 	bl	8005038 <HAL_I2C_Mem_Write>
}
 8001858:	bf00      	nop
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000120 	.word	0x20000120

08001864 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af04      	add	r7, sp, #16
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b29b      	uxth	r3, r3
 8001872:	f04f 32ff 	mov.w	r2, #4294967295
 8001876:	9202      	str	r2, [sp, #8]
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2301      	movs	r3, #1
 8001880:	2240      	movs	r2, #64	@ 0x40
 8001882:	2178      	movs	r1, #120	@ 0x78
 8001884:	4803      	ldr	r0, [pc, #12]	@ (8001894 <ssd1306_WriteData+0x30>)
 8001886:	f003 fbd7 	bl	8005038 <HAL_I2C_Mem_Write>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	20000120 	.word	0x20000120

08001898 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800189c:	f7ff ffc2 	bl	8001824 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80018a0:	2064      	movs	r0, #100	@ 0x64
 80018a2:	f002 f821 	bl	80038e8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80018a6:	2000      	movs	r0, #0
 80018a8:	f000 ff7a 	bl	80027a0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80018ac:	2020      	movs	r0, #32
 80018ae:	f7ff ffc1 	bl	8001834 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff ffbe 	bl	8001834 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80018b8:	20b0      	movs	r0, #176	@ 0xb0
 80018ba:	f7ff ffbb 	bl	8001834 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80018be:	20c8      	movs	r0, #200	@ 0xc8
 80018c0:	f7ff ffb8 	bl	8001834 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80018c4:	2000      	movs	r0, #0
 80018c6:	f7ff ffb5 	bl	8001834 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80018ca:	2010      	movs	r0, #16
 80018cc:	f7ff ffb2 	bl	8001834 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80018d0:	2040      	movs	r0, #64	@ 0x40
 80018d2:	f7ff ffaf 	bl	8001834 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80018d6:	20ff      	movs	r0, #255	@ 0xff
 80018d8:	f000 ff4f 	bl	800277a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80018dc:	20a1      	movs	r0, #161	@ 0xa1
 80018de:	f7ff ffa9 	bl	8001834 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80018e2:	20a6      	movs	r0, #166	@ 0xa6
 80018e4:	f7ff ffa6 	bl	8001834 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80018e8:	20a8      	movs	r0, #168	@ 0xa8
 80018ea:	f7ff ffa3 	bl	8001834 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80018ee:	203f      	movs	r0, #63	@ 0x3f
 80018f0:	f7ff ffa0 	bl	8001834 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018f4:	20a4      	movs	r0, #164	@ 0xa4
 80018f6:	f7ff ff9d 	bl	8001834 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80018fa:	20d3      	movs	r0, #211	@ 0xd3
 80018fc:	f7ff ff9a 	bl	8001834 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff ff97 	bl	8001834 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001906:	20d5      	movs	r0, #213	@ 0xd5
 8001908:	f7ff ff94 	bl	8001834 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800190c:	20f0      	movs	r0, #240	@ 0xf0
 800190e:	f7ff ff91 	bl	8001834 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001912:	20d9      	movs	r0, #217	@ 0xd9
 8001914:	f7ff ff8e 	bl	8001834 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001918:	2022      	movs	r0, #34	@ 0x22
 800191a:	f7ff ff8b 	bl	8001834 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800191e:	20da      	movs	r0, #218	@ 0xda
 8001920:	f7ff ff88 	bl	8001834 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001924:	2012      	movs	r0, #18
 8001926:	f7ff ff85 	bl	8001834 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800192a:	20db      	movs	r0, #219	@ 0xdb
 800192c:	f7ff ff82 	bl	8001834 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001930:	2020      	movs	r0, #32
 8001932:	f7ff ff7f 	bl	8001834 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001936:	208d      	movs	r0, #141	@ 0x8d
 8001938:	f7ff ff7c 	bl	8001834 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800193c:	2014      	movs	r0, #20
 800193e:	f7ff ff79 	bl	8001834 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001942:	2001      	movs	r0, #1
 8001944:	f000 ff2c 	bl	80027a0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001948:	2000      	movs	r0, #0
 800194a:	f000 f80f 	bl	800196c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800194e:	f000 f825 	bl	800199c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001952:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <ssd1306_Init+0xd0>)
 8001954:	2200      	movs	r2, #0
 8001956:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001958:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <ssd1306_Init+0xd0>)
 800195a:	2200      	movs	r2, #0
 800195c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800195e:	4b02      	ldr	r3, [pc, #8]	@ (8001968 <ssd1306_Init+0xd0>)
 8001960:	2201      	movs	r2, #1
 8001962:	711a      	strb	r2, [r3, #4]
}
 8001964:	bf00      	nop
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000610 	.word	0x20000610

0800196c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <ssd1306_Fill+0x14>
 800197c:	2300      	movs	r3, #0
 800197e:	e000      	b.n	8001982 <ssd1306_Fill+0x16>
 8001980:	23ff      	movs	r3, #255	@ 0xff
 8001982:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001986:	4619      	mov	r1, r3
 8001988:	4803      	ldr	r0, [pc, #12]	@ (8001998 <ssd1306_Fill+0x2c>)
 800198a:	f006 fb1b 	bl	8007fc4 <memset>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000210 	.word	0x20000210

0800199c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80019a2:	2300      	movs	r3, #0
 80019a4:	71fb      	strb	r3, [r7, #7]
 80019a6:	e016      	b.n	80019d6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	3b50      	subs	r3, #80	@ 0x50
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff ff40 	bl	8001834 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff ff3d 	bl	8001834 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80019ba:	2010      	movs	r0, #16
 80019bc:	f7ff ff3a 	bl	8001834 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	01db      	lsls	r3, r3, #7
 80019c4:	4a08      	ldr	r2, [pc, #32]	@ (80019e8 <ssd1306_UpdateScreen+0x4c>)
 80019c6:	4413      	add	r3, r2
 80019c8:	2180      	movs	r1, #128	@ 0x80
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff4a 	bl	8001864 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	3301      	adds	r3, #1
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2b07      	cmp	r3, #7
 80019da:	d9e5      	bls.n	80019a8 <ssd1306_UpdateScreen+0xc>
    }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	20000210 	.word	0x20000210

080019ec <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	460b      	mov	r3, r1
 80019f8:	71bb      	strb	r3, [r7, #6]
 80019fa:	4613      	mov	r3, r2
 80019fc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db3d      	blt.n	8001a82 <ssd1306_DrawPixel+0x96>
 8001a06:	79bb      	ldrb	r3, [r7, #6]
 8001a08:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a0a:	d83a      	bhi.n	8001a82 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001a0c:	797b      	ldrb	r3, [r7, #5]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d11a      	bne.n	8001a48 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a12:	79fa      	ldrb	r2, [r7, #7]
 8001a14:	79bb      	ldrb	r3, [r7, #6]
 8001a16:	08db      	lsrs	r3, r3, #3
 8001a18:	b2d8      	uxtb	r0, r3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	01db      	lsls	r3, r3, #7
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a1b      	ldr	r2, [pc, #108]	@ (8001a90 <ssd1306_DrawPixel+0xa4>)
 8001a22:	5cd3      	ldrb	r3, [r2, r3]
 8001a24:	b25a      	sxtb	r2, r3
 8001a26:	79bb      	ldrb	r3, [r7, #6]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a32:	b25b      	sxtb	r3, r3
 8001a34:	4313      	orrs	r3, r2
 8001a36:	b259      	sxtb	r1, r3
 8001a38:	79fa      	ldrb	r2, [r7, #7]
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	01db      	lsls	r3, r3, #7
 8001a3e:	4413      	add	r3, r2
 8001a40:	b2c9      	uxtb	r1, r1
 8001a42:	4a13      	ldr	r2, [pc, #76]	@ (8001a90 <ssd1306_DrawPixel+0xa4>)
 8001a44:	54d1      	strb	r1, [r2, r3]
 8001a46:	e01d      	b.n	8001a84 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001a48:	79fa      	ldrb	r2, [r7, #7]
 8001a4a:	79bb      	ldrb	r3, [r7, #6]
 8001a4c:	08db      	lsrs	r3, r3, #3
 8001a4e:	b2d8      	uxtb	r0, r3
 8001a50:	4603      	mov	r3, r0
 8001a52:	01db      	lsls	r3, r3, #7
 8001a54:	4413      	add	r3, r2
 8001a56:	4a0e      	ldr	r2, [pc, #56]	@ (8001a90 <ssd1306_DrawPixel+0xa4>)
 8001a58:	5cd3      	ldrb	r3, [r2, r3]
 8001a5a:	b25a      	sxtb	r2, r3
 8001a5c:	79bb      	ldrb	r3, [r7, #6]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	2101      	movs	r1, #1
 8001a64:	fa01 f303 	lsl.w	r3, r1, r3
 8001a68:	b25b      	sxtb	r3, r3
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	4013      	ands	r3, r2
 8001a70:	b259      	sxtb	r1, r3
 8001a72:	79fa      	ldrb	r2, [r7, #7]
 8001a74:	4603      	mov	r3, r0
 8001a76:	01db      	lsls	r3, r3, #7
 8001a78:	4413      	add	r3, r2
 8001a7a:	b2c9      	uxtb	r1, r1
 8001a7c:	4a04      	ldr	r2, [pc, #16]	@ (8001a90 <ssd1306_DrawPixel+0xa4>)
 8001a7e:	54d1      	strb	r1, [r2, r3]
 8001a80:	e000      	b.n	8001a84 <ssd1306_DrawPixel+0x98>
        return;
 8001a82:	bf00      	nop
    }
}
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000210 	.word	0x20000210

08001a94 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b089      	sub	sp, #36	@ 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	4638      	mov	r0, r7
 8001a9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001aa2:	4623      	mov	r3, r4
 8001aa4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001aa6:	7bfb      	ldrb	r3, [r7, #15]
 8001aa8:	2b1f      	cmp	r3, #31
 8001aaa:	d902      	bls.n	8001ab2 <ssd1306_WriteChar+0x1e>
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	2b7e      	cmp	r3, #126	@ 0x7e
 8001ab0:	d901      	bls.n	8001ab6 <ssd1306_WriteChar+0x22>
        return 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e079      	b.n	8001baa <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <ssd1306_WriteChar+0x34>
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	3b20      	subs	r3, #32
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	e000      	b.n	8001aca <ssd1306_WriteChar+0x36>
 8001ac8:	783b      	ldrb	r3, [r7, #0]
 8001aca:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001acc:	4b39      	ldr	r3, [pc, #228]	@ (8001bb4 <ssd1306_WriteChar+0x120>)
 8001ace:	881b      	ldrh	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	2b80      	cmp	r3, #128	@ 0x80
 8001ad8:	dc06      	bgt.n	8001ae8 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001ada:	4b36      	ldr	r3, [pc, #216]	@ (8001bb4 <ssd1306_WriteChar+0x120>)
 8001adc:	885b      	ldrh	r3, [r3, #2]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	787b      	ldrb	r3, [r7, #1]
 8001ae2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8001ae4:	2b40      	cmp	r3, #64	@ 0x40
 8001ae6:	dd01      	ble.n	8001aec <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e05e      	b.n	8001baa <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001aec:	2300      	movs	r3, #0
 8001aee:	61fb      	str	r3, [r7, #28]
 8001af0:	e04d      	b.n	8001b8e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	3b20      	subs	r3, #32
 8001af8:	7879      	ldrb	r1, [r7, #1]
 8001afa:	fb01 f303 	mul.w	r3, r1, r3
 8001afe:	4619      	mov	r1, r3
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	440b      	add	r3, r1
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	4413      	add	r3, r2
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	e036      	b.n	8001b80 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d013      	beq.n	8001b4a <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001b22:	4b24      	ldr	r3, [pc, #144]	@ (8001bb4 <ssd1306_WriteChar+0x120>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	b2d8      	uxtb	r0, r3
 8001b30:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <ssd1306_WriteChar+0x120>)
 8001b32:	885b      	ldrh	r3, [r3, #2]
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001b42:	4619      	mov	r1, r3
 8001b44:	f7ff ff52 	bl	80019ec <ssd1306_DrawPixel>
 8001b48:	e017      	b.n	8001b7a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <ssd1306_WriteChar+0x120>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	4413      	add	r3, r2
 8001b56:	b2d8      	uxtb	r0, r3
 8001b58:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <ssd1306_WriteChar+0x120>)
 8001b5a:	885b      	ldrh	r3, [r3, #2]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	4413      	add	r3, r2
 8001b64:	b2d9      	uxtb	r1, r3
 8001b66:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	bf0c      	ite	eq
 8001b6e:	2301      	moveq	r3, #1
 8001b70:	2300      	movne	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	f7ff ff39 	bl	80019ec <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	3301      	adds	r3, #1
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	7dfb      	ldrb	r3, [r7, #23]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d3c4      	bcc.n	8001b12 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	787b      	ldrb	r3, [r7, #1]
 8001b90:	461a      	mov	r2, r3
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d3ac      	bcc.n	8001af2 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <ssd1306_WriteChar+0x120>)
 8001b9a:	881a      	ldrh	r2, [r3, #0]
 8001b9c:	7dfb      	ldrb	r3, [r7, #23]
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	4413      	add	r3, r2
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b03      	ldr	r3, [pc, #12]	@ (8001bb4 <ssd1306_WriteChar+0x120>)
 8001ba6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	@ 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd90      	pop	{r4, r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000610 	.word	0x20000610

08001bb8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af02      	add	r7, sp, #8
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	4638      	mov	r0, r7
 8001bc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001bc6:	e013      	b.n	8001bf0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	7818      	ldrb	r0, [r3, #0]
 8001bcc:	7e3b      	ldrb	r3, [r7, #24]
 8001bce:	9300      	str	r3, [sp, #0]
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bd4:	f7ff ff5e 	bl	8001a94 <ssd1306_WriteChar>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d002      	beq.n	8001bea <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	e008      	b.n	8001bfc <ssd1306_WriteString+0x44>
        }
        str++;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	3301      	adds	r3, #1
 8001bee:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e7      	bne.n	8001bc8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	71fb      	strb	r3, [r7, #7]
 8001c10:	4613      	mov	r3, r2
 8001c12:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	4b05      	ldr	r3, [pc, #20]	@ (8001c30 <ssd1306_SetCursor+0x2c>)
 8001c1a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001c1c:	79bb      	ldrb	r3, [r7, #6]
 8001c1e:	b29a      	uxth	r2, r3
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <ssd1306_SetCursor+0x2c>)
 8001c22:	805a      	strh	r2, [r3, #2]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	20000610 	.word	0x20000610

08001c34 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001c34:	b590      	push	{r4, r7, lr}
 8001c36:	b089      	sub	sp, #36	@ 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4604      	mov	r4, r0
 8001c3c:	4608      	mov	r0, r1
 8001c3e:	4611      	mov	r1, r2
 8001c40:	461a      	mov	r2, r3
 8001c42:	4623      	mov	r3, r4
 8001c44:	71fb      	strb	r3, [r7, #7]
 8001c46:	4603      	mov	r3, r0
 8001c48:	71bb      	strb	r3, [r7, #6]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	717b      	strb	r3, [r7, #5]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001c52:	797a      	ldrb	r2, [r7, #5]
 8001c54:	79fb      	ldrb	r3, [r7, #7]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bfb8      	it	lt
 8001c5c:	425b      	neglt	r3, r3
 8001c5e:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001c60:	793a      	ldrb	r2, [r7, #4]
 8001c62:	79bb      	ldrb	r3, [r7, #6]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bfb8      	it	lt
 8001c6a:	425b      	neglt	r3, r3
 8001c6c:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001c6e:	79fa      	ldrb	r2, [r7, #7]
 8001c70:	797b      	ldrb	r3, [r7, #5]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d201      	bcs.n	8001c7a <ssd1306_Line+0x46>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e001      	b.n	8001c7e <ssd1306_Line+0x4a>
 8001c7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c7e:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001c80:	79ba      	ldrb	r2, [r7, #6]
 8001c82:	793b      	ldrb	r3, [r7, #4]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d201      	bcs.n	8001c8c <ssd1306_Line+0x58>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e001      	b.n	8001c90 <ssd1306_Line+0x5c>
 8001c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c90:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001c9a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001c9e:	7939      	ldrb	r1, [r7, #4]
 8001ca0:	797b      	ldrb	r3, [r7, #5]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fea2 	bl	80019ec <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001ca8:	e024      	b.n	8001cf4 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001caa:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001cae:	79b9      	ldrb	r1, [r7, #6]
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fe9a 	bl	80019ec <ssd1306_DrawPixel>
        error2 = error * 2;
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	425b      	negs	r3, r3
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	dd08      	ble.n	8001cda <ssd1306_Line+0xa6>
            error -= deltaY;
 8001cc8:	69fa      	ldr	r2, [r7, #28]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	79fb      	ldrb	r3, [r7, #7]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	da08      	bge.n	8001cf4 <ssd1306_Line+0xc0>
            error += deltaX;
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	79bb      	ldrb	r3, [r7, #6]
 8001cf0:	4413      	add	r3, r2
 8001cf2:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001cf4:	79fa      	ldrb	r2, [r7, #7]
 8001cf6:	797b      	ldrb	r3, [r7, #5]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d1d6      	bne.n	8001caa <ssd1306_Line+0x76>
 8001cfc:	79ba      	ldrb	r2, [r7, #6]
 8001cfe:	793b      	ldrb	r3, [r7, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1d2      	bne.n	8001caa <ssd1306_Line+0x76>
        }
    }
    return;
 8001d04:	bf00      	nop
}
 8001d06:	3724      	adds	r7, #36	@ 0x24
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd90      	pop	{r4, r7, pc}

08001d0c <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b087      	sub	sp, #28
 8001d10:	af02      	add	r7, sp, #8
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	460b      	mov	r3, r1
 8001d16:	807b      	strh	r3, [r7, #2]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d02a      	beq.n	8001d78 <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 8001d22:	2301      	movs	r3, #1
 8001d24:	81fb      	strh	r3, [r7, #14]
 8001d26:	e022      	b.n	8001d6e <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 8001d28:	89fb      	ldrh	r3, [r7, #14]
 8001d2a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	4413      	add	r3, r2
 8001d36:	7818      	ldrb	r0, [r3, #0]
 8001d38:	89fb      	ldrh	r3, [r7, #14]
 8001d3a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	7859      	ldrb	r1, [r3, #1]
 8001d48:	89fb      	ldrh	r3, [r7, #14]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	781c      	ldrb	r4, [r3, #0]
 8001d52:	89fb      	ldrh	r3, [r7, #14]
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	785a      	ldrb	r2, [r3, #1]
 8001d5c:	787b      	ldrb	r3, [r7, #1]
 8001d5e:	9300      	str	r3, [sp, #0]
 8001d60:	4613      	mov	r3, r2
 8001d62:	4622      	mov	r2, r4
 8001d64:	f7ff ff66 	bl	8001c34 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 8001d68:	89fb      	ldrh	r3, [r7, #14]
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	81fb      	strh	r3, [r7, #14]
 8001d6e:	89fa      	ldrh	r2, [r7, #14]
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d3d8      	bcc.n	8001d28 <ssd1306_Polyline+0x1c>
    }

    return;
 8001d76:	e000      	b.n	8001d7a <ssd1306_Polyline+0x6e>
        return;
 8001d78:	bf00      	nop
}
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}

08001d80 <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * (3.14f / 180.0f);
 8001d8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d8e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001da4 <ssd1306_DegToRad+0x24>
 8001d92:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001d96:	eeb0 0a67 	vmov.f32	s0, s15
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	3c8ee7a7 	.word	0x3c8ee7a7

08001da8 <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 8001db2:	88fb      	ldrh	r3, [r7, #6]
 8001db4:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8001db8:	d802      	bhi.n	8001dc0 <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	81fb      	strh	r3, [r7, #14]
 8001dbe:	e013      	b.n	8001de8 <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 8001dc0:	88fb      	ldrh	r3, [r7, #6]
 8001dc2:	08da      	lsrs	r2, r3, #3
 8001dc4:	490c      	ldr	r1, [pc, #48]	@ (8001df8 <ssd1306_NormalizeTo0_360+0x50>)
 8001dc6:	fba1 1202 	umull	r1, r2, r1, r2
 8001dca:	0892      	lsrs	r2, r2, #2
 8001dcc:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8001dd0:	fb01 f202 	mul.w	r2, r1, r2
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	81fb      	strh	r3, [r7, #14]
        loc_angle = (loc_angle ? loc_angle : 360);
 8001dd8:	89fb      	ldrh	r3, [r7, #14]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <ssd1306_NormalizeTo0_360+0x3a>
 8001dde:	89fb      	ldrh	r3, [r7, #14]
 8001de0:	e001      	b.n	8001de6 <ssd1306_NormalizeTo0_360+0x3e>
 8001de2:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001de6:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 8001de8:	89fb      	ldrh	r3, [r7, #14]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
 8001df6:	bf00      	nop
 8001df8:	16c16c17 	.word	0x16c16c17

08001dfc <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8001dfc:	b590      	push	{r4, r7, lr}
 8001dfe:	b08d      	sub	sp, #52	@ 0x34
 8001e00:	af02      	add	r7, sp, #8
 8001e02:	4604      	mov	r4, r0
 8001e04:	4608      	mov	r0, r1
 8001e06:	4611      	mov	r1, r2
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4623      	mov	r3, r4
 8001e0c:	73fb      	strb	r3, [r7, #15]
 8001e0e:	4603      	mov	r3, r0
 8001e10:	73bb      	strb	r3, [r7, #14]
 8001e12:	460b      	mov	r3, r1
 8001e14:	737b      	strb	r3, [r7, #13]
 8001e16:	4613      	mov	r3, r2
 8001e18:	817b      	strh	r3, [r7, #10]
    uint8_t yp1,yp2;
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8001e1a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ffc3 	bl	8001da8 <ssd1306_NormalizeTo0_360>
 8001e22:	4603      	mov	r3, r0
 8001e24:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001e26:	897b      	ldrh	r3, [r7, #10]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ffbd 	bl	8001da8 <ssd1306_NormalizeTo0_360>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461a      	mov	r2, r3
 8001e32:	4b63      	ldr	r3, [pc, #396]	@ (8001fc0 <ssd1306_DrawArc+0x1c4>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	4a62      	ldr	r2, [pc, #392]	@ (8001fc4 <ssd1306_DrawArc+0x1c8>)
 8001e3c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e40:	441a      	add	r2, r3
 8001e42:	1212      	asrs	r2, r2, #8
 8001e44:	17db      	asrs	r3, r3, #31
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001e4a:	4b5d      	ldr	r3, [pc, #372]	@ (8001fc0 <ssd1306_DrawArc+0x1c4>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	08db      	lsrs	r3, r3, #3
 8001e58:	4a5b      	ldr	r2, [pc, #364]	@ (8001fc8 <ssd1306_DrawArc+0x1cc>)
 8001e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	ee07 3a90 	vmov	s15, r3
 8001e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e7a:	edc7 7a05 	vstr	s15, [r7, #20]
    while(count < approx_segments)
 8001e7e:	e096      	b.n	8001fae <ssd1306_DrawArc+0x1b2>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 8001e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e92:	eeb0 0a67 	vmov.f32	s0, s15
 8001e96:	f7ff ff73 	bl	8001d80 <ssd1306_DegToRad>
 8001e9a:	ed87 0a08 	vstr	s0, [r7, #32]
        xp1 = x + (int8_t)(sinf(rad)*radius);
 8001e9e:	ed97 0a08 	vldr	s0, [r7, #32]
 8001ea2:	f006 fd37 	bl	8008914 <sinf>
 8001ea6:	eeb0 7a40 	vmov.f32	s14, s0
 8001eaa:	7b7b      	ldrb	r3, [r7, #13]
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ebc:	edc7 7a01 	vstr	s15, [r7, #4]
 8001ec0:	793b      	ldrb	r3, [r7, #4]
 8001ec2:	b25b      	sxtb	r3, r3
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	4413      	add	r3, r2
 8001eca:	74fb      	strb	r3, [r7, #19]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 8001ecc:	ed97 0a08 	vldr	s0, [r7, #32]
 8001ed0:	f006 fcdc 	bl	800888c <cosf>
 8001ed4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ed8:	7b7b      	ldrb	r3, [r7, #13]
 8001eda:	ee07 3a90 	vmov	s15, r3
 8001ede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eea:	edc7 7a01 	vstr	s15, [r7, #4]
 8001eee:	793b      	ldrb	r3, [r7, #4]
 8001ef0:	b25b      	sxtb	r3, r3
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	7bbb      	ldrb	r3, [r7, #14]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	74bb      	strb	r3, [r7, #18]
        count++;
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	3301      	adds	r3, #1
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
        if(count != approx_segments) {
 8001f00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d00f      	beq.n	8001f28 <ssd1306_DrawArc+0x12c>
            rad = ssd1306_DegToRad(count*approx_degree);
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f12:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f1e:	f7ff ff2f 	bl	8001d80 <ssd1306_DegToRad>
 8001f22:	ed87 0a08 	vstr	s0, [r7, #32]
 8001f26:	e00a      	b.n	8001f3e <ssd1306_DrawArc+0x142>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	ee07 3a90 	vmov	s15, r3
 8001f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f32:	eeb0 0a67 	vmov.f32	s0, s15
 8001f36:	f7ff ff23 	bl	8001d80 <ssd1306_DegToRad>
 8001f3a:	ed87 0a08 	vstr	s0, [r7, #32]
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 8001f3e:	ed97 0a08 	vldr	s0, [r7, #32]
 8001f42:	f006 fce7 	bl	8008914 <sinf>
 8001f46:	eeb0 7a40 	vmov.f32	s14, s0
 8001f4a:	7b7b      	ldrb	r3, [r7, #13]
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f5c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f60:	793b      	ldrb	r3, [r7, #4]
 8001f62:	b25b      	sxtb	r3, r3
 8001f64:	b2da      	uxtb	r2, r3
 8001f66:	7bfb      	ldrb	r3, [r7, #15]
 8001f68:	4413      	add	r3, r2
 8001f6a:	747b      	strb	r3, [r7, #17]
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 8001f6c:	ed97 0a08 	vldr	s0, [r7, #32]
 8001f70:	f006 fc8c 	bl	800888c <cosf>
 8001f74:	eeb0 7a40 	vmov.f32	s14, s0
 8001f78:	7b7b      	ldrb	r3, [r7, #13]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f8a:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f8e:	793b      	ldrb	r3, [r7, #4]
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	b2da      	uxtb	r2, r3
 8001f94:	7bbb      	ldrb	r3, [r7, #14]
 8001f96:	4413      	add	r3, r2
 8001f98:	743b      	strb	r3, [r7, #16]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8001f9a:	7c3c      	ldrb	r4, [r7, #16]
 8001f9c:	7c7a      	ldrb	r2, [r7, #17]
 8001f9e:	7cb9      	ldrb	r1, [r7, #18]
 8001fa0:	7cf8      	ldrb	r0, [r7, #19]
 8001fa2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	4623      	mov	r3, r4
 8001faa:	f7ff fe43 	bl	8001c34 <ssd1306_Line>
    while(count < approx_segments)
 8001fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	f4ff af64 	bcc.w	8001e80 <ssd1306_DrawArc+0x84>
    }
    
    return;
 8001fb8:	bf00      	nop
}
 8001fba:	372c      	adds	r7, #44	@ 0x2c
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd90      	pop	{r4, r7, pc}
 8001fc0:	08009452 	.word	0x08009452
 8001fc4:	b60b60b7 	.word	0xb60b60b7
 8001fc8:	16c16c17 	.word	0x16c16c17

08001fcc <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b08f      	sub	sp, #60	@ 0x3c
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	4608      	mov	r0, r1
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4623      	mov	r3, r4
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	4603      	mov	r3, r0
 8001fe0:	73bb      	strb	r3, [r7, #14]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	737b      	strb	r3, [r7, #13]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	817b      	strh	r3, [r7, #10]
    const uint32_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
 8001fea:	2324      	movs	r3, #36	@ 0x24
 8001fec:	623b      	str	r3, [r7, #32]
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1;
    uint8_t xp2 = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t yp1;
    uint8_t yp2 = 0;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8001ffa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fed2 	bl	8001da8 <ssd1306_NormalizeTo0_360>
 8002004:	4603      	mov	r3, r0
 8002006:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8002008:	897b      	ldrh	r3, [r7, #10]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff fecc 	bl	8001da8 <ssd1306_NormalizeTo0_360>
 8002010:	4603      	mov	r3, r0
 8002012:	461a      	mov	r2, r3
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	fb02 f303 	mul.w	r3, r2, r3
 800201a:	08db      	lsrs	r3, r3, #3
 800201c:	4a8a      	ldr	r2, [pc, #552]	@ (8002248 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 800201e:	fba2 2303 	umull	r2, r3, r2, r3
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	62bb      	str	r3, [r7, #40]	@ 0x28
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	6a3a      	ldr	r2, [r7, #32]
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	08db      	lsrs	r3, r3, #3
 8002030:	4a85      	ldr	r2, [pc, #532]	@ (8002248 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 8002032:	fba2 2303 	umull	r2, r3, r2, r3
 8002036:	089b      	lsrs	r3, r3, #2
 8002038:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	ee07 3a90 	vmov	s15, r3
 8002040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800204e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002052:	edc7 7a05 	vstr	s15, [r7, #20]

    rad = ssd1306_DegToRad(count*approx_degree);
 8002056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002058:	ee07 3a90 	vmov	s15, r3
 800205c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002060:	edd7 7a05 	vldr	s15, [r7, #20]
 8002064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002068:	eeb0 0a67 	vmov.f32	s0, s15
 800206c:	f7ff fe88 	bl	8001d80 <ssd1306_DegToRad>
 8002070:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    uint8_t first_point_x = x + (int8_t)(sinf(rad)*radius);
 8002074:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8002078:	f006 fc4c 	bl	8008914 <sinf>
 800207c:	eeb0 7a40 	vmov.f32	s14, s0
 8002080:	7b7b      	ldrb	r3, [r7, #13]
 8002082:	ee07 3a90 	vmov	s15, r3
 8002086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800208a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002092:	edc7 7a01 	vstr	s15, [r7, #4]
 8002096:	793b      	ldrb	r3, [r7, #4]
 8002098:	b25b      	sxtb	r3, r3
 800209a:	b2da      	uxtb	r2, r3
 800209c:	7bfb      	ldrb	r3, [r7, #15]
 800209e:	4413      	add	r3, r2
 80020a0:	74fb      	strb	r3, [r7, #19]
    uint8_t first_point_y = y + (int8_t)(cosf(rad)*radius);   
 80020a2:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80020a6:	f006 fbf1 	bl	800888c <cosf>
 80020aa:	eeb0 7a40 	vmov.f32	s14, s0
 80020ae:	7b7b      	ldrb	r3, [r7, #13]
 80020b0:	ee07 3a90 	vmov	s15, r3
 80020b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80020c4:	793b      	ldrb	r3, [r7, #4]
 80020c6:	b25b      	sxtb	r3, r3
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	7bbb      	ldrb	r3, [r7, #14]
 80020cc:	4413      	add	r3, r2
 80020ce:	74bb      	strb	r3, [r7, #18]
    while (count < approx_segments) {
 80020d0:	e09a      	b.n	8002208 <ssd1306_DrawArcWithRadiusLine+0x23c>
        rad = ssd1306_DegToRad(count*approx_degree);
 80020d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d4:	ee07 3a90 	vmov	s15, r3
 80020d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020e4:	eeb0 0a67 	vmov.f32	s0, s15
 80020e8:	f7ff fe4a 	bl	8001d80 <ssd1306_DegToRad>
 80020ec:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        xp1 = x + (int8_t)(sinf(rad)*radius);
 80020f0:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80020f4:	f006 fc0e 	bl	8008914 <sinf>
 80020f8:	eeb0 7a40 	vmov.f32	s14, s0
 80020fc:	7b7b      	ldrb	r3, [r7, #13]
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800210e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002112:	793b      	ldrb	r3, [r7, #4]
 8002114:	b25b      	sxtb	r3, r3
 8002116:	b2da      	uxtb	r2, r3
 8002118:	7bfb      	ldrb	r3, [r7, #15]
 800211a:	4413      	add	r3, r2
 800211c:	747b      	strb	r3, [r7, #17]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 800211e:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8002122:	f006 fbb3 	bl	800888c <cosf>
 8002126:	eeb0 7a40 	vmov.f32	s14, s0
 800212a:	7b7b      	ldrb	r3, [r7, #13]
 800212c:	ee07 3a90 	vmov	s15, r3
 8002130:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800213c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002140:	793b      	ldrb	r3, [r7, #4]
 8002142:	b25b      	sxtb	r3, r3
 8002144:	b2da      	uxtb	r2, r3
 8002146:	7bbb      	ldrb	r3, [r7, #14]
 8002148:	4413      	add	r3, r2
 800214a:	743b      	strb	r3, [r7, #16]
        count++;
 800214c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800214e:	3301      	adds	r3, #1
 8002150:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (count != approx_segments) {
 8002152:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	429a      	cmp	r2, r3
 8002158:	d00f      	beq.n	800217a <ssd1306_DrawArcWithRadiusLine+0x1ae>
            rad = ssd1306_DegToRad(count*approx_degree);
 800215a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215c:	ee07 3a90 	vmov	s15, r3
 8002160:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002164:	edd7 7a05 	vldr	s15, [r7, #20]
 8002168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800216c:	eeb0 0a67 	vmov.f32	s0, s15
 8002170:	f7ff fe06 	bl	8001d80 <ssd1306_DegToRad>
 8002174:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8002178:	e00a      	b.n	8002190 <ssd1306_DrawArcWithRadiusLine+0x1c4>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	ee07 3a90 	vmov	s15, r3
 8002180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002184:	eeb0 0a67 	vmov.f32	s0, s15
 8002188:	f7ff fdfa 	bl	8001d80 <ssd1306_DegToRad>
 800218c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 8002190:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8002194:	f006 fbbe 	bl	8008914 <sinf>
 8002198:	eeb0 7a40 	vmov.f32	s14, s0
 800219c:	7b7b      	ldrb	r3, [r7, #13]
 800219e:	ee07 3a90 	vmov	s15, r3
 80021a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ae:	edc7 7a01 	vstr	s15, [r7, #4]
 80021b2:	793b      	ldrb	r3, [r7, #4]
 80021b4:	b25b      	sxtb	r3, r3
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	4413      	add	r3, r2
 80021bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 80021c0:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80021c4:	f006 fb62 	bl	800888c <cosf>
 80021c8:	eeb0 7a40 	vmov.f32	s14, s0
 80021cc:	7b7b      	ldrb	r3, [r7, #13]
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021de:	edc7 7a01 	vstr	s15, [r7, #4]
 80021e2:	793b      	ldrb	r3, [r7, #4]
 80021e4:	b25b      	sxtb	r3, r3
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	7bbb      	ldrb	r3, [r7, #14]
 80021ea:	4413      	add	r3, r2
 80021ec:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 80021f0:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80021f4:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80021f8:	7c39      	ldrb	r1, [r7, #16]
 80021fa:	7c78      	ldrb	r0, [r7, #17]
 80021fc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	4623      	mov	r3, r4
 8002204:	f7ff fd16 	bl	8001c34 <ssd1306_Line>
    while (count < approx_segments) {
 8002208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	429a      	cmp	r2, r3
 800220e:	f4ff af60 	bcc.w	80020d2 <ssd1306_DrawArcWithRadiusLine+0x106>
    }
    
    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 8002212:	7cbc      	ldrb	r4, [r7, #18]
 8002214:	7cfa      	ldrb	r2, [r7, #19]
 8002216:	7bb9      	ldrb	r1, [r7, #14]
 8002218:	7bf8      	ldrb	r0, [r7, #15]
 800221a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	4623      	mov	r3, r4
 8002222:	f7ff fd07 	bl	8001c34 <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 8002226:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 800222a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800222e:	7bb9      	ldrb	r1, [r7, #14]
 8002230:	7bf8      	ldrb	r0, [r7, #15]
 8002232:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	4623      	mov	r3, r4
 800223a:	f7ff fcfb 	bl	8001c34 <ssd1306_Line>
    return;
 800223e:	bf00      	nop
}
 8002240:	3734      	adds	r7, #52	@ 0x34
 8002242:	46bd      	mov	sp, r7
 8002244:	bd90      	pop	{r4, r7, pc}
 8002246:	bf00      	nop
 8002248:	16c16c17 	.word	0x16c16c17

0800224c <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	4604      	mov	r4, r0
 8002254:	4608      	mov	r0, r1
 8002256:	4611      	mov	r1, r2
 8002258:	461a      	mov	r2, r3
 800225a:	4623      	mov	r3, r4
 800225c:	71fb      	strb	r3, [r7, #7]
 800225e:	4603      	mov	r3, r0
 8002260:	71bb      	strb	r3, [r7, #6]
 8002262:	460b      	mov	r3, r1
 8002264:	717b      	strb	r3, [r7, #5]
 8002266:	4613      	mov	r3, r2
 8002268:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 800226a:	797b      	ldrb	r3, [r7, #5]
 800226c:	425b      	negs	r3, r3
 800226e:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8002274:	797b      	ldrb	r3, [r7, #5]
 8002276:	f1c3 0301 	rsb	r3, r3, #1
 800227a:	005b      	lsls	r3, r3, #1
 800227c:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db65      	blt.n	8002352 <ssd1306_DrawCircle+0x106>
 8002286:	79bb      	ldrb	r3, [r7, #6]
 8002288:	2b3f      	cmp	r3, #63	@ 0x3f
 800228a:	d862      	bhi.n	8002352 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	79fa      	ldrb	r2, [r7, #7]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	b2d8      	uxtb	r0, r3
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	79bb      	ldrb	r3, [r7, #6]
 800229c:	4413      	add	r3, r2
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	793a      	ldrb	r2, [r7, #4]
 80022a2:	4619      	mov	r1, r3
 80022a4:	f7ff fba2 	bl	80019ec <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	79fb      	ldrb	r3, [r7, #7]
 80022ae:	4413      	add	r3, r2
 80022b0:	b2d8      	uxtb	r0, r3
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	79bb      	ldrb	r3, [r7, #6]
 80022b8:	4413      	add	r3, r2
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	793a      	ldrb	r2, [r7, #4]
 80022be:	4619      	mov	r1, r3
 80022c0:	f7ff fb94 	bl	80019ec <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	4413      	add	r3, r2
 80022cc:	b2d8      	uxtb	r0, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	79ba      	ldrb	r2, [r7, #6]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	793a      	ldrb	r2, [r7, #4]
 80022da:	4619      	mov	r1, r3
 80022dc:	f7ff fb86 	bl	80019ec <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	79fa      	ldrb	r2, [r7, #7]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	b2d8      	uxtb	r0, r3
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	79ba      	ldrb	r2, [r7, #6]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	793a      	ldrb	r2, [r7, #4]
 80022f6:	4619      	mov	r1, r3
 80022f8:	f7ff fb78 	bl	80019ec <ssd1306_DrawPixel>
        e2 = err;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8002300:	68ba      	ldr	r2, [r7, #8]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	429a      	cmp	r2, r3
 8002306:	dc13      	bgt.n	8002330 <ssd1306_DrawCircle+0xe4>
            y++;
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	3301      	adds	r3, #1
 800230c:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	3301      	adds	r3, #1
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	4413      	add	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	425b      	negs	r3, r3
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	429a      	cmp	r2, r3
 8002322:	d105      	bne.n	8002330 <ssd1306_DrawCircle+0xe4>
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	429a      	cmp	r2, r3
 800232a:	dc01      	bgt.n	8002330 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	dd08      	ble.n	800234a <ssd1306_DrawCircle+0xfe>
            x++;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3301      	adds	r3, #1
 800233c:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	3301      	adds	r3, #1
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b00      	cmp	r3, #0
 800234e:	dd9d      	ble.n	800228c <ssd1306_DrawCircle+0x40>

    return;
 8002350:	e000      	b.n	8002354 <ssd1306_DrawCircle+0x108>
        return;
 8002352:	bf00      	nop
}
 8002354:	371c      	adds	r7, #28
 8002356:	46bd      	mov	sp, r7
 8002358:	bd90      	pop	{r4, r7, pc}

0800235a <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 800235a:	b590      	push	{r4, r7, lr}
 800235c:	b089      	sub	sp, #36	@ 0x24
 800235e:	af00      	add	r7, sp, #0
 8002360:	4604      	mov	r4, r0
 8002362:	4608      	mov	r0, r1
 8002364:	4611      	mov	r1, r2
 8002366:	461a      	mov	r2, r3
 8002368:	4623      	mov	r3, r4
 800236a:	71fb      	strb	r3, [r7, #7]
 800236c:	4603      	mov	r3, r0
 800236e:	71bb      	strb	r3, [r7, #6]
 8002370:	460b      	mov	r3, r1
 8002372:	717b      	strb	r3, [r7, #5]
 8002374:	4613      	mov	r3, r2
 8002376:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8002378:	797b      	ldrb	r3, [r7, #5]
 800237a:	425b      	negs	r3, r3
 800237c:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 8002382:	797b      	ldrb	r3, [r7, #5]
 8002384:	f1c3 0301 	rsb	r3, r3, #1
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800238c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002390:	2b00      	cmp	r3, #0
 8002392:	db51      	blt.n	8002438 <ssd1306_FillCircle+0xde>
 8002394:	79bb      	ldrb	r3, [r7, #6]
 8002396:	2b3f      	cmp	r3, #63	@ 0x3f
 8002398:	d84e      	bhi.n	8002438 <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	79bb      	ldrb	r3, [r7, #6]
 80023a0:	4413      	add	r3, r2
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	e017      	b.n	80023d6 <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	79fa      	ldrb	r2, [r7, #7]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	73bb      	strb	r3, [r7, #14]
 80023b0:	e008      	b.n	80023c4 <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 80023b2:	793a      	ldrb	r2, [r7, #4]
 80023b4:	7bf9      	ldrb	r1, [r7, #15]
 80023b6:	7bbb      	ldrb	r3, [r7, #14]
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7ff fb17 	bl	80019ec <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 80023be:	7bbb      	ldrb	r3, [r7, #14]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	73bb      	strb	r3, [r7, #14]
 80023c4:	7bba      	ldrb	r2, [r7, #14]
 80023c6:	79f9      	ldrb	r1, [r7, #7]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	440b      	add	r3, r1
 80023cc:	429a      	cmp	r2, r3
 80023ce:	daf0      	bge.n	80023b2 <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	7bfa      	ldrb	r2, [r7, #15]
 80023d8:	79b9      	ldrb	r1, [r7, #6]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	1acb      	subs	r3, r1, r3
 80023de:	429a      	cmp	r2, r3
 80023e0:	dae1      	bge.n	80023a6 <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	dc13      	bgt.n	8002416 <ssd1306_FillCircle+0xbc>
            y++;
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	3301      	adds	r3, #1
 80023f2:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	3301      	adds	r3, #1
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4413      	add	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	425b      	negs	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	429a      	cmp	r2, r3
 8002408:	d105      	bne.n	8002416 <ssd1306_FillCircle+0xbc>
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	429a      	cmp	r2, r3
 8002410:	dc01      	bgt.n	8002416 <ssd1306_FillCircle+0xbc>
                e2 = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	429a      	cmp	r2, r3
 800241c:	dd08      	ble.n	8002430 <ssd1306_FillCircle+0xd6>
            x++;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3301      	adds	r3, #1
 8002422:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	3301      	adds	r3, #1
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4413      	add	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2b00      	cmp	r3, #0
 8002434:	ddb1      	ble.n	800239a <ssd1306_FillCircle+0x40>

    return;
 8002436:	e000      	b.n	800243a <ssd1306_FillCircle+0xe0>
        return;
 8002438:	bf00      	nop
}
 800243a:	3724      	adds	r7, #36	@ 0x24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd90      	pop	{r4, r7, pc}

08002440 <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002440:	b590      	push	{r4, r7, lr}
 8002442:	b085      	sub	sp, #20
 8002444:	af02      	add	r7, sp, #8
 8002446:	4604      	mov	r4, r0
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4623      	mov	r3, r4
 8002450:	71fb      	strb	r3, [r7, #7]
 8002452:	4603      	mov	r3, r0
 8002454:	71bb      	strb	r3, [r7, #6]
 8002456:	460b      	mov	r3, r1
 8002458:	717b      	strb	r3, [r7, #5]
 800245a:	4613      	mov	r3, r2
 800245c:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 800245e:	79bc      	ldrb	r4, [r7, #6]
 8002460:	797a      	ldrb	r2, [r7, #5]
 8002462:	79b9      	ldrb	r1, [r7, #6]
 8002464:	79f8      	ldrb	r0, [r7, #7]
 8002466:	7e3b      	ldrb	r3, [r7, #24]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	4623      	mov	r3, r4
 800246c:	f7ff fbe2 	bl	8001c34 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8002470:	793c      	ldrb	r4, [r7, #4]
 8002472:	797a      	ldrb	r2, [r7, #5]
 8002474:	79b9      	ldrb	r1, [r7, #6]
 8002476:	7978      	ldrb	r0, [r7, #5]
 8002478:	7e3b      	ldrb	r3, [r7, #24]
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	4623      	mov	r3, r4
 800247e:	f7ff fbd9 	bl	8001c34 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8002482:	793c      	ldrb	r4, [r7, #4]
 8002484:	79fa      	ldrb	r2, [r7, #7]
 8002486:	7939      	ldrb	r1, [r7, #4]
 8002488:	7978      	ldrb	r0, [r7, #5]
 800248a:	7e3b      	ldrb	r3, [r7, #24]
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	4623      	mov	r3, r4
 8002490:	f7ff fbd0 	bl	8001c34 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8002494:	79bc      	ldrb	r4, [r7, #6]
 8002496:	79fa      	ldrb	r2, [r7, #7]
 8002498:	7939      	ldrb	r1, [r7, #4]
 800249a:	79f8      	ldrb	r0, [r7, #7]
 800249c:	7e3b      	ldrb	r3, [r7, #24]
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	4623      	mov	r3, r4
 80024a2:	f7ff fbc7 	bl	8001c34 <ssd1306_Line>

    return;
 80024a6:	bf00      	nop
}
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}

080024ae <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80024ae:	b590      	push	{r4, r7, lr}
 80024b0:	b085      	sub	sp, #20
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4604      	mov	r4, r0
 80024b6:	4608      	mov	r0, r1
 80024b8:	4611      	mov	r1, r2
 80024ba:	461a      	mov	r2, r3
 80024bc:	4623      	mov	r3, r4
 80024be:	71fb      	strb	r3, [r7, #7]
 80024c0:	4603      	mov	r3, r0
 80024c2:	71bb      	strb	r3, [r7, #6]
 80024c4:	460b      	mov	r3, r1
 80024c6:	717b      	strb	r3, [r7, #5]
 80024c8:	4613      	mov	r3, r2
 80024ca:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 80024cc:	79fa      	ldrb	r2, [r7, #7]
 80024ce:	797b      	ldrb	r3, [r7, #5]
 80024d0:	4293      	cmp	r3, r2
 80024d2:	bf28      	it	cs
 80024d4:	4613      	movcs	r3, r2
 80024d6:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 80024d8:	797a      	ldrb	r2, [r7, #5]
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	4293      	cmp	r3, r2
 80024de:	bf38      	it	cc
 80024e0:	4613      	movcc	r3, r2
 80024e2:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 80024e4:	79ba      	ldrb	r2, [r7, #6]
 80024e6:	793b      	ldrb	r3, [r7, #4]
 80024e8:	4293      	cmp	r3, r2
 80024ea:	bf28      	it	cs
 80024ec:	4613      	movcs	r3, r2
 80024ee:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80024f0:	793a      	ldrb	r2, [r7, #4]
 80024f2:	79bb      	ldrb	r3, [r7, #6]
 80024f4:	4293      	cmp	r3, r2
 80024f6:	bf38      	it	cc
 80024f8:	4613      	movcc	r3, r2
 80024fa:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80024fc:	7afb      	ldrb	r3, [r7, #11]
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e017      	b.n	8002532 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002502:	7b7b      	ldrb	r3, [r7, #13]
 8002504:	73bb      	strb	r3, [r7, #14]
 8002506:	e009      	b.n	800251c <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002508:	f897 2020 	ldrb.w	r2, [r7, #32]
 800250c:	7bf9      	ldrb	r1, [r7, #15]
 800250e:	7bbb      	ldrb	r3, [r7, #14]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fa6b 	bl	80019ec <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002516:	7bbb      	ldrb	r3, [r7, #14]
 8002518:	3301      	adds	r3, #1
 800251a:	73bb      	strb	r3, [r7, #14]
 800251c:	7bba      	ldrb	r2, [r7, #14]
 800251e:	7b3b      	ldrb	r3, [r7, #12]
 8002520:	429a      	cmp	r2, r3
 8002522:	d803      	bhi.n	800252c <ssd1306_FillRectangle+0x7e>
 8002524:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002528:	2b00      	cmp	r3, #0
 800252a:	daed      	bge.n	8002508 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	3301      	adds	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	7bfa      	ldrb	r2, [r7, #15]
 8002534:	7abb      	ldrb	r3, [r7, #10]
 8002536:	429a      	cmp	r2, r3
 8002538:	d803      	bhi.n	8002542 <ssd1306_FillRectangle+0x94>
 800253a:	7bfb      	ldrb	r3, [r7, #15]
 800253c:	2b3f      	cmp	r3, #63	@ 0x3f
 800253e:	d9e0      	bls.n	8002502 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8002540:	bf00      	nop
 8002542:	bf00      	nop
}
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	bd90      	pop	{r4, r7, pc}
	...

0800254c <ssd1306_InvertRectangle>:

SSD1306_Error_t ssd1306_InvertRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 800254c:	b490      	push	{r4, r7}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	4604      	mov	r4, r0
 8002554:	4608      	mov	r0, r1
 8002556:	4611      	mov	r1, r2
 8002558:	461a      	mov	r2, r3
 800255a:	4623      	mov	r3, r4
 800255c:	71fb      	strb	r3, [r7, #7]
 800255e:	4603      	mov	r3, r0
 8002560:	71bb      	strb	r3, [r7, #6]
 8002562:	460b      	mov	r3, r1
 8002564:	717b      	strb	r3, [r7, #5]
 8002566:	4613      	mov	r3, r2
 8002568:	713b      	strb	r3, [r7, #4]
  if ((x2 >= SSD1306_WIDTH) || (y2 >= SSD1306_HEIGHT)) {
 800256a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800256e:	2b00      	cmp	r3, #0
 8002570:	db02      	blt.n	8002578 <ssd1306_InvertRectangle+0x2c>
 8002572:	793b      	ldrb	r3, [r7, #4]
 8002574:	2b3f      	cmp	r3, #63	@ 0x3f
 8002576:	d901      	bls.n	800257c <ssd1306_InvertRectangle+0x30>
    return SSD1306_ERR;
 8002578:	2301      	movs	r3, #1
 800257a:	e09c      	b.n	80026b6 <ssd1306_InvertRectangle+0x16a>
  }
  if ((x1 > x2) || (y1 > y2)) {
 800257c:	79fa      	ldrb	r2, [r7, #7]
 800257e:	797b      	ldrb	r3, [r7, #5]
 8002580:	429a      	cmp	r2, r3
 8002582:	d803      	bhi.n	800258c <ssd1306_InvertRectangle+0x40>
 8002584:	79ba      	ldrb	r2, [r7, #6]
 8002586:	793b      	ldrb	r3, [r7, #4]
 8002588:	429a      	cmp	r2, r3
 800258a:	d901      	bls.n	8002590 <ssd1306_InvertRectangle+0x44>
    return SSD1306_ERR;
 800258c:	2301      	movs	r3, #1
 800258e:	e092      	b.n	80026b6 <ssd1306_InvertRectangle+0x16a>
  }
  uint32_t i;
  if ((y1 / 8) != (y2 / 8)) {
 8002590:	79bb      	ldrb	r3, [r7, #6]
 8002592:	08db      	lsrs	r3, r3, #3
 8002594:	b2da      	uxtb	r2, r3
 8002596:	793b      	ldrb	r3, [r7, #4]
 8002598:	08db      	lsrs	r3, r3, #3
 800259a:	b2db      	uxtb	r3, r3
 800259c:	429a      	cmp	r2, r3
 800259e:	d057      	beq.n	8002650 <ssd1306_InvertRectangle+0x104>
    /* if rectangle doesn't lie on one 8px row */
    for (uint32_t x = x1; x <= x2; x++) {
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	613b      	str	r3, [r7, #16]
 80025a4:	e04f      	b.n	8002646 <ssd1306_InvertRectangle+0xfa>
      i = x + (y1 / 8) * SSD1306_WIDTH;
 80025a6:	79bb      	ldrb	r3, [r7, #6]
 80025a8:	08db      	lsrs	r3, r3, #3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	01db      	lsls	r3, r3, #7
 80025ae:	461a      	mov	r2, r3
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	4413      	add	r3, r2
 80025b4:	617b      	str	r3, [r7, #20]
      SSD1306_Buffer[i] ^= 0xFF << (y1 % 8);
 80025b6:	4a42      	ldr	r2, [pc, #264]	@ (80026c0 <ssd1306_InvertRectangle+0x174>)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	4413      	add	r3, r2
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	b25a      	sxtb	r2, r3
 80025c0:	79bb      	ldrb	r3, [r7, #6]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	21ff      	movs	r1, #255	@ 0xff
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	b25b      	sxtb	r3, r3
 80025ce:	4053      	eors	r3, r2
 80025d0:	b25b      	sxtb	r3, r3
 80025d2:	b2d9      	uxtb	r1, r3
 80025d4:	4a3a      	ldr	r2, [pc, #232]	@ (80026c0 <ssd1306_InvertRectangle+0x174>)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	4413      	add	r3, r2
 80025da:	460a      	mov	r2, r1
 80025dc:	701a      	strb	r2, [r3, #0]
      i += SSD1306_WIDTH;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	3380      	adds	r3, #128	@ 0x80
 80025e2:	617b      	str	r3, [r7, #20]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 80025e4:	e00d      	b.n	8002602 <ssd1306_InvertRectangle+0xb6>
        SSD1306_Buffer[i] ^= 0xFF;
 80025e6:	4a36      	ldr	r2, [pc, #216]	@ (80026c0 <ssd1306_InvertRectangle+0x174>)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	4413      	add	r3, r2
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	b2d9      	uxtb	r1, r3
 80025f2:	4a33      	ldr	r2, [pc, #204]	@ (80026c0 <ssd1306_InvertRectangle+0x174>)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	4413      	add	r3, r2
 80025f8:	460a      	mov	r2, r1
 80025fa:	701a      	strb	r2, [r3, #0]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	3380      	adds	r3, #128	@ 0x80
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	793b      	ldrb	r3, [r7, #4]
 8002604:	08db      	lsrs	r3, r3, #3
 8002606:	b2db      	uxtb	r3, r3
 8002608:	01db      	lsls	r3, r3, #7
 800260a:	461a      	mov	r2, r3
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	429a      	cmp	r2, r3
 8002614:	d3e7      	bcc.n	80025e6 <ssd1306_InvertRectangle+0x9a>
      }
      SSD1306_Buffer[i] ^= 0xFF >> (7 - (y2 % 8));
 8002616:	4a2a      	ldr	r2, [pc, #168]	@ (80026c0 <ssd1306_InvertRectangle+0x174>)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	4413      	add	r3, r2
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	b25a      	sxtb	r2, r3
 8002620:	793b      	ldrb	r3, [r7, #4]
 8002622:	43db      	mvns	r3, r3
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	21ff      	movs	r1, #255	@ 0xff
 800262a:	fa41 f303 	asr.w	r3, r1, r3
 800262e:	b25b      	sxtb	r3, r3
 8002630:	4053      	eors	r3, r2
 8002632:	b25b      	sxtb	r3, r3
 8002634:	b2d9      	uxtb	r1, r3
 8002636:	4a22      	ldr	r2, [pc, #136]	@ (80026c0 <ssd1306_InvertRectangle+0x174>)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	4413      	add	r3, r2
 800263c:	460a      	mov	r2, r1
 800263e:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = x1; x <= x2; x++) {
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	3301      	adds	r3, #1
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	797b      	ldrb	r3, [r7, #5]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	429a      	cmp	r2, r3
 800264c:	d9ab      	bls.n	80025a6 <ssd1306_InvertRectangle+0x5a>
 800264e:	e031      	b.n	80026b4 <ssd1306_InvertRectangle+0x168>
    }
  } else {
    /* if rectangle lies on one 8px row */
    const uint8_t mask = (0xFF << (y1 % 8)) & (0xFF >> (7 - (y2 % 8)));
 8002650:	79bb      	ldrb	r3, [r7, #6]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	22ff      	movs	r2, #255	@ 0xff
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	b25a      	sxtb	r2, r3
 800265e:	793b      	ldrb	r3, [r7, #4]
 8002660:	43db      	mvns	r3, r3
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	21ff      	movs	r1, #255	@ 0xff
 8002668:	fa41 f303 	asr.w	r3, r1, r3
 800266c:	b25b      	sxtb	r3, r3
 800266e:	4013      	ands	r3, r2
 8002670:	b25b      	sxtb	r3, r3
 8002672:	73fb      	strb	r3, [r7, #15]
    for (i = x1 + (y1 / 8) * SSD1306_WIDTH;
 8002674:	79fa      	ldrb	r2, [r7, #7]
 8002676:	79bb      	ldrb	r3, [r7, #6]
 8002678:	08db      	lsrs	r3, r3, #3
 800267a:	b2db      	uxtb	r3, r3
 800267c:	01db      	lsls	r3, r3, #7
 800267e:	4413      	add	r3, r2
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e00e      	b.n	80026a2 <ssd1306_InvertRectangle+0x156>
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
      SSD1306_Buffer[i] ^= mask;
 8002684:	4a0e      	ldr	r2, [pc, #56]	@ (80026c0 <ssd1306_InvertRectangle+0x174>)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	4413      	add	r3, r2
 800268a:	781a      	ldrb	r2, [r3, #0]
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	4053      	eors	r3, r2
 8002690:	b2d9      	uxtb	r1, r3
 8002692:	4a0b      	ldr	r2, [pc, #44]	@ (80026c0 <ssd1306_InvertRectangle+0x174>)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	4413      	add	r3, r2
 8002698:	460a      	mov	r2, r1
 800269a:	701a      	strb	r2, [r3, #0]
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3301      	adds	r3, #1
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	797b      	ldrb	r3, [r7, #5]
 80026a4:	793a      	ldrb	r2, [r7, #4]
 80026a6:	08d2      	lsrs	r2, r2, #3
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	01d2      	lsls	r2, r2, #7
 80026ac:	4413      	add	r3, r2
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d9e7      	bls.n	8002684 <ssd1306_InvertRectangle+0x138>
    }
  }
  return SSD1306_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bc90      	pop	{r4, r7}
 80026be:	4770      	bx	lr
 80026c0:	20000210 	.word	0x20000210

080026c4 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	603a      	str	r2, [r7, #0]
 80026cc:	461a      	mov	r2, r3
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
 80026d2:	460b      	mov	r3, r1
 80026d4:	71bb      	strb	r3, [r7, #6]
 80026d6:	4613      	mov	r3, r2
 80026d8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80026da:	797b      	ldrb	r3, [r7, #5]
 80026dc:	3307      	adds	r3, #7
 80026de:	2b00      	cmp	r3, #0
 80026e0:	da00      	bge.n	80026e4 <ssd1306_DrawBitmap+0x20>
 80026e2:	3307      	adds	r3, #7
 80026e4:	10db      	asrs	r3, r3, #3
 80026e6:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	db3e      	blt.n	8002772 <ssd1306_DrawBitmap+0xae>
 80026f4:	79bb      	ldrb	r3, [r7, #6]
 80026f6:	2b3f      	cmp	r3, #63	@ 0x3f
 80026f8:	d83b      	bhi.n	8002772 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80026fa:	2300      	movs	r3, #0
 80026fc:	73bb      	strb	r3, [r7, #14]
 80026fe:	e033      	b.n	8002768 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8002700:	2300      	movs	r3, #0
 8002702:	737b      	strb	r3, [r7, #13]
 8002704:	e026      	b.n	8002754 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8002706:	7b7b      	ldrb	r3, [r7, #13]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	2b00      	cmp	r3, #0
 800270e:	d003      	beq.n	8002718 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	73fb      	strb	r3, [r7, #15]
 8002716:	e00d      	b.n	8002734 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002718:	7bbb      	ldrb	r3, [r7, #14]
 800271a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800271e:	fb02 f303 	mul.w	r3, r2, r3
 8002722:	7b7a      	ldrb	r2, [r7, #13]
 8002724:	08d2      	lsrs	r2, r2, #3
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	4413      	add	r3, r2
 800272a:	461a      	mov	r2, r3
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	4413      	add	r3, r2
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8002734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002738:	2b00      	cmp	r3, #0
 800273a:	da08      	bge.n	800274e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 800273c:	79fa      	ldrb	r2, [r7, #7]
 800273e:	7b7b      	ldrb	r3, [r7, #13]
 8002740:	4413      	add	r3, r2
 8002742:	b2db      	uxtb	r3, r3
 8002744:	7f3a      	ldrb	r2, [r7, #28]
 8002746:	79b9      	ldrb	r1, [r7, #6]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff f94f 	bl	80019ec <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 800274e:	7b7b      	ldrb	r3, [r7, #13]
 8002750:	3301      	adds	r3, #1
 8002752:	737b      	strb	r3, [r7, #13]
 8002754:	7b7a      	ldrb	r2, [r7, #13]
 8002756:	797b      	ldrb	r3, [r7, #5]
 8002758:	429a      	cmp	r2, r3
 800275a:	d3d4      	bcc.n	8002706 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800275c:	7bbb      	ldrb	r3, [r7, #14]
 800275e:	3301      	adds	r3, #1
 8002760:	73bb      	strb	r3, [r7, #14]
 8002762:	79bb      	ldrb	r3, [r7, #6]
 8002764:	3301      	adds	r3, #1
 8002766:	71bb      	strb	r3, [r7, #6]
 8002768:	7bba      	ldrb	r2, [r7, #14]
 800276a:	7e3b      	ldrb	r3, [r7, #24]
 800276c:	429a      	cmp	r2, r3
 800276e:	d3c7      	bcc.n	8002700 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8002770:	e000      	b.n	8002774 <ssd1306_DrawBitmap+0xb0>
        return;
 8002772:	bf00      	nop
}
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002784:	2381      	movs	r3, #129	@ 0x81
 8002786:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff f852 	bl	8001834 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002790:	79fb      	ldrb	r3, [r7, #7]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff f84e 	bl	8001834 <ssd1306_WriteCommand>
}
 8002798:	bf00      	nop
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d005      	beq.n	80027bc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80027b0:	23af      	movs	r3, #175	@ 0xaf
 80027b2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80027b4:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <ssd1306_SetDisplayOn+0x38>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	715a      	strb	r2, [r3, #5]
 80027ba:	e004      	b.n	80027c6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80027bc:	23ae      	movs	r3, #174	@ 0xae
 80027be:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80027c0:	4b05      	ldr	r3, [pc, #20]	@ (80027d8 <ssd1306_SetDisplayOn+0x38>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80027c6:	7bfb      	ldrb	r3, [r7, #15]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff f833 	bl	8001834 <ssd1306_WriteCommand>
}
 80027ce:	bf00      	nop
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000610 	.word	0x20000610

080027dc <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 80027e2:	2000      	movs	r0, #0
 80027e4:	f7ff f8c2 	bl	800196c <ssd1306_Fill>
   
    uint8_t x = 0;
 80027e8:	2300      	movs	r3, #0
 80027ea:	71fb      	strb	r3, [r7, #7]
    uint8_t y = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	71bb      	strb	r3, [r7, #6]
    do {
        ssd1306_DrawPixel(x, y, Black);
 80027f0:	79b9      	ldrb	r1, [r7, #6]
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	2200      	movs	r2, #0
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff f8f8 	bl	80019ec <ssd1306_DrawPixel>

        if((y == 0) && (x < (SSD1306_WIDTH-1)))
 80027fc:	79bb      	ldrb	r3, [r7, #6]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <ssd1306_TestBorder+0x34>
 8002802:	79fb      	ldrb	r3, [r7, #7]
 8002804:	2b7e      	cmp	r3, #126	@ 0x7e
 8002806:	d803      	bhi.n	8002810 <ssd1306_TestBorder+0x34>
            x++;
 8002808:	79fb      	ldrb	r3, [r7, #7]
 800280a:	3301      	adds	r3, #1
 800280c:	71fb      	strb	r3, [r7, #7]
 800280e:	e016      	b.n	800283e <ssd1306_TestBorder+0x62>
        else if((x == (SSD1306_WIDTH-1)) && (y < (SSD1306_HEIGHT-1)))
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2b7f      	cmp	r3, #127	@ 0x7f
 8002814:	d106      	bne.n	8002824 <ssd1306_TestBorder+0x48>
 8002816:	79bb      	ldrb	r3, [r7, #6]
 8002818:	2b3e      	cmp	r3, #62	@ 0x3e
 800281a:	d803      	bhi.n	8002824 <ssd1306_TestBorder+0x48>
            y++;
 800281c:	79bb      	ldrb	r3, [r7, #6]
 800281e:	3301      	adds	r3, #1
 8002820:	71bb      	strb	r3, [r7, #6]
 8002822:	e00c      	b.n	800283e <ssd1306_TestBorder+0x62>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 8002824:	79bb      	ldrb	r3, [r7, #6]
 8002826:	2b3f      	cmp	r3, #63	@ 0x3f
 8002828:	d106      	bne.n	8002838 <ssd1306_TestBorder+0x5c>
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <ssd1306_TestBorder+0x5c>
            x--;
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	3b01      	subs	r3, #1
 8002834:	71fb      	strb	r3, [r7, #7]
 8002836:	e002      	b.n	800283e <ssd1306_TestBorder+0x62>
        else
            y--;
 8002838:	79bb      	ldrb	r3, [r7, #6]
 800283a:	3b01      	subs	r3, #1
 800283c:	71bb      	strb	r3, [r7, #6]

        ssd1306_DrawPixel(x, y, White);
 800283e:	79b9      	ldrb	r1, [r7, #6]
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	2201      	movs	r2, #1
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff f8d1 	bl	80019ec <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 800284a:	f7ff f8a7 	bl	800199c <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 800284e:	2005      	movs	r0, #5
 8002850:	f001 f84a 	bl	80038e8 <HAL_Delay>
    } while(x > 0 || y > 0);
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1ca      	bne.n	80027f0 <ssd1306_TestBorder+0x14>
 800285a:	79bb      	ldrb	r3, [r7, #6]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1c7      	bne.n	80027f0 <ssd1306_TestBorder+0x14>
   
    HAL_Delay(1000);
 8002860:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002864:	f001 f840 	bl	80038e8 <HAL_Delay>
}
 8002868:	bf00      	nop
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af02      	add	r7, sp, #8
    uint8_t y = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 800287a:	2000      	movs	r0, #0
 800287c:	f7ff f876 	bl	800196c <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	4619      	mov	r1, r3
 8002884:	2002      	movs	r0, #2
 8002886:	f7ff f9bd 	bl	8001c04 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 800288a:	4b1d      	ldr	r3, [pc, #116]	@ (8002900 <ssd1306_TestFonts1+0x90>)
 800288c:	2201      	movs	r2, #1
 800288e:	9200      	str	r2, [sp, #0]
 8002890:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002892:	481c      	ldr	r0, [pc, #112]	@ (8002904 <ssd1306_TestFonts1+0x94>)
 8002894:	f7ff f990 	bl	8001bb8 <ssd1306_WriteString>
    y += 26;
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	331a      	adds	r3, #26
 800289c:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 800289e:	79fb      	ldrb	r3, [r7, #7]
 80028a0:	4619      	mov	r1, r3
 80028a2:	2002      	movs	r0, #2
 80028a4:	f7ff f9ae 	bl	8001c04 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 80028a8:	4b17      	ldr	r3, [pc, #92]	@ (8002908 <ssd1306_TestFonts1+0x98>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	9200      	str	r2, [sp, #0]
 80028ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028b0:	4816      	ldr	r0, [pc, #88]	@ (800290c <ssd1306_TestFonts1+0x9c>)
 80028b2:	f7ff f981 	bl	8001bb8 <ssd1306_WriteString>
    y += 18;
 80028b6:	79fb      	ldrb	r3, [r7, #7]
 80028b8:	3312      	adds	r3, #18
 80028ba:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	4619      	mov	r1, r3
 80028c0:	2002      	movs	r0, #2
 80028c2:	f7ff f99f 	bl	8001c04 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 80028c6:	4b12      	ldr	r3, [pc, #72]	@ (8002910 <ssd1306_TestFonts1+0xa0>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	9200      	str	r2, [sp, #0]
 80028cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ce:	4811      	ldr	r0, [pc, #68]	@ (8002914 <ssd1306_TestFonts1+0xa4>)
 80028d0:	f7ff f972 	bl	8001bb8 <ssd1306_WriteString>
    y += 10;
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	330a      	adds	r3, #10
 80028d8:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	4619      	mov	r1, r3
 80028de:	2002      	movs	r0, #2
 80028e0:	f7ff f990 	bl	8001c04 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 80028e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002918 <ssd1306_TestFonts1+0xa8>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	9200      	str	r2, [sp, #0]
 80028ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ec:	480b      	ldr	r0, [pc, #44]	@ (800291c <ssd1306_TestFonts1+0xac>)
 80028ee:	f7ff f963 	bl	8001bb8 <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 80028f2:	f7ff f853 	bl	800199c <ssd1306_UpdateScreen>
}
 80028f6:	bf00      	nop
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	0800dfd0 	.word	0x0800dfd0
 8002904:	0800938c 	.word	0x0800938c
 8002908:	0800dfc4 	.word	0x0800dfc4
 800290c:	08009398 	.word	0x08009398
 8002910:	0800dfb8 	.word	0x0800dfb8
 8002914:	080093a4 	.word	0x080093a4
 8002918:	0800dfac 	.word	0x0800dfac
 800291c:	080093b0 	.word	0x080093b0

08002920 <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 8002920:	b590      	push	{r4, r7, lr}
 8002922:	b085      	sub	sp, #20
 8002924:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 8002926:	2000      	movs	r0, #0
 8002928:	f7ff f820 	bl	800196c <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 800292c:	2104      	movs	r1, #4
 800292e:	2000      	movs	r0, #0
 8002930:	f7ff f968 	bl	8001c04 <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 8002934:	4b14      	ldr	r3, [pc, #80]	@ (8002988 <ssd1306_TestFonts2+0x68>)
 8002936:	2201      	movs	r2, #1
 8002938:	9200      	str	r2, [sp, #0]
 800293a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800293c:	4813      	ldr	r0, [pc, #76]	@ (800298c <ssd1306_TestFonts2+0x6c>)
 800293e:	f7ff f93b 	bl	8001bb8 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 8002942:	2124      	movs	r1, #36	@ 0x24
 8002944:	2000      	movs	r0, #0
 8002946:	f7ff f95d 	bl	8001c04 <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 800294a:	4b0f      	ldr	r3, [pc, #60]	@ (8002988 <ssd1306_TestFonts2+0x68>)
 800294c:	2201      	movs	r2, #1
 800294e:	9200      	str	r2, [sp, #0]
 8002950:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002952:	480f      	ldr	r0, [pc, #60]	@ (8002990 <ssd1306_TestFonts2+0x70>)
 8002954:	f7ff f930 	bl	8001bb8 <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 8002958:	2360      	movs	r3, #96	@ 0x60
 800295a:	71fb      	strb	r3, [r7, #7]
    y1 = 4+24+8+24;
 800295c:	233c      	movs	r3, #60	@ 0x3c
 800295e:	71bb      	strb	r3, [r7, #6]
    x2 = x1+16;
 8002960:	79fb      	ldrb	r3, [r7, #7]
 8002962:	3310      	adds	r3, #16
 8002964:	717b      	strb	r3, [r7, #5]
    y2 = y1+2;
 8002966:	79bb      	ldrb	r3, [r7, #6]
 8002968:	3302      	adds	r3, #2
 800296a:	713b      	strb	r3, [r7, #4]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 800296c:	793b      	ldrb	r3, [r7, #4]
 800296e:	797a      	ldrb	r2, [r7, #5]
 8002970:	79b9      	ldrb	r1, [r7, #6]
 8002972:	79f8      	ldrb	r0, [r7, #7]
 8002974:	2401      	movs	r4, #1
 8002976:	9400      	str	r4, [sp, #0]
 8002978:	f7ff fd99 	bl	80024ae <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 800297c:	f7ff f80e 	bl	800199c <ssd1306_UpdateScreen>
#endif
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bd90      	pop	{r4, r7, pc}
 8002988:	0800dfdc 	.word	0x0800dfdc
 800298c:	080093bc 	.word	0x080093bc
 8002990:	080093c8 	.word	0x080093c8

08002994 <ssd1306_TestFonts3>:

/*
 * Test of proportional (non-monospaced) font.
 */
void ssd1306_TestFonts3() {
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 800299a:	2000      	movs	r0, #0
 800299c:	f7fe ffe6 	bl	800196c <ssd1306_Fill>
#ifdef SSD1306_INCLUDE_FONT_16x15
    ssd1306_SetCursor(4, 4);
 80029a0:	2104      	movs	r1, #4
 80029a2:	2004      	movs	r0, #4
 80029a4:	f7ff f92e 	bl	8001c04 <ssd1306_SetCursor>
    ssd1306_WriteString("Proportional", Font_16x15, White);
 80029a8:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <ssd1306_TestFonts3+0x58>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029b0:	480f      	ldr	r0, [pc, #60]	@ (80029f0 <ssd1306_TestFonts3+0x5c>)
 80029b2:	f7ff f901 	bl	8001bb8 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
 80029b6:	2118      	movs	r1, #24
 80029b8:	2004      	movs	r0, #4
 80029ba:	f7ff f923 	bl	8001c04 <ssd1306_SetCursor>
    ssd1306_WriteString("text... Sweet!", Font_16x15, White);
 80029be:	4b0b      	ldr	r3, [pc, #44]	@ (80029ec <ssd1306_TestFonts3+0x58>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	9200      	str	r2, [sp, #0]
 80029c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c6:	480b      	ldr	r0, [pc, #44]	@ (80029f4 <ssd1306_TestFonts3+0x60>)
 80029c8:	f7ff f8f6 	bl	8001bb8 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 44);
 80029cc:	212c      	movs	r1, #44	@ 0x2c
 80029ce:	2004      	movs	r0, #4
 80029d0:	f7ff f918 	bl	8001c04 <ssd1306_SetCursor>
    ssd1306_WriteString("3.1415  04:20", Font_16x15, White);
 80029d4:	4b05      	ldr	r3, [pc, #20]	@ (80029ec <ssd1306_TestFonts3+0x58>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	9200      	str	r2, [sp, #0]
 80029da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029dc:	4806      	ldr	r0, [pc, #24]	@ (80029f8 <ssd1306_TestFonts3+0x64>)
 80029de:	f7ff f8eb 	bl	8001bb8 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
    ssd1306_WriteString("Font not", Font_11x18, White);
    ssd1306_SetCursor(4, 44);
    ssd1306_WriteString("included!", Font_11x18, White);
#endif
    ssd1306_UpdateScreen();
 80029e2:	f7fe ffdb 	bl	800199c <ssd1306_UpdateScreen>
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	0800dfe8 	.word	0x0800dfe8
 80029f0:	080093d4 	.word	0x080093d4
 80029f4:	080093e4 	.word	0x080093e4
 80029f8:	080093f4 	.word	0x080093f4

080029fc <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 80029fc:	b5b0      	push	{r4, r5, r7, lr}
 80029fe:	b09a      	sub	sp, #104	@ 0x68
 8002a00:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 8002a02:	2001      	movs	r0, #1
 8002a04:	f7fe ffb2 	bl	800196c <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8002a08:	f000 ff62 	bl	80038d0 <HAL_GetTick>
 8002a0c:	65b8      	str	r0, [r7, #88]	@ 0x58
    uint32_t end = start;
 8002a0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a10:	657b      	str	r3, [r7, #84]	@ 0x54
    int fps = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	65fb      	str	r3, [r7, #92]	@ 0x5c
    char message[] = "ABCDEFGHIJK";
 8002a16:	4a45      	ldr	r2, [pc, #276]	@ (8002b2c <ssd1306_TestFPS+0x130>)
 8002a18:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 8002a22:	2100      	movs	r1, #0
 8002a24:	2002      	movs	r0, #2
 8002a26:	f7ff f8ed 	bl	8001c04 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 8002a2a:	4b41      	ldr	r3, [pc, #260]	@ (8002b30 <ssd1306_TestFPS+0x134>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	9200      	str	r2, [sp, #0]
 8002a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a32:	4840      	ldr	r0, [pc, #256]	@ (8002b34 <ssd1306_TestFPS+0x138>)
 8002a34:	f7ff f8c0 	bl	8001bb8 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 8002a38:	2124      	movs	r1, #36	@ 0x24
 8002a3a:	2002      	movs	r0, #2
 8002a3c:	f7ff f8e2 	bl	8001c04 <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 8002a40:	4b3b      	ldr	r3, [pc, #236]	@ (8002b30 <ssd1306_TestFPS+0x134>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	9200      	str	r2, [sp, #0]
 8002a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a48:	483b      	ldr	r0, [pc, #236]	@ (8002b38 <ssd1306_TestFPS+0x13c>)
 8002a4a:	f7ff f8b5 	bl	8001bb8 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 8002a4e:	2112      	movs	r1, #18
 8002a50:	2002      	movs	r0, #2
 8002a52:	f7ff f8d7 	bl	8001c04 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 8002a56:	4b36      	ldr	r3, [pc, #216]	@ (8002b30 <ssd1306_TestFPS+0x134>)
 8002a58:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	9200      	str	r2, [sp, #0]
 8002a60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a62:	f7ff f8a9 	bl	8001bb8 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8002a66:	f7fe ff99 	bl	800199c <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8002a6a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8002a6e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        memmove(message, message+1, sizeof(message)-2);
 8002a72:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a76:	3301      	adds	r3, #1
 8002a78:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8002a7c:	220a      	movs	r2, #10
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f005 fa86 	bl	8007f90 <memmove>
        message[sizeof(message)-2] = ch;
 8002a84:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002a88:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

        fps++;
 8002a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a8e:	3301      	adds	r3, #1
 8002a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
        end = HAL_GetTick();
 8002a92:	f000 ff1d 	bl	80038d0 <HAL_GetTick>
 8002a96:	6578      	str	r0, [r7, #84]	@ 0x54
    } while((end - start) < 5000);
 8002a98:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002a9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d9d3      	bls.n	8002a4e <ssd1306_TestFPS+0x52>
   
    HAL_Delay(5000);
 8002aa6:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002aaa:	f000 ff1d 	bl	80038e8 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 8002aae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ab0:	ee07 3a90 	vmov	s15, r3
 8002ab4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab8:	ee17 0a90 	vmov	r0, s15
 8002abc:	f7fd fd44 	bl	8000548 <__aeabi_f2d>
 8002ac0:	4604      	mov	r4, r0
 8002ac2:	460d      	mov	r5, r1
 8002ac4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002ac6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fd fd1a 	bl	8000504 <__aeabi_ui2d>
 8002ad0:	f04f 0200 	mov.w	r2, #0
 8002ad4:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <ssd1306_TestFPS+0x140>)
 8002ad6:	f7fd feb9 	bl	800084c <__aeabi_ddiv>
 8002ada:	4602      	mov	r2, r0
 8002adc:	460b      	mov	r3, r1
 8002ade:	4620      	mov	r0, r4
 8002ae0:	4629      	mov	r1, r5
 8002ae2:	f7fd feb3 	bl	800084c <__aeabi_ddiv>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4610      	mov	r0, r2
 8002aec:	4619      	mov	r1, r3
 8002aee:	f7fd ff95 	bl	8000a1c <__aeabi_d2iz>
 8002af2:	4603      	mov	r3, r0
 8002af4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 8002af6:	1d38      	adds	r0, r7, #4
 8002af8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002afa:	4a11      	ldr	r2, [pc, #68]	@ (8002b40 <ssd1306_TestFPS+0x144>)
 8002afc:	2140      	movs	r1, #64	@ 0x40
 8002afe:	f005 fa11 	bl	8007f24 <sniprintf>
   
    ssd1306_Fill(White);
 8002b02:	2001      	movs	r0, #1
 8002b04:	f7fe ff32 	bl	800196c <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 8002b08:	2102      	movs	r1, #2
 8002b0a:	2002      	movs	r0, #2
 8002b0c:	f7ff f87a 	bl	8001c04 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 8002b10:	4b07      	ldr	r3, [pc, #28]	@ (8002b30 <ssd1306_TestFPS+0x134>)
 8002b12:	1d38      	adds	r0, r7, #4
 8002b14:	2200      	movs	r2, #0
 8002b16:	9200      	str	r2, [sp, #0]
 8002b18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b1a:	f7ff f84d 	bl	8001bb8 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8002b1e:	f7fe ff3d 	bl	800199c <ssd1306_UpdateScreen>
}
 8002b22:	bf00      	nop
 8002b24:	3760      	adds	r7, #96	@ 0x60
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bdb0      	pop	{r4, r5, r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	08009424 	.word	0x08009424
 8002b30:	0800dfc4 	.word	0x0800dfc4
 8002b34:	08009404 	.word	0x08009404
 8002b38:	08009410 	.word	0x08009410
 8002b3c:	408f4000 	.word	0x408f4000
 8002b40:	0800941c 	.word	0x0800941c

08002b44 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	233f      	movs	r3, #63	@ 0x3f
 8002b50:	227f      	movs	r2, #127	@ 0x7f
 8002b52:	2101      	movs	r1, #1
 8002b54:	2001      	movs	r0, #1
 8002b56:	f7ff f86d 	bl	8001c34 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	233f      	movs	r3, #63	@ 0x3f
 8002b60:	2201      	movs	r2, #1
 8002b62:	2101      	movs	r1, #1
 8002b64:	207f      	movs	r0, #127	@ 0x7f
 8002b66:	f7ff f865 	bl	8001c34 <ssd1306_Line>
  ssd1306_UpdateScreen();
 8002b6a:	f7fe ff17 	bl	800199c <ssd1306_UpdateScreen>
  return;
 8002b6e:	bf00      	nop
}
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	e028      	b.n	8002bd2 <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	0092      	lsls	r2, r2, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	b2d8      	uxtb	r0, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	0092      	lsls	r2, r2, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	b2d9      	uxtb	r1, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	0092      	lsls	r2, r2, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	461c      	mov	r4, r3
 8002bb8:	00a4      	lsls	r4, r4, #2
 8002bba:	4423      	add	r3, r4
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2401      	movs	r4, #1
 8002bc6:	9400      	str	r4, [sp, #0]
 8002bc8:	f7ff fc3a 	bl	8002440 <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d9d3      	bls.n	8002b80 <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 8002bd8:	f7fe fee0 	bl	800199c <ssd1306_UpdateScreen>
  return;
 8002bdc:	bf00      	nop
}
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd90      	pop	{r4, r7, pc}

08002be4 <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 8002bea:	2301      	movs	r3, #1
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2323      	movs	r3, #35	@ 0x23
 8002bf0:	2241      	movs	r2, #65	@ 0x41
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	201f      	movs	r0, #31
 8002bf6:	f7ff fc5a 	bl	80024ae <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	233c      	movs	r3, #60	@ 0x3c
 8002c00:	2246      	movs	r2, #70	@ 0x46
 8002c02:	212d      	movs	r1, #45	@ 0x2d
 8002c04:	200a      	movs	r0, #10
 8002c06:	f7ff fc52 	bl	80024ae <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	232d      	movs	r3, #45	@ 0x2d
 8002c10:	2264      	movs	r2, #100	@ 0x64
 8002c12:	210a      	movs	r1, #10
 8002c14:	204b      	movs	r0, #75	@ 0x4b
 8002c16:	f7ff fc4a 	bl	80024ae <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	2337      	movs	r3, #55	@ 0x37
 8002c20:	2250      	movs	r2, #80	@ 0x50
 8002c22:	211e      	movs	r1, #30
 8002c24:	2037      	movs	r0, #55	@ 0x37
 8002c26:	f7ff fc42 	bl	80024ae <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 8002c2a:	f7fe feb7 	bl	800199c <ssd1306_UpdateScreen>
}
 8002c2e:	bf00      	nop
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <ssd1306_TestRectangleInvert>:

void ssd1306_TestRectangleInvert() {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_11x18
  ssd1306_SetCursor(2, 0);
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	2002      	movs	r0, #2
 8002c3e:	f7fe ffe1 	bl	8001c04 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 8002c42:	4b27      	ldr	r3, [pc, #156]	@ (8002ce0 <ssd1306_TestRectangleInvert+0xac>)
 8002c44:	2201      	movs	r2, #1
 8002c46:	9200      	str	r2, [sp, #0]
 8002c48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c4a:	4826      	ldr	r0, [pc, #152]	@ (8002ce4 <ssd1306_TestRectangleInvert+0xb0>)
 8002c4c:	f7fe ffb4 	bl	8001bb8 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 20);
 8002c50:	2114      	movs	r1, #20
 8002c52:	2002      	movs	r0, #2
 8002c54:	f7fe ffd6 	bl	8001c04 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8002c58:	4b21      	ldr	r3, [pc, #132]	@ (8002ce0 <ssd1306_TestRectangleInvert+0xac>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	9200      	str	r2, [sp, #0]
 8002c5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c60:	4821      	ldr	r0, [pc, #132]	@ (8002ce8 <ssd1306_TestRectangleInvert+0xb4>)
 8002c62:	f7fe ffa9 	bl	8001bb8 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 40);
 8002c66:	2128      	movs	r1, #40	@ 0x28
 8002c68:	2002      	movs	r0, #2
 8002c6a:	f7fe ffcb 	bl	8001c04 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 8002c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ce0 <ssd1306_TestRectangleInvert+0xac>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	9200      	str	r2, [sp, #0]
 8002c74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c76:	481d      	ldr	r0, [pc, #116]	@ (8002cec <ssd1306_TestRectangleInvert+0xb8>)
 8002c78:	f7fe ff9e 	bl	8001bb8 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 0);
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2042      	movs	r0, #66	@ 0x42
 8002c80:	f7fe ffc0 	bl	8001c04 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 8002c84:	4b16      	ldr	r3, [pc, #88]	@ (8002ce0 <ssd1306_TestRectangleInvert+0xac>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	9200      	str	r2, [sp, #0]
 8002c8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c8c:	4817      	ldr	r0, [pc, #92]	@ (8002cec <ssd1306_TestRectangleInvert+0xb8>)
 8002c8e:	f7fe ff93 	bl	8001bb8 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 20);
 8002c92:	2114      	movs	r1, #20
 8002c94:	2042      	movs	r0, #66	@ 0x42
 8002c96:	f7fe ffb5 	bl	8001c04 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8002c9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <ssd1306_TestRectangleInvert+0xac>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	9200      	str	r2, [sp, #0]
 8002ca0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca2:	4811      	ldr	r0, [pc, #68]	@ (8002ce8 <ssd1306_TestRectangleInvert+0xb4>)
 8002ca4:	f7fe ff88 	bl	8001bb8 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 40);
 8002ca8:	2128      	movs	r1, #40	@ 0x28
 8002caa:	2042      	movs	r0, #66	@ 0x42
 8002cac:	f7fe ffaa 	bl	8001c04 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce0 <ssd1306_TestRectangleInvert+0xac>)
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	9200      	str	r2, [sp, #0]
 8002cb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cb8:	480a      	ldr	r0, [pc, #40]	@ (8002ce4 <ssd1306_TestRectangleInvert+0xb0>)
 8002cba:	f7fe ff7d 	bl	8001bb8 <ssd1306_WriteString>
#else
  ssd1306_FillCircle(32, 32, 20, White);
  ssd1306_FillCircle(96, 32, 20, White);
#endif
  ssd1306_InvertRectangle(0,0,63,63);
 8002cbe:	233f      	movs	r3, #63	@ 0x3f
 8002cc0:	223f      	movs	r2, #63	@ 0x3f
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	2000      	movs	r0, #0
 8002cc6:	f7ff fc41 	bl	800254c <ssd1306_InvertRectangle>
  /* Test rectangle lies on one 8px page */
  ssd1306_InvertRectangle(2,58,125,60);
 8002cca:	233c      	movs	r3, #60	@ 0x3c
 8002ccc:	227d      	movs	r2, #125	@ 0x7d
 8002cce:	213a      	movs	r1, #58	@ 0x3a
 8002cd0:	2002      	movs	r0, #2
 8002cd2:	f7ff fc3b 	bl	800254c <ssd1306_InvertRectangle>
  ssd1306_UpdateScreen();
 8002cd6:	f7fe fe61 	bl	800199c <ssd1306_UpdateScreen>
}
 8002cda:	bf00      	nop
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	0800dfc4 	.word	0x0800dfc4
 8002ce4:	08009430 	.word	0x08009430
 8002ce8:	08009438 	.word	0x08009438
 8002cec:	0800943c 	.word	0x0800943c

08002cf0 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	e010      	b.n	8002d1e <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	0092      	lsls	r2, r2, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	331e      	adds	r3, #30
 8002d0c:	b2d8      	uxtb	r0, r3
 8002d0e:	2301      	movs	r3, #1
 8002d10:	220a      	movs	r2, #10
 8002d12:	210f      	movs	r1, #15
 8002d14:	f7ff fa9a 	bl	800224c <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d9eb      	bls.n	8002cfc <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 8002d24:	2300      	movs	r3, #0
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	e011      	b.n	8002d4e <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	461a      	mov	r2, r3
 8002d30:	0052      	lsls	r2, r2, #1
 8002d32:	441a      	add	r2, r3
 8002d34:	00d2      	lsls	r2, r2, #3
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	330f      	adds	r3, #15
 8002d3c:	b2d8      	uxtb	r0, r3
 8002d3e:	2301      	movs	r3, #1
 8002d40:	220a      	movs	r2, #10
 8002d42:	2128      	movs	r1, #40	@ 0x28
 8002d44:	f7ff fb09 	bl	800235a <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d9ea      	bls.n	8002d2a <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 8002d54:	f7fe fe22 	bl	800199c <ssd1306_UpdateScreen>
  return;
 8002d58:	bf00      	nop
}
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 8002d66:	2301      	movs	r3, #1
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	2314      	movs	r3, #20
 8002d72:	221e      	movs	r2, #30
 8002d74:	211e      	movs	r1, #30
 8002d76:	201e      	movs	r0, #30
 8002d78:	f7ff f840 	bl	8001dfc <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	9301      	str	r3, [sp, #4]
 8002d80:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	231e      	movs	r3, #30
 8002d88:	220a      	movs	r2, #10
 8002d8a:	2137      	movs	r1, #55	@ 0x37
 8002d8c:	2050      	movs	r0, #80	@ 0x50
 8002d8e:	f7ff f91d 	bl	8001fcc <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 8002d92:	f7fe fe03 	bl	800199c <ssd1306_UpdateScreen>
  return;
 8002d96:	bf00      	nop
}
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 8002da2:	4b08      	ldr	r3, [pc, #32]	@ (8002dc4 <ssd1306_TestPolyline+0x28>)
 8002da4:	463c      	mov	r4, r7
 8002da6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002da8:	c407      	stmia	r4!, {r0, r1, r2}
 8002daa:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 8002dac:	463b      	mov	r3, r7
 8002dae:	2201      	movs	r2, #1
 8002db0:	2107      	movs	r1, #7
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe ffaa 	bl	8001d0c <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8002db8:	f7fe fdf0 	bl	800199c <ssd1306_UpdateScreen>
  return;
 8002dbc:	bf00      	nop
}
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd90      	pop	{r4, r7, pc}
 8002dc4:	08009444 	.word	0x08009444

08002dc8 <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f7fe fdcc 	bl	800196c <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	9301      	str	r3, [sp, #4]
 8002dd8:	2340      	movs	r3, #64	@ 0x40
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	2380      	movs	r3, #128	@ 0x80
 8002dde:	4a18      	ldr	r2, [pc, #96]	@ (8002e40 <ssd1306_TestDrawBitmap+0x78>)
 8002de0:	2100      	movs	r1, #0
 8002de2:	2000      	movs	r0, #0
 8002de4:	f7ff fc6e 	bl	80026c4 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002de8:	f7fe fdd8 	bl	800199c <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8002dec:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002df0:	f000 fd7a 	bl	80038e8 <HAL_Delay>
    ssd1306_Fill(Black);
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7fe fdb9 	bl	800196c <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	9301      	str	r3, [sp, #4]
 8002dfe:	2340      	movs	r3, #64	@ 0x40
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	2340      	movs	r3, #64	@ 0x40
 8002e04:	4a0f      	ldr	r2, [pc, #60]	@ (8002e44 <ssd1306_TestDrawBitmap+0x7c>)
 8002e06:	2100      	movs	r1, #0
 8002e08:	2020      	movs	r0, #32
 8002e0a:	f7ff fc5b 	bl	80026c4 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002e0e:	f7fe fdc5 	bl	800199c <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8002e12:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002e16:	f000 fd67 	bl	80038e8 <HAL_Delay>
    ssd1306_Fill(White);
 8002e1a:	2001      	movs	r0, #1
 8002e1c:	f7fe fda6 	bl	800196c <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 8002e20:	2300      	movs	r3, #0
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	2340      	movs	r3, #64	@ 0x40
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2340      	movs	r3, #64	@ 0x40
 8002e2a:	4a06      	ldr	r2, [pc, #24]	@ (8002e44 <ssd1306_TestDrawBitmap+0x7c>)
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	2020      	movs	r0, #32
 8002e30:	f7ff fc48 	bl	80026c4 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8002e34:	f7fe fdb2 	bl	800199c <ssd1306_UpdateScreen>
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	0800dff4 	.word	0x0800dff4
 8002e44:	0800e3f4 	.word	0x0800e3f4

08002e48 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8002e4c:	f7fe fd24 	bl	8001898 <ssd1306_Init>

    ssd1306_TestFPS();
 8002e50:	f7ff fdd4 	bl	80029fc <ssd1306_TestFPS>
    HAL_Delay(3000);
 8002e54:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002e58:	f000 fd46 	bl	80038e8 <HAL_Delay>
    ssd1306_TestBorder();
 8002e5c:	f7ff fcbe 	bl	80027dc <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 8002e60:	f7ff fd06 	bl	8002870 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 8002e64:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002e68:	f000 fd3e 	bl	80038e8 <HAL_Delay>
    ssd1306_TestFonts2();
 8002e6c:	f7ff fd58 	bl	8002920 <ssd1306_TestFonts2>
    HAL_Delay(3000);
 8002e70:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002e74:	f000 fd38 	bl	80038e8 <HAL_Delay>
    ssd1306_TestFonts3();
 8002e78:	f7ff fd8c 	bl	8002994 <ssd1306_TestFonts3>
    HAL_Delay(3000);
 8002e7c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002e80:	f000 fd32 	bl	80038e8 <HAL_Delay>
    ssd1306_Fill(Black);
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fe fd71 	bl	800196c <ssd1306_Fill>
    ssd1306_TestRectangle();
 8002e8a:	f7ff fe73 	bl	8002b74 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 8002e8e:	f7ff fe59 	bl	8002b44 <ssd1306_TestLine>
    HAL_Delay(3000);
 8002e92:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002e96:	f000 fd27 	bl	80038e8 <HAL_Delay>
    ssd1306_Fill(Black);
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7fe fd66 	bl	800196c <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 8002ea0:	f7ff fea0 	bl	8002be4 <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 8002ea4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002ea8:	f000 fd1e 	bl	80038e8 <HAL_Delay>
    ssd1306_Fill(Black);
 8002eac:	2000      	movs	r0, #0
 8002eae:	f7fe fd5d 	bl	800196c <ssd1306_Fill>
    ssd1306_TestRectangleInvert();
 8002eb2:	f7ff febf 	bl	8002c34 <ssd1306_TestRectangleInvert>
    HAL_Delay(3000);
 8002eb6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002eba:	f000 fd15 	bl	80038e8 <HAL_Delay>
    ssd1306_Fill(Black);
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f7fe fd54 	bl	800196c <ssd1306_Fill>
    ssd1306_TestPolyline();
 8002ec4:	f7ff ff6a 	bl	8002d9c <ssd1306_TestPolyline>
    HAL_Delay(3000);
 8002ec8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002ecc:	f000 fd0c 	bl	80038e8 <HAL_Delay>
    ssd1306_Fill(Black);
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7fe fd4b 	bl	800196c <ssd1306_Fill>
    ssd1306_TestArc();
 8002ed6:	f7ff ff43 	bl	8002d60 <ssd1306_TestArc>
    HAL_Delay(3000);
 8002eda:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002ede:	f000 fd03 	bl	80038e8 <HAL_Delay>
    ssd1306_Fill(Black);
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	f7fe fd42 	bl	800196c <ssd1306_Fill>
    ssd1306_TestCircle();
 8002ee8:	f7ff ff02 	bl	8002cf0 <ssd1306_TestCircle>
    HAL_Delay(3000);
 8002eec:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002ef0:	f000 fcfa 	bl	80038e8 <HAL_Delay>
    ssd1306_TestDrawBitmap();
 8002ef4:	f7ff ff68 	bl	8002dc8 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 8002ef8:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002efc:	f000 fcf4 	bl	80038e8 <HAL_Delay>
}
 8002f00:	bf00      	nop
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	607b      	str	r3, [r7, #4]
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <HAL_MspInit+0x4c>)
 8002f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f12:	4a0f      	ldr	r2, [pc, #60]	@ (8002f50 <HAL_MspInit+0x4c>)
 8002f14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f50 <HAL_MspInit+0x4c>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f22:	607b      	str	r3, [r7, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	603b      	str	r3, [r7, #0]
 8002f2a:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <HAL_MspInit+0x4c>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	4a08      	ldr	r2, [pc, #32]	@ (8002f50 <HAL_MspInit+0x4c>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f36:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <HAL_MspInit+0x4c>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800

08002f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f58:	bf00      	nop
 8002f5a:	e7fd      	b.n	8002f58 <NMI_Handler+0x4>

08002f5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f60:	bf00      	nop
 8002f62:	e7fd      	b.n	8002f60 <HardFault_Handler+0x4>

08002f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f68:	bf00      	nop
 8002f6a:	e7fd      	b.n	8002f68 <MemManage_Handler+0x4>

08002f6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f70:	bf00      	nop
 8002f72:	e7fd      	b.n	8002f70 <BusFault_Handler+0x4>

08002f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f78:	bf00      	nop
 8002f7a:	e7fd      	b.n	8002f78 <UsageFault_Handler+0x4>

08002f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f80:	bf00      	nop
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr

08002f8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002faa:	f000 fc7d 	bl	80038a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fb8:	4803      	ldr	r0, [pc, #12]	@ (8002fc8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002fba:	f003 fea7 	bl	8006d0c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002fbe:	4803      	ldr	r0, [pc, #12]	@ (8002fcc <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002fc0:	f003 fea4 	bl	8006d0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	2000061c 	.word	0x2000061c
 8002fcc:	2000073c 	.word	0x2000073c

08002fd0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fd4:	4802      	ldr	r0, [pc, #8]	@ (8002fe0 <DMA2_Stream0_IRQHandler+0x10>)
 8002fd6:	f001 fac9 	bl	800456c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002fda:	bf00      	nop
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	200000c0 	.word	0x200000c0

08002fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fec:	4a14      	ldr	r2, [pc, #80]	@ (8003040 <_sbrk+0x5c>)
 8002fee:	4b15      	ldr	r3, [pc, #84]	@ (8003044 <_sbrk+0x60>)
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ff8:	4b13      	ldr	r3, [pc, #76]	@ (8003048 <_sbrk+0x64>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d102      	bne.n	8003006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003000:	4b11      	ldr	r3, [pc, #68]	@ (8003048 <_sbrk+0x64>)
 8003002:	4a12      	ldr	r2, [pc, #72]	@ (800304c <_sbrk+0x68>)
 8003004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003006:	4b10      	ldr	r3, [pc, #64]	@ (8003048 <_sbrk+0x64>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	429a      	cmp	r2, r3
 8003012:	d207      	bcs.n	8003024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003014:	f004 ffde 	bl	8007fd4 <__errno>
 8003018:	4603      	mov	r3, r0
 800301a:	220c      	movs	r2, #12
 800301c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800301e:	f04f 33ff 	mov.w	r3, #4294967295
 8003022:	e009      	b.n	8003038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003024:	4b08      	ldr	r3, [pc, #32]	@ (8003048 <_sbrk+0x64>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800302a:	4b07      	ldr	r3, [pc, #28]	@ (8003048 <_sbrk+0x64>)
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	4a05      	ldr	r2, [pc, #20]	@ (8003048 <_sbrk+0x64>)
 8003034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003036:	68fb      	ldr	r3, [r7, #12]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	20020000 	.word	0x20020000
 8003044:	00000400 	.word	0x00000400
 8003048:	20000618 	.word	0x20000618
 800304c:	20000918 	.word	0x20000918

08003050 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003054:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <SystemInit+0x20>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305a:	4a05      	ldr	r2, [pc, #20]	@ (8003070 <SystemInit+0x20>)
 800305c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b096      	sub	sp, #88	@ 0x58
 8003078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800307a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003088:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003092:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	605a      	str	r2, [r3, #4]
 800309c:	609a      	str	r2, [r3, #8]
 800309e:	60da      	str	r2, [r3, #12]
 80030a0:	611a      	str	r2, [r3, #16]
 80030a2:	615a      	str	r2, [r3, #20]
 80030a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80030a6:	1d3b      	adds	r3, r7, #4
 80030a8:	2220      	movs	r2, #32
 80030aa:	2100      	movs	r1, #0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f004 ff89 	bl	8007fc4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80030b2:	4b44      	ldr	r3, [pc, #272]	@ (80031c4 <MX_TIM1_Init+0x150>)
 80030b4:	4a44      	ldr	r2, [pc, #272]	@ (80031c8 <MX_TIM1_Init+0x154>)
 80030b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80030b8:	4b42      	ldr	r3, [pc, #264]	@ (80031c4 <MX_TIM1_Init+0x150>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030be:	4b41      	ldr	r3, [pc, #260]	@ (80031c4 <MX_TIM1_Init+0x150>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80030c4:	4b3f      	ldr	r3, [pc, #252]	@ (80031c4 <MX_TIM1_Init+0x150>)
 80030c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030cc:	4b3d      	ldr	r3, [pc, #244]	@ (80031c4 <MX_TIM1_Init+0x150>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80030d2:	4b3c      	ldr	r3, [pc, #240]	@ (80031c4 <MX_TIM1_Init+0x150>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030d8:	4b3a      	ldr	r3, [pc, #232]	@ (80031c4 <MX_TIM1_Init+0x150>)
 80030da:	2280      	movs	r2, #128	@ 0x80
 80030dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80030de:	4839      	ldr	r0, [pc, #228]	@ (80031c4 <MX_TIM1_Init+0x150>)
 80030e0:	f003 fb25 	bl	800672e <HAL_TIM_Base_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80030ea:	f7fe fa11 	bl	8001510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80030f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80030f8:	4619      	mov	r1, r3
 80030fa:	4832      	ldr	r0, [pc, #200]	@ (80031c4 <MX_TIM1_Init+0x150>)
 80030fc:	f003 ffb8 	bl	8007070 <HAL_TIM_ConfigClockSource>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003106:	f7fe fa03 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800310a:	482e      	ldr	r0, [pc, #184]	@ (80031c4 <MX_TIM1_Init+0x150>)
 800310c:	f003 fbc0 	bl	8006890 <HAL_TIM_PWM_Init>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003116:	f7fe f9fb 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800311e:	2300      	movs	r3, #0
 8003120:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003122:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003126:	4619      	mov	r1, r3
 8003128:	4826      	ldr	r0, [pc, #152]	@ (80031c4 <MX_TIM1_Init+0x150>)
 800312a:	f004 fb63 	bl	80077f4 <HAL_TIMEx_MasterConfigSynchronization>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003134:	f7fe f9ec 	bl	8001510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003138:	2360      	movs	r3, #96	@ 0x60
 800313a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003140:	2300      	movs	r3, #0
 8003142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003144:	2300      	movs	r3, #0
 8003146:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003148:	2300      	movs	r3, #0
 800314a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800314c:	2300      	movs	r3, #0
 800314e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003150:	2300      	movs	r3, #0
 8003152:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003154:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003158:	2200      	movs	r2, #0
 800315a:	4619      	mov	r1, r3
 800315c:	4819      	ldr	r0, [pc, #100]	@ (80031c4 <MX_TIM1_Init+0x150>)
 800315e:	f003 fec5 	bl	8006eec <HAL_TIM_PWM_ConfigChannel>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003168:	f7fe f9d2 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800316c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003170:	2204      	movs	r2, #4
 8003172:	4619      	mov	r1, r3
 8003174:	4813      	ldr	r0, [pc, #76]	@ (80031c4 <MX_TIM1_Init+0x150>)
 8003176:	f003 feb9 	bl	8006eec <HAL_TIM_PWM_ConfigChannel>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003180:	f7fe f9c6 	bl	8001510 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003188:	2300      	movs	r3, #0
 800318a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003198:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800319c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800319e:	2300      	movs	r3, #0
 80031a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80031a2:	1d3b      	adds	r3, r7, #4
 80031a4:	4619      	mov	r1, r3
 80031a6:	4807      	ldr	r0, [pc, #28]	@ (80031c4 <MX_TIM1_Init+0x150>)
 80031a8:	f004 fb92 	bl	80078d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80031b2:	f7fe f9ad 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80031b6:	4803      	ldr	r0, [pc, #12]	@ (80031c4 <MX_TIM1_Init+0x150>)
 80031b8:	f000 fa2a 	bl	8003610 <HAL_TIM_MspPostInit>

}
 80031bc:	bf00      	nop
 80031be:	3758      	adds	r7, #88	@ 0x58
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	2000061c 	.word	0x2000061c
 80031c8:	40010000 	.word	0x40010000

080031cc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08e      	sub	sp, #56	@ 0x38
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031e0:	f107 0320 	add.w	r3, r7, #32
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031ea:	1d3b      	adds	r3, r7, #4
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	611a      	str	r2, [r3, #16]
 80031f8:	615a      	str	r2, [r3, #20]
 80031fa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031fc:	4b32      	ldr	r3, [pc, #200]	@ (80032c8 <MX_TIM2_Init+0xfc>)
 80031fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003202:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003204:	4b30      	ldr	r3, [pc, #192]	@ (80032c8 <MX_TIM2_Init+0xfc>)
 8003206:	2200      	movs	r2, #0
 8003208:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800320a:	4b2f      	ldr	r3, [pc, #188]	@ (80032c8 <MX_TIM2_Init+0xfc>)
 800320c:	2200      	movs	r2, #0
 800320e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003210:	4b2d      	ldr	r3, [pc, #180]	@ (80032c8 <MX_TIM2_Init+0xfc>)
 8003212:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003216:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003218:	4b2b      	ldr	r3, [pc, #172]	@ (80032c8 <MX_TIM2_Init+0xfc>)
 800321a:	2200      	movs	r2, #0
 800321c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800321e:	4b2a      	ldr	r3, [pc, #168]	@ (80032c8 <MX_TIM2_Init+0xfc>)
 8003220:	2280      	movs	r2, #128	@ 0x80
 8003222:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003224:	4828      	ldr	r0, [pc, #160]	@ (80032c8 <MX_TIM2_Init+0xfc>)
 8003226:	f003 fa82 	bl	800672e <HAL_TIM_Base_Init>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003230:	f7fe f96e 	bl	8001510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003234:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003238:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800323a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800323e:	4619      	mov	r1, r3
 8003240:	4821      	ldr	r0, [pc, #132]	@ (80032c8 <MX_TIM2_Init+0xfc>)
 8003242:	f003 ff15 	bl	8007070 <HAL_TIM_ConfigClockSource>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800324c:	f7fe f960 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003250:	481d      	ldr	r0, [pc, #116]	@ (80032c8 <MX_TIM2_Init+0xfc>)
 8003252:	f003 fb1d 	bl	8006890 <HAL_TIM_PWM_Init>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800325c:	f7fe f958 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003260:	2300      	movs	r3, #0
 8003262:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003264:	2300      	movs	r3, #0
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003268:	f107 0320 	add.w	r3, r7, #32
 800326c:	4619      	mov	r1, r3
 800326e:	4816      	ldr	r0, [pc, #88]	@ (80032c8 <MX_TIM2_Init+0xfc>)
 8003270:	f004 fac0 	bl	80077f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800327a:	f7fe f949 	bl	8001510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800327e:	2360      	movs	r3, #96	@ 0x60
 8003280:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003282:	2300      	movs	r3, #0
 8003284:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800328a:	2300      	movs	r3, #0
 800328c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800328e:	1d3b      	adds	r3, r7, #4
 8003290:	2200      	movs	r2, #0
 8003292:	4619      	mov	r1, r3
 8003294:	480c      	ldr	r0, [pc, #48]	@ (80032c8 <MX_TIM2_Init+0xfc>)
 8003296:	f003 fe29 	bl	8006eec <HAL_TIM_PWM_ConfigChannel>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80032a0:	f7fe f936 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032a4:	1d3b      	adds	r3, r7, #4
 80032a6:	2204      	movs	r2, #4
 80032a8:	4619      	mov	r1, r3
 80032aa:	4807      	ldr	r0, [pc, #28]	@ (80032c8 <MX_TIM2_Init+0xfc>)
 80032ac:	f003 fe1e 	bl	8006eec <HAL_TIM_PWM_ConfigChannel>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80032b6:	f7fe f92b 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80032ba:	4803      	ldr	r0, [pc, #12]	@ (80032c8 <MX_TIM2_Init+0xfc>)
 80032bc:	f000 f9a8 	bl	8003610 <HAL_TIM_MspPostInit>

}
 80032c0:	bf00      	nop
 80032c2:	3738      	adds	r7, #56	@ 0x38
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000664 	.word	0x20000664

080032cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08c      	sub	sp, #48	@ 0x30
 80032d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032d2:	f107 030c 	add.w	r3, r7, #12
 80032d6:	2224      	movs	r2, #36	@ 0x24
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 fe72 	bl	8007fc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032e0:	1d3b      	adds	r3, r7, #4
 80032e2:	2200      	movs	r2, #0
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032e8:	4b20      	ldr	r3, [pc, #128]	@ (800336c <MX_TIM3_Init+0xa0>)
 80032ea:	4a21      	ldr	r2, [pc, #132]	@ (8003370 <MX_TIM3_Init+0xa4>)
 80032ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80032ee:	4b1f      	ldr	r3, [pc, #124]	@ (800336c <MX_TIM3_Init+0xa0>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032f4:	4b1d      	ldr	r3, [pc, #116]	@ (800336c <MX_TIM3_Init+0xa0>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80032fa:	4b1c      	ldr	r3, [pc, #112]	@ (800336c <MX_TIM3_Init+0xa0>)
 80032fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003300:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003302:	4b1a      	ldr	r3, [pc, #104]	@ (800336c <MX_TIM3_Init+0xa0>)
 8003304:	2200      	movs	r2, #0
 8003306:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003308:	4b18      	ldr	r3, [pc, #96]	@ (800336c <MX_TIM3_Init+0xa0>)
 800330a:	2280      	movs	r2, #128	@ 0x80
 800330c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800330e:	2303      	movs	r3, #3
 8003310:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003316:	2301      	movs	r3, #1
 8003318:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800331a:	2300      	movs	r3, #0
 800331c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003322:	2300      	movs	r3, #0
 8003324:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003326:	2301      	movs	r3, #1
 8003328:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800332a:	2300      	movs	r3, #0
 800332c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003332:	f107 030c 	add.w	r3, r7, #12
 8003336:	4619      	mov	r1, r3
 8003338:	480c      	ldr	r0, [pc, #48]	@ (800336c <MX_TIM3_Init+0xa0>)
 800333a:	f003 fbb3 	bl	8006aa4 <HAL_TIM_Encoder_Init>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003344:	f7fe f8e4 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003348:	2300      	movs	r3, #0
 800334a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800334c:	2300      	movs	r3, #0
 800334e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	4619      	mov	r1, r3
 8003354:	4805      	ldr	r0, [pc, #20]	@ (800336c <MX_TIM3_Init+0xa0>)
 8003356:	f004 fa4d 	bl	80077f4 <HAL_TIMEx_MasterConfigSynchronization>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003360:	f7fe f8d6 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003364:	bf00      	nop
 8003366:	3730      	adds	r7, #48	@ 0x30
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	200006ac 	.word	0x200006ac
 8003370:	40000400 	.word	0x40000400

08003374 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08c      	sub	sp, #48	@ 0x30
 8003378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800337a:	f107 030c 	add.w	r3, r7, #12
 800337e:	2224      	movs	r2, #36	@ 0x24
 8003380:	2100      	movs	r1, #0
 8003382:	4618      	mov	r0, r3
 8003384:	f004 fe1e 	bl	8007fc4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003388:	1d3b      	adds	r3, r7, #4
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003390:	4b20      	ldr	r3, [pc, #128]	@ (8003414 <MX_TIM4_Init+0xa0>)
 8003392:	4a21      	ldr	r2, [pc, #132]	@ (8003418 <MX_TIM4_Init+0xa4>)
 8003394:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003396:	4b1f      	ldr	r3, [pc, #124]	@ (8003414 <MX_TIM4_Init+0xa0>)
 8003398:	2200      	movs	r2, #0
 800339a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800339c:	4b1d      	ldr	r3, [pc, #116]	@ (8003414 <MX_TIM4_Init+0xa0>)
 800339e:	2200      	movs	r2, #0
 80033a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80033a2:	4b1c      	ldr	r3, [pc, #112]	@ (8003414 <MX_TIM4_Init+0xa0>)
 80033a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80033a8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003414 <MX_TIM4_Init+0xa0>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80033b0:	4b18      	ldr	r3, [pc, #96]	@ (8003414 <MX_TIM4_Init+0xa0>)
 80033b2:	2280      	movs	r2, #128	@ 0x80
 80033b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80033b6:	2303      	movs	r3, #3
 80033b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033be:	2301      	movs	r3, #1
 80033c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80033c6:	230a      	movs	r3, #10
 80033c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033ca:	2300      	movs	r3, #0
 80033cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033ce:	2301      	movs	r3, #1
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033d2:	2300      	movs	r3, #0
 80033d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 10;
 80033d6:	230a      	movs	r3, #10
 80033d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80033da:	f107 030c 	add.w	r3, r7, #12
 80033de:	4619      	mov	r1, r3
 80033e0:	480c      	ldr	r0, [pc, #48]	@ (8003414 <MX_TIM4_Init+0xa0>)
 80033e2:	f003 fb5f 	bl	8006aa4 <HAL_TIM_Encoder_Init>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80033ec:	f7fe f890 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033f0:	2300      	movs	r3, #0
 80033f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80033f8:	1d3b      	adds	r3, r7, #4
 80033fa:	4619      	mov	r1, r3
 80033fc:	4805      	ldr	r0, [pc, #20]	@ (8003414 <MX_TIM4_Init+0xa0>)
 80033fe:	f004 f9f9 	bl	80077f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003408:	f7fe f882 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800340c:	bf00      	nop
 800340e:	3730      	adds	r7, #48	@ 0x30
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	200006f4 	.word	0x200006f4
 8003418:	40000800 	.word	0x40000800

0800341c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003420:	4b0e      	ldr	r3, [pc, #56]	@ (800345c <MX_TIM10_Init+0x40>)
 8003422:	4a0f      	ldr	r2, [pc, #60]	@ (8003460 <MX_TIM10_Init+0x44>)
 8003424:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15;
 8003426:	4b0d      	ldr	r3, [pc, #52]	@ (800345c <MX_TIM10_Init+0x40>)
 8003428:	220f      	movs	r2, #15
 800342a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800342c:	4b0b      	ldr	r3, [pc, #44]	@ (800345c <MX_TIM10_Init+0x40>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 62499;
 8003432:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <MX_TIM10_Init+0x40>)
 8003434:	f24f 4223 	movw	r2, #62499	@ 0xf423
 8003438:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800343a:	4b08      	ldr	r3, [pc, #32]	@ (800345c <MX_TIM10_Init+0x40>)
 800343c:	2200      	movs	r2, #0
 800343e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003440:	4b06      	ldr	r3, [pc, #24]	@ (800345c <MX_TIM10_Init+0x40>)
 8003442:	2280      	movs	r2, #128	@ 0x80
 8003444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003446:	4805      	ldr	r0, [pc, #20]	@ (800345c <MX_TIM10_Init+0x40>)
 8003448:	f003 f971 	bl	800672e <HAL_TIM_Base_Init>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8003452:	f7fe f85d 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	2000073c 	.word	0x2000073c
 8003460:	40014400 	.word	0x40014400

08003464 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a26      	ldr	r2, [pc, #152]	@ (800350c <HAL_TIM_Base_MspInit+0xa8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d116      	bne.n	80034a4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	4b25      	ldr	r3, [pc, #148]	@ (8003510 <HAL_TIM_Base_MspInit+0xac>)
 800347c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800347e:	4a24      	ldr	r2, [pc, #144]	@ (8003510 <HAL_TIM_Base_MspInit+0xac>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	6453      	str	r3, [r2, #68]	@ 0x44
 8003486:	4b22      	ldr	r3, [pc, #136]	@ (8003510 <HAL_TIM_Base_MspInit+0xac>)
 8003488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800348a:	f003 0301 	and.w	r3, r3, #1
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8003492:	2200      	movs	r2, #0
 8003494:	2105      	movs	r1, #5
 8003496:	2019      	movs	r0, #25
 8003498:	f000 ff2b 	bl	80042f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800349c:	2019      	movs	r0, #25
 800349e:	f000 ff44 	bl	800432a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80034a2:	e02e      	b.n	8003502 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ac:	d10e      	bne.n	80034cc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034ae:	2300      	movs	r3, #0
 80034b0:	613b      	str	r3, [r7, #16]
 80034b2:	4b17      	ldr	r3, [pc, #92]	@ (8003510 <HAL_TIM_Base_MspInit+0xac>)
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	4a16      	ldr	r2, [pc, #88]	@ (8003510 <HAL_TIM_Base_MspInit+0xac>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80034be:	4b14      	ldr	r3, [pc, #80]	@ (8003510 <HAL_TIM_Base_MspInit+0xac>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	693b      	ldr	r3, [r7, #16]
}
 80034ca:	e01a      	b.n	8003502 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM10)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a10      	ldr	r2, [pc, #64]	@ (8003514 <HAL_TIM_Base_MspInit+0xb0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d115      	bne.n	8003502 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	4b0d      	ldr	r3, [pc, #52]	@ (8003510 <HAL_TIM_Base_MspInit+0xac>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	4a0c      	ldr	r2, [pc, #48]	@ (8003510 <HAL_TIM_Base_MspInit+0xac>)
 80034e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80034e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003510 <HAL_TIM_Base_MspInit+0xac>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80034f2:	2200      	movs	r2, #0
 80034f4:	2105      	movs	r1, #5
 80034f6:	2019      	movs	r0, #25
 80034f8:	f000 fefb 	bl	80042f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80034fc:	2019      	movs	r0, #25
 80034fe:	f000 ff14 	bl	800432a <HAL_NVIC_EnableIRQ>
}
 8003502:	bf00      	nop
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	40010000 	.word	0x40010000
 8003510:	40023800 	.word	0x40023800
 8003514:	40014400 	.word	0x40014400

08003518 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08c      	sub	sp, #48	@ 0x30
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003520:	f107 031c 	add.w	r3, r7, #28
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	605a      	str	r2, [r3, #4]
 800352a:	609a      	str	r2, [r3, #8]
 800352c:	60da      	str	r2, [r3, #12]
 800352e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a32      	ldr	r2, [pc, #200]	@ (8003600 <HAL_TIM_Encoder_MspInit+0xe8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d12c      	bne.n	8003594 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	61bb      	str	r3, [r7, #24]
 800353e:	4b31      	ldr	r3, [pc, #196]	@ (8003604 <HAL_TIM_Encoder_MspInit+0xec>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	4a30      	ldr	r2, [pc, #192]	@ (8003604 <HAL_TIM_Encoder_MspInit+0xec>)
 8003544:	f043 0302 	orr.w	r3, r3, #2
 8003548:	6413      	str	r3, [r2, #64]	@ 0x40
 800354a:	4b2e      	ldr	r3, [pc, #184]	@ (8003604 <HAL_TIM_Encoder_MspInit+0xec>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]
 800355a:	4b2a      	ldr	r3, [pc, #168]	@ (8003604 <HAL_TIM_Encoder_MspInit+0xec>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355e:	4a29      	ldr	r2, [pc, #164]	@ (8003604 <HAL_TIM_Encoder_MspInit+0xec>)
 8003560:	f043 0302 	orr.w	r3, r3, #2
 8003564:	6313      	str	r3, [r2, #48]	@ 0x30
 8003566:	4b27      	ldr	r3, [pc, #156]	@ (8003604 <HAL_TIM_Encoder_MspInit+0xec>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	617b      	str	r3, [r7, #20]
 8003570:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003572:	2330      	movs	r3, #48	@ 0x30
 8003574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003576:	2302      	movs	r3, #2
 8003578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	2300      	movs	r3, #0
 800357c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357e:	2300      	movs	r3, #0
 8003580:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003582:	2302      	movs	r3, #2
 8003584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003586:	f107 031c 	add.w	r3, r7, #28
 800358a:	4619      	mov	r1, r3
 800358c:	481e      	ldr	r0, [pc, #120]	@ (8003608 <HAL_TIM_Encoder_MspInit+0xf0>)
 800358e:	f001 fa57 	bl	8004a40 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8003592:	e030      	b.n	80035f6 <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM4)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a1c      	ldr	r2, [pc, #112]	@ (800360c <HAL_TIM_Encoder_MspInit+0xf4>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d12b      	bne.n	80035f6 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	613b      	str	r3, [r7, #16]
 80035a2:	4b18      	ldr	r3, [pc, #96]	@ (8003604 <HAL_TIM_Encoder_MspInit+0xec>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a6:	4a17      	ldr	r2, [pc, #92]	@ (8003604 <HAL_TIM_Encoder_MspInit+0xec>)
 80035a8:	f043 0304 	orr.w	r3, r3, #4
 80035ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ae:	4b15      	ldr	r3, [pc, #84]	@ (8003604 <HAL_TIM_Encoder_MspInit+0xec>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	60fb      	str	r3, [r7, #12]
 80035be:	4b11      	ldr	r3, [pc, #68]	@ (8003604 <HAL_TIM_Encoder_MspInit+0xec>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	4a10      	ldr	r2, [pc, #64]	@ (8003604 <HAL_TIM_Encoder_MspInit+0xec>)
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003604 <HAL_TIM_Encoder_MspInit+0xec>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035d6:	23c0      	movs	r3, #192	@ 0xc0
 80035d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035da:	2302      	movs	r3, #2
 80035dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035e2:	2300      	movs	r3, #0
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80035e6:	2302      	movs	r3, #2
 80035e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ea:	f107 031c 	add.w	r3, r7, #28
 80035ee:	4619      	mov	r1, r3
 80035f0:	4805      	ldr	r0, [pc, #20]	@ (8003608 <HAL_TIM_Encoder_MspInit+0xf0>)
 80035f2:	f001 fa25 	bl	8004a40 <HAL_GPIO_Init>
}
 80035f6:	bf00      	nop
 80035f8:	3730      	adds	r7, #48	@ 0x30
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40000400 	.word	0x40000400
 8003604:	40023800 	.word	0x40023800
 8003608:	40020400 	.word	0x40020400
 800360c:	40000800 	.word	0x40000800

08003610 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	@ 0x28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003618:	f107 0314 	add.w	r3, r7, #20
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	605a      	str	r2, [r3, #4]
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	60da      	str	r2, [r3, #12]
 8003626:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a24      	ldr	r2, [pc, #144]	@ (80036c0 <HAL_TIM_MspPostInit+0xb0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d11f      	bne.n	8003672 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	4b23      	ldr	r3, [pc, #140]	@ (80036c4 <HAL_TIM_MspPostInit+0xb4>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800363a:	4a22      	ldr	r2, [pc, #136]	@ (80036c4 <HAL_TIM_MspPostInit+0xb4>)
 800363c:	f043 0301 	orr.w	r3, r3, #1
 8003640:	6313      	str	r3, [r2, #48]	@ 0x30
 8003642:	4b20      	ldr	r3, [pc, #128]	@ (80036c4 <HAL_TIM_MspPostInit+0xb4>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	613b      	str	r3, [r7, #16]
 800364c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800364e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003654:	2302      	movs	r3, #2
 8003656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800365c:	2300      	movs	r3, #0
 800365e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003660:	2301      	movs	r3, #1
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	4619      	mov	r1, r3
 800366a:	4817      	ldr	r0, [pc, #92]	@ (80036c8 <HAL_TIM_MspPostInit+0xb8>)
 800366c:	f001 f9e8 	bl	8004a40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003670:	e022      	b.n	80036b8 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM2)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367a:	d11d      	bne.n	80036b8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800367c:	2300      	movs	r3, #0
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	4b10      	ldr	r3, [pc, #64]	@ (80036c4 <HAL_TIM_MspPostInit+0xb4>)
 8003682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003684:	4a0f      	ldr	r2, [pc, #60]	@ (80036c4 <HAL_TIM_MspPostInit+0xb4>)
 8003686:	f043 0301 	orr.w	r3, r3, #1
 800368a:	6313      	str	r3, [r2, #48]	@ 0x30
 800368c:	4b0d      	ldr	r3, [pc, #52]	@ (80036c4 <HAL_TIM_MspPostInit+0xb4>)
 800368e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003698:	2303      	movs	r3, #3
 800369a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800369c:	2302      	movs	r3, #2
 800369e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a4:	2300      	movs	r3, #0
 80036a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036a8:	2301      	movs	r3, #1
 80036aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ac:	f107 0314 	add.w	r3, r7, #20
 80036b0:	4619      	mov	r1, r3
 80036b2:	4805      	ldr	r0, [pc, #20]	@ (80036c8 <HAL_TIM_MspPostInit+0xb8>)
 80036b4:	f001 f9c4 	bl	8004a40 <HAL_GPIO_Init>
}
 80036b8:	bf00      	nop
 80036ba:	3728      	adds	r7, #40	@ 0x28
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40010000 	.word	0x40010000
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40020000 	.word	0x40020000

080036cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036d0:	4b11      	ldr	r3, [pc, #68]	@ (8003718 <MX_USART1_UART_Init+0x4c>)
 80036d2:	4a12      	ldr	r2, [pc, #72]	@ (800371c <MX_USART1_UART_Init+0x50>)
 80036d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80036d6:	4b10      	ldr	r3, [pc, #64]	@ (8003718 <MX_USART1_UART_Init+0x4c>)
 80036d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80036dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036de:	4b0e      	ldr	r3, [pc, #56]	@ (8003718 <MX_USART1_UART_Init+0x4c>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <MX_USART1_UART_Init+0x4c>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003718 <MX_USART1_UART_Init+0x4c>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036f0:	4b09      	ldr	r3, [pc, #36]	@ (8003718 <MX_USART1_UART_Init+0x4c>)
 80036f2:	220c      	movs	r2, #12
 80036f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036f6:	4b08      	ldr	r3, [pc, #32]	@ (8003718 <MX_USART1_UART_Init+0x4c>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036fc:	4b06      	ldr	r3, [pc, #24]	@ (8003718 <MX_USART1_UART_Init+0x4c>)
 80036fe:	2200      	movs	r2, #0
 8003700:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003702:	4805      	ldr	r0, [pc, #20]	@ (8003718 <MX_USART1_UART_Init+0x4c>)
 8003704:	f004 f94a 	bl	800799c <HAL_UART_Init>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800370e:	f7fd feff 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	20000784 	.word	0x20000784
 800371c:	40011000 	.word	0x40011000

08003720 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	@ 0x28
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003728:	f107 0314 	add.w	r3, r7, #20
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	605a      	str	r2, [r3, #4]
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	60da      	str	r2, [r3, #12]
 8003736:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a19      	ldr	r2, [pc, #100]	@ (80037a4 <HAL_UART_MspInit+0x84>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d12c      	bne.n	800379c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	4b18      	ldr	r3, [pc, #96]	@ (80037a8 <HAL_UART_MspInit+0x88>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	4a17      	ldr	r2, [pc, #92]	@ (80037a8 <HAL_UART_MspInit+0x88>)
 800374c:	f043 0310 	orr.w	r3, r3, #16
 8003750:	6453      	str	r3, [r2, #68]	@ 0x44
 8003752:	4b15      	ldr	r3, [pc, #84]	@ (80037a8 <HAL_UART_MspInit+0x88>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	f003 0310 	and.w	r3, r3, #16
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800375e:	2300      	movs	r3, #0
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	4b11      	ldr	r3, [pc, #68]	@ (80037a8 <HAL_UART_MspInit+0x88>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	4a10      	ldr	r2, [pc, #64]	@ (80037a8 <HAL_UART_MspInit+0x88>)
 8003768:	f043 0301 	orr.w	r3, r3, #1
 800376c:	6313      	str	r3, [r2, #48]	@ 0x30
 800376e:	4b0e      	ldr	r3, [pc, #56]	@ (80037a8 <HAL_UART_MspInit+0x88>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800377a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800377e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003780:	2302      	movs	r3, #2
 8003782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003784:	2300      	movs	r3, #0
 8003786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003788:	2303      	movs	r3, #3
 800378a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800378c:	2307      	movs	r3, #7
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003790:	f107 0314 	add.w	r3, r7, #20
 8003794:	4619      	mov	r1, r3
 8003796:	4805      	ldr	r0, [pc, #20]	@ (80037ac <HAL_UART_MspInit+0x8c>)
 8003798:	f001 f952 	bl	8004a40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800379c:	bf00      	nop
 800379e:	3728      	adds	r7, #40	@ 0x28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40011000 	.word	0x40011000
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40020000 	.word	0x40020000

080037b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80037b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80037e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80037b4:	f7ff fc4c 	bl	8003050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80037b8:	480c      	ldr	r0, [pc, #48]	@ (80037ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037ba:	490d      	ldr	r1, [pc, #52]	@ (80037f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037bc:	4a0d      	ldr	r2, [pc, #52]	@ (80037f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037c0:	e002      	b.n	80037c8 <LoopCopyDataInit>

080037c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037c6:	3304      	adds	r3, #4

080037c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037cc:	d3f9      	bcc.n	80037c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037ce:	4a0a      	ldr	r2, [pc, #40]	@ (80037f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037d0:	4c0a      	ldr	r4, [pc, #40]	@ (80037fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80037d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037d4:	e001      	b.n	80037da <LoopFillZerobss>

080037d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037d8:	3204      	adds	r2, #4

080037da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037dc:	d3fb      	bcc.n	80037d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80037de:	f004 fbff 	bl	8007fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037e2:	f7fd fda1 	bl	8001328 <main>
  bx  lr    
 80037e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80037e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037f0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80037f4:	0800ea28 	.word	0x0800ea28
  ldr r2, =_sbss
 80037f8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80037fc:	20000918 	.word	0x20000918

08003800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003800:	e7fe      	b.n	8003800 <ADC_IRQHandler>
	...

08003804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003808:	4b0e      	ldr	r3, [pc, #56]	@ (8003844 <HAL_Init+0x40>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a0d      	ldr	r2, [pc, #52]	@ (8003844 <HAL_Init+0x40>)
 800380e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003812:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003814:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <HAL_Init+0x40>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a0a      	ldr	r2, [pc, #40]	@ (8003844 <HAL_Init+0x40>)
 800381a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800381e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003820:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <HAL_Init+0x40>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a07      	ldr	r2, [pc, #28]	@ (8003844 <HAL_Init+0x40>)
 8003826:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800382a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800382c:	2003      	movs	r0, #3
 800382e:	f000 fd55 	bl	80042dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003832:	200f      	movs	r0, #15
 8003834:	f000 f808 	bl	8003848 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003838:	f7ff fb64 	bl	8002f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40023c00 	.word	0x40023c00

08003848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003850:	4b12      	ldr	r3, [pc, #72]	@ (800389c <HAL_InitTick+0x54>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4b12      	ldr	r3, [pc, #72]	@ (80038a0 <HAL_InitTick+0x58>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	4619      	mov	r1, r3
 800385a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800385e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003862:	fbb2 f3f3 	udiv	r3, r2, r3
 8003866:	4618      	mov	r0, r3
 8003868:	f000 fd6d 	bl	8004346 <HAL_SYSTICK_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e00e      	b.n	8003894 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b0f      	cmp	r3, #15
 800387a:	d80a      	bhi.n	8003892 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800387c:	2200      	movs	r2, #0
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	f04f 30ff 	mov.w	r0, #4294967295
 8003884:	f000 fd35 	bl	80042f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003888:	4a06      	ldr	r2, [pc, #24]	@ (80038a4 <HAL_InitTick+0x5c>)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800388e:	2300      	movs	r3, #0
 8003890:	e000      	b.n	8003894 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
}
 8003894:	4618      	mov	r0, r3
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	20000000 	.word	0x20000000
 80038a0:	20000008 	.word	0x20000008
 80038a4:	20000004 	.word	0x20000004

080038a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038a8:	b480      	push	{r7}
 80038aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038ac:	4b06      	ldr	r3, [pc, #24]	@ (80038c8 <HAL_IncTick+0x20>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <HAL_IncTick+0x24>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4413      	add	r3, r2
 80038b8:	4a04      	ldr	r2, [pc, #16]	@ (80038cc <HAL_IncTick+0x24>)
 80038ba:	6013      	str	r3, [r2, #0]
}
 80038bc:	bf00      	nop
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000008 	.word	0x20000008
 80038cc:	200007cc 	.word	0x200007cc

080038d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return uwTick;
 80038d4:	4b03      	ldr	r3, [pc, #12]	@ (80038e4 <HAL_GetTick+0x14>)
 80038d6:	681b      	ldr	r3, [r3, #0]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	200007cc 	.word	0x200007cc

080038e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038f0:	f7ff ffee 	bl	80038d0 <HAL_GetTick>
 80038f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003900:	d005      	beq.n	800390e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003902:	4b0a      	ldr	r3, [pc, #40]	@ (800392c <HAL_Delay+0x44>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	461a      	mov	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800390e:	bf00      	nop
 8003910:	f7ff ffde 	bl	80038d0 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	429a      	cmp	r2, r3
 800391e:	d8f7      	bhi.n	8003910 <HAL_Delay+0x28>
  {
  }
}
 8003920:	bf00      	nop
 8003922:	bf00      	nop
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000008 	.word	0x20000008

08003930 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d101      	bne.n	8003946 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e033      	b.n	80039ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fd fa74 	bl	8000e3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003966:	f003 0310 	and.w	r3, r3, #16
 800396a:	2b00      	cmp	r3, #0
 800396c:	d118      	bne.n	80039a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003976:	f023 0302 	bic.w	r3, r3, #2
 800397a:	f043 0202 	orr.w	r2, r3, #2
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fa5c 	bl	8003e40 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003992:	f023 0303 	bic.w	r3, r3, #3
 8003996:	f043 0201 	orr.w	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	641a      	str	r2, [r3, #64]	@ 0x40
 800399e:	e001      	b.n	80039a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80039c4:	2300      	movs	r3, #0
 80039c6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_ADC_Start_DMA+0x22>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e0d0      	b.n	8003b7c <HAL_ADC_Start_DMA+0x1c4>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d018      	beq.n	8003a22 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689a      	ldr	r2, [r3, #8]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f042 0201 	orr.w	r2, r2, #1
 80039fe:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003a00:	4b60      	ldr	r3, [pc, #384]	@ (8003b84 <HAL_ADC_Start_DMA+0x1cc>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a60      	ldr	r2, [pc, #384]	@ (8003b88 <HAL_ADC_Start_DMA+0x1d0>)
 8003a06:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0a:	0c9a      	lsrs	r2, r3, #18
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	4413      	add	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003a14:	e002      	b.n	8003a1c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1f9      	bne.n	8003a16 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a30:	d107      	bne.n	8003a42 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a40:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	f040 8088 	bne.w	8003b62 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003a5a:	f023 0301 	bic.w	r3, r3, #1
 8003a5e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a90:	d106      	bne.n	8003aa0 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a96:	f023 0206 	bic.w	r2, r3, #6
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a9e:	e002      	b.n	8003aa6 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003aae:	4b37      	ldr	r3, [pc, #220]	@ (8003b8c <HAL_ADC_Start_DMA+0x1d4>)
 8003ab0:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab6:	4a36      	ldr	r2, [pc, #216]	@ (8003b90 <HAL_ADC_Start_DMA+0x1d8>)
 8003ab8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003abe:	4a35      	ldr	r2, [pc, #212]	@ (8003b94 <HAL_ADC_Start_DMA+0x1dc>)
 8003ac0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac6:	4a34      	ldr	r2, [pc, #208]	@ (8003b98 <HAL_ADC_Start_DMA+0x1e0>)
 8003ac8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003ad2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003ae2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003af2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	334c      	adds	r3, #76	@ 0x4c
 8003afe:	4619      	mov	r1, r3
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f000 fcda 	bl	80044bc <HAL_DMA_Start_IT>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 031f 	and.w	r3, r3, #31
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10f      	bne.n	8003b38 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d129      	bne.n	8003b7a <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003b34:	609a      	str	r2, [r3, #8]
 8003b36:	e020      	b.n	8003b7a <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a17      	ldr	r2, [pc, #92]	@ (8003b9c <HAL_ADC_Start_DMA+0x1e4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d11b      	bne.n	8003b7a <HAL_ADC_Start_DMA+0x1c2>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d114      	bne.n	8003b7a <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003b5e:	609a      	str	r2, [r3, #8]
 8003b60:	e00b      	b.n	8003b7a <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b66:	f043 0210 	orr.w	r2, r3, #16
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	f043 0201 	orr.w	r2, r3, #1
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003b7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3720      	adds	r7, #32
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	20000000 	.word	0x20000000
 8003b88:	431bde83 	.word	0x431bde83
 8003b8c:	40012300 	.word	0x40012300
 8003b90:	08004039 	.word	0x08004039
 8003b94:	080040f3 	.word	0x080040f3
 8003b98:	0800410f 	.word	0x0800410f
 8003b9c:	40012000 	.word	0x40012000

08003ba0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003be6:	2300      	movs	r3, #0
 8003be8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x1c>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e113      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x244>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b09      	cmp	r3, #9
 8003c06:	d925      	bls.n	8003c54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68d9      	ldr	r1, [r3, #12]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	4613      	mov	r3, r2
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3b1e      	subs	r3, #30
 8003c1e:	2207      	movs	r2, #7
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43da      	mvns	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	400a      	ands	r2, r1
 8003c2c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68d9      	ldr	r1, [r3, #12]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	4618      	mov	r0, r3
 8003c40:	4603      	mov	r3, r0
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4403      	add	r3, r0
 8003c46:	3b1e      	subs	r3, #30
 8003c48:	409a      	lsls	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	60da      	str	r2, [r3, #12]
 8003c52:	e022      	b.n	8003c9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6919      	ldr	r1, [r3, #16]
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	461a      	mov	r2, r3
 8003c62:	4613      	mov	r3, r2
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	4413      	add	r3, r2
 8003c68:	2207      	movs	r2, #7
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43da      	mvns	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	400a      	ands	r2, r1
 8003c76:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6919      	ldr	r1, [r3, #16]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	689a      	ldr	r2, [r3, #8]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	4618      	mov	r0, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	005b      	lsls	r3, r3, #1
 8003c8e:	4403      	add	r3, r0
 8003c90:	409a      	lsls	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b06      	cmp	r3, #6
 8003ca0:	d824      	bhi.n	8003cec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3b05      	subs	r3, #5
 8003cb4:	221f      	movs	r2, #31
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43da      	mvns	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	400a      	ands	r2, r1
 8003cc2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	3b05      	subs	r3, #5
 8003cde:	fa00 f203 	lsl.w	r2, r0, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cea:	e04c      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b0c      	cmp	r3, #12
 8003cf2:	d824      	bhi.n	8003d3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	3b23      	subs	r3, #35	@ 0x23
 8003d06:	221f      	movs	r2, #31
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	400a      	ands	r2, r1
 8003d14:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	4618      	mov	r0, r3
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3b23      	subs	r3, #35	@ 0x23
 8003d30:	fa00 f203 	lsl.w	r2, r0, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003d3c:	e023      	b.n	8003d86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	3b41      	subs	r3, #65	@ 0x41
 8003d50:	221f      	movs	r2, #31
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43da      	mvns	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	400a      	ands	r2, r1
 8003d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	4413      	add	r3, r2
 8003d78:	3b41      	subs	r3, #65	@ 0x41
 8003d7a:	fa00 f203 	lsl.w	r2, r0, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	430a      	orrs	r2, r1
 8003d84:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d86:	4b29      	ldr	r3, [pc, #164]	@ (8003e2c <HAL_ADC_ConfigChannel+0x250>)
 8003d88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a28      	ldr	r2, [pc, #160]	@ (8003e30 <HAL_ADC_ConfigChannel+0x254>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d10f      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x1d8>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2b12      	cmp	r3, #18
 8003d9a:	d10b      	bne.n	8003db4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e30 <HAL_ADC_ConfigChannel+0x254>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d12b      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x23a>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003e34 <HAL_ADC_ConfigChannel+0x258>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d003      	beq.n	8003dd0 <HAL_ADC_ConfigChannel+0x1f4>
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b11      	cmp	r3, #17
 8003dce:	d122      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a11      	ldr	r2, [pc, #68]	@ (8003e34 <HAL_ADC_ConfigChannel+0x258>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d111      	bne.n	8003e16 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003df2:	4b11      	ldr	r3, [pc, #68]	@ (8003e38 <HAL_ADC_ConfigChannel+0x25c>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a11      	ldr	r2, [pc, #68]	@ (8003e3c <HAL_ADC_ConfigChannel+0x260>)
 8003df8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfc:	0c9a      	lsrs	r2, r3, #18
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e08:	e002      	b.n	8003e10 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f9      	bne.n	8003e0a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	40012300 	.word	0x40012300
 8003e30:	40012000 	.word	0x40012000
 8003e34:	10000012 	.word	0x10000012
 8003e38:	20000000 	.word	0x20000000
 8003e3c:	431bde83 	.word	0x431bde83

08003e40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e48:	4b79      	ldr	r3, [pc, #484]	@ (8004030 <ADC_Init+0x1f0>)
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	431a      	orrs	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	6859      	ldr	r1, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	021a      	lsls	r2, r3, #8
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685a      	ldr	r2, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003e98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6859      	ldr	r1, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003eba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6899      	ldr	r1, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed2:	4a58      	ldr	r2, [pc, #352]	@ (8004034 <ADC_Init+0x1f4>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d022      	beq.n	8003f1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003ee6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6899      	ldr	r1, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003f08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6899      	ldr	r1, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	e00f      	b.n	8003f3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003f3c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0202 	bic.w	r2, r2, #2
 8003f4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6899      	ldr	r1, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	7e1b      	ldrb	r3, [r3, #24]
 8003f58:	005a      	lsls	r2, r3, #1
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d01b      	beq.n	8003fa4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f7a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003f8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6859      	ldr	r1, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f96:	3b01      	subs	r3, #1
 8003f98:	035a      	lsls	r2, r3, #13
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
 8003fa2:	e007      	b.n	8003fb4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fb2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003fc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	051a      	lsls	r2, r3, #20
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003fe8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6899      	ldr	r1, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003ff6:	025a      	lsls	r2, r3, #9
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800400e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6899      	ldr	r1, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	029a      	lsls	r2, r3, #10
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]
}
 8004024:	bf00      	nop
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	40012300 	.word	0x40012300
 8004034:	0f000001 	.word	0x0f000001

08004038 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004044:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800404e:	2b00      	cmp	r3, #0
 8004050:	d13c      	bne.n	80040cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d12b      	bne.n	80040c4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004070:	2b00      	cmp	r3, #0
 8004072:	d127      	bne.n	80040c4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800407e:	2b00      	cmp	r3, #0
 8004080:	d006      	beq.n	8004090 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800408c:	2b00      	cmp	r3, #0
 800408e:	d119      	bne.n	80040c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685a      	ldr	r2, [r3, #4]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0220 	bic.w	r2, r2, #32
 800409e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040bc:	f043 0201 	orr.w	r2, r3, #1
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7ff fd6b 	bl	8003ba0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80040ca:	e00e      	b.n	80040ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d003      	beq.n	80040e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f7ff fd75 	bl	8003bc8 <HAL_ADC_ErrorCallback>
}
 80040de:	e004      	b.n	80040ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	4798      	blx	r3
}
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b084      	sub	sp, #16
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040fe:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f7ff fd57 	bl	8003bb4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004106:	bf00      	nop
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2240      	movs	r2, #64	@ 0x40
 8004120:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	f043 0204 	orr.w	r2, r3, #4
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f7ff fd4a 	bl	8003bc8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004134:	bf00      	nop
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800414c:	4b0c      	ldr	r3, [pc, #48]	@ (8004180 <__NVIC_SetPriorityGrouping+0x44>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004158:	4013      	ands	r3, r2
 800415a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004164:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800416c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800416e:	4a04      	ldr	r2, [pc, #16]	@ (8004180 <__NVIC_SetPriorityGrouping+0x44>)
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	60d3      	str	r3, [r2, #12]
}
 8004174:	bf00      	nop
 8004176:	3714      	adds	r7, #20
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	e000ed00 	.word	0xe000ed00

08004184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004188:	4b04      	ldr	r3, [pc, #16]	@ (800419c <__NVIC_GetPriorityGrouping+0x18>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	0a1b      	lsrs	r3, r3, #8
 800418e:	f003 0307 	and.w	r3, r3, #7
}
 8004192:	4618      	mov	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	db0b      	blt.n	80041ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	f003 021f 	and.w	r2, r3, #31
 80041b8:	4907      	ldr	r1, [pc, #28]	@ (80041d8 <__NVIC_EnableIRQ+0x38>)
 80041ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2001      	movs	r0, #1
 80041c2:	fa00 f202 	lsl.w	r2, r0, r2
 80041c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	e000e100 	.word	0xe000e100

080041dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	6039      	str	r1, [r7, #0]
 80041e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	db0a      	blt.n	8004206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	490c      	ldr	r1, [pc, #48]	@ (8004228 <__NVIC_SetPriority+0x4c>)
 80041f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fa:	0112      	lsls	r2, r2, #4
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	440b      	add	r3, r1
 8004200:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004204:	e00a      	b.n	800421c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4908      	ldr	r1, [pc, #32]	@ (800422c <__NVIC_SetPriority+0x50>)
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	3b04      	subs	r3, #4
 8004214:	0112      	lsls	r2, r2, #4
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	440b      	add	r3, r1
 800421a:	761a      	strb	r2, [r3, #24]
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	e000e100 	.word	0xe000e100
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004230:	b480      	push	{r7}
 8004232:	b089      	sub	sp, #36	@ 0x24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f1c3 0307 	rsb	r3, r3, #7
 800424a:	2b04      	cmp	r3, #4
 800424c:	bf28      	it	cs
 800424e:	2304      	movcs	r3, #4
 8004250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3304      	adds	r3, #4
 8004256:	2b06      	cmp	r3, #6
 8004258:	d902      	bls.n	8004260 <NVIC_EncodePriority+0x30>
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3b03      	subs	r3, #3
 800425e:	e000      	b.n	8004262 <NVIC_EncodePriority+0x32>
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004264:	f04f 32ff 	mov.w	r2, #4294967295
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43da      	mvns	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	401a      	ands	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004278:	f04f 31ff 	mov.w	r1, #4294967295
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	fa01 f303 	lsl.w	r3, r1, r3
 8004282:	43d9      	mvns	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004288:	4313      	orrs	r3, r2
         );
}
 800428a:	4618      	mov	r0, r3
 800428c:	3724      	adds	r7, #36	@ 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042a8:	d301      	bcc.n	80042ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042aa:	2301      	movs	r3, #1
 80042ac:	e00f      	b.n	80042ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ae:	4a0a      	ldr	r2, [pc, #40]	@ (80042d8 <SysTick_Config+0x40>)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042b6:	210f      	movs	r1, #15
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295
 80042bc:	f7ff ff8e 	bl	80041dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042c0:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <SysTick_Config+0x40>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042c6:	4b04      	ldr	r3, [pc, #16]	@ (80042d8 <SysTick_Config+0x40>)
 80042c8:	2207      	movs	r2, #7
 80042ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	e000e010 	.word	0xe000e010

080042dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ff29 	bl	800413c <__NVIC_SetPriorityGrouping>
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b086      	sub	sp, #24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	4603      	mov	r3, r0
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004300:	2300      	movs	r3, #0
 8004302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004304:	f7ff ff3e 	bl	8004184 <__NVIC_GetPriorityGrouping>
 8004308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	6978      	ldr	r0, [r7, #20]
 8004310:	f7ff ff8e 	bl	8004230 <NVIC_EncodePriority>
 8004314:	4602      	mov	r2, r0
 8004316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800431a:	4611      	mov	r1, r2
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff ff5d 	bl	80041dc <__NVIC_SetPriority>
}
 8004322:	bf00      	nop
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	4603      	mov	r3, r0
 8004332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004338:	4618      	mov	r0, r3
 800433a:	f7ff ff31 	bl	80041a0 <__NVIC_EnableIRQ>
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b082      	sub	sp, #8
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff ffa2 	bl	8004298 <SysTick_Config>
 8004354:	4603      	mov	r3, r0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800436c:	f7ff fab0 	bl	80038d0 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d101      	bne.n	800437c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e099      	b.n	80044b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0201 	bic.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800439c:	e00f      	b.n	80043be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800439e:	f7ff fa97 	bl	80038d0 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d908      	bls.n	80043be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2203      	movs	r2, #3
 80043b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e078      	b.n	80044b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e8      	bne.n	800439e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	4b38      	ldr	r3, [pc, #224]	@ (80044b8 <HAL_DMA_Init+0x158>)
 80043d8:	4013      	ands	r3, r2
 80043da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80043ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004414:	2b04      	cmp	r3, #4
 8004416:	d107      	bne.n	8004428 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004420:	4313      	orrs	r3, r2
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	4313      	orrs	r3, r2
 8004426:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f023 0307 	bic.w	r3, r3, #7
 800443e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	4313      	orrs	r3, r2
 8004448:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	2b04      	cmp	r3, #4
 8004450:	d117      	bne.n	8004482 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00e      	beq.n	8004482 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	f000 fa6f 	bl	8004948 <DMA_CheckFifoParam>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2240      	movs	r2, #64	@ 0x40
 8004474:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800447e:	2301      	movs	r3, #1
 8004480:	e016      	b.n	80044b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa26 	bl	80048dc <DMA_CalcBaseAndBitshift>
 8004490:	4603      	mov	r3, r0
 8004492:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004498:	223f      	movs	r2, #63	@ 0x3f
 800449a:	409a      	lsls	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	f010803f 	.word	0xf010803f

080044bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
 80044c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ca:	2300      	movs	r3, #0
 80044cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_DMA_Start_IT+0x26>
 80044de:	2302      	movs	r3, #2
 80044e0:	e040      	b.n	8004564 <HAL_DMA_Start_IT+0xa8>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d12f      	bne.n	8004556 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2202      	movs	r2, #2
 80044fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	68b9      	ldr	r1, [r7, #8]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f9b8 	bl	8004880 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004514:	223f      	movs	r2, #63	@ 0x3f
 8004516:	409a      	lsls	r2, r3
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 0216 	orr.w	r2, r2, #22
 800452a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d007      	beq.n	8004544 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 0208 	orr.w	r2, r2, #8
 8004542:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f042 0201 	orr.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e005      	b.n	8004562 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800455e:	2302      	movs	r3, #2
 8004560:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004562:	7dfb      	ldrb	r3, [r7, #23]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004578:	4b8e      	ldr	r3, [pc, #568]	@ (80047b4 <HAL_DMA_IRQHandler+0x248>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a8e      	ldr	r2, [pc, #568]	@ (80047b8 <HAL_DMA_IRQHandler+0x24c>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	0a9b      	lsrs	r3, r3, #10
 8004584:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004596:	2208      	movs	r2, #8
 8004598:	409a      	lsls	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4013      	ands	r3, r2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d01a      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d013      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0204 	bic.w	r2, r2, #4
 80045be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c4:	2208      	movs	r2, #8
 80045c6:	409a      	lsls	r2, r3
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045d0:	f043 0201 	orr.w	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045dc:	2201      	movs	r2, #1
 80045de:	409a      	lsls	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4013      	ands	r3, r2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d012      	beq.n	800460e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fa:	2201      	movs	r2, #1
 80045fc:	409a      	lsls	r2, r3
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004606:	f043 0202 	orr.w	r2, r3, #2
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004612:	2204      	movs	r2, #4
 8004614:	409a      	lsls	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4013      	ands	r3, r2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d012      	beq.n	8004644 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00b      	beq.n	8004644 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004630:	2204      	movs	r2, #4
 8004632:	409a      	lsls	r2, r3
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463c:	f043 0204 	orr.w	r2, r3, #4
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004648:	2210      	movs	r2, #16
 800464a:	409a      	lsls	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d043      	beq.n	80046dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d03c      	beq.n	80046dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004666:	2210      	movs	r2, #16
 8004668:	409a      	lsls	r2, r3
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d018      	beq.n	80046ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d108      	bne.n	800469c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468e:	2b00      	cmp	r3, #0
 8004690:	d024      	beq.n	80046dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	4798      	blx	r3
 800469a:	e01f      	b.n	80046dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d01b      	beq.n	80046dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	4798      	blx	r3
 80046ac:	e016      	b.n	80046dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d107      	bne.n	80046cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0208 	bic.w	r2, r2, #8
 80046ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046e0:	2220      	movs	r2, #32
 80046e2:	409a      	lsls	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4013      	ands	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f000 808f 	beq.w	800480c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0310 	and.w	r3, r3, #16
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	f000 8087 	beq.w	800480c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004702:	2220      	movs	r2, #32
 8004704:	409a      	lsls	r2, r3
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b05      	cmp	r3, #5
 8004714:	d136      	bne.n	8004784 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f022 0216 	bic.w	r2, r2, #22
 8004724:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004734:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d103      	bne.n	8004746 <HAL_DMA_IRQHandler+0x1da>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004742:	2b00      	cmp	r3, #0
 8004744:	d007      	beq.n	8004756 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	681a      	ldr	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0208 	bic.w	r2, r2, #8
 8004754:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475a:	223f      	movs	r2, #63	@ 0x3f
 800475c:	409a      	lsls	r2, r3
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004776:	2b00      	cmp	r3, #0
 8004778:	d07e      	beq.n	8004878 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4798      	blx	r3
        }
        return;
 8004782:	e079      	b.n	8004878 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d01d      	beq.n	80047ce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10d      	bne.n	80047bc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d031      	beq.n	800480c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	4798      	blx	r3
 80047b0:	e02c      	b.n	800480c <HAL_DMA_IRQHandler+0x2a0>
 80047b2:	bf00      	nop
 80047b4:	20000000 	.word	0x20000000
 80047b8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d023      	beq.n	800480c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	4798      	blx	r3
 80047cc:	e01e      	b.n	800480c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10f      	bne.n	80047fc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0210 	bic.w	r2, r2, #16
 80047ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004810:	2b00      	cmp	r3, #0
 8004812:	d032      	beq.n	800487a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b00      	cmp	r3, #0
 800481e:	d022      	beq.n	8004866 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2205      	movs	r2, #5
 8004824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 0201 	bic.w	r2, r2, #1
 8004836:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	3301      	adds	r3, #1
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	429a      	cmp	r2, r3
 8004842:	d307      	bcc.n	8004854 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1f2      	bne.n	8004838 <HAL_DMA_IRQHandler+0x2cc>
 8004852:	e000      	b.n	8004856 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004854:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800486a:	2b00      	cmp	r3, #0
 800486c:	d005      	beq.n	800487a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	4798      	blx	r3
 8004876:	e000      	b.n	800487a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004878:	bf00      	nop
    }
  }
}
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800489c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2b40      	cmp	r3, #64	@ 0x40
 80048ac:	d108      	bne.n	80048c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68ba      	ldr	r2, [r7, #8]
 80048bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048be:	e007      	b.n	80048d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	60da      	str	r2, [r3, #12]
}
 80048d0:	bf00      	nop
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	3b10      	subs	r3, #16
 80048ec:	4a14      	ldr	r2, [pc, #80]	@ (8004940 <DMA_CalcBaseAndBitshift+0x64>)
 80048ee:	fba2 2303 	umull	r2, r3, r2, r3
 80048f2:	091b      	lsrs	r3, r3, #4
 80048f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80048f6:	4a13      	ldr	r2, [pc, #76]	@ (8004944 <DMA_CalcBaseAndBitshift+0x68>)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b03      	cmp	r3, #3
 8004908:	d909      	bls.n	800491e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004912:	f023 0303 	bic.w	r3, r3, #3
 8004916:	1d1a      	adds	r2, r3, #4
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	659a      	str	r2, [r3, #88]	@ 0x58
 800491c:	e007      	b.n	800492e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004926:	f023 0303 	bic.w	r3, r3, #3
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	aaaaaaab 	.word	0xaaaaaaab
 8004944:	0800e60c 	.word	0x0800e60c

08004948 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004950:	2300      	movs	r3, #0
 8004952:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004958:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d11f      	bne.n	80049a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b03      	cmp	r3, #3
 8004966:	d856      	bhi.n	8004a16 <DMA_CheckFifoParam+0xce>
 8004968:	a201      	add	r2, pc, #4	@ (adr r2, 8004970 <DMA_CheckFifoParam+0x28>)
 800496a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496e:	bf00      	nop
 8004970:	08004981 	.word	0x08004981
 8004974:	08004993 	.word	0x08004993
 8004978:	08004981 	.word	0x08004981
 800497c:	08004a17 	.word	0x08004a17
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004984:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d046      	beq.n	8004a1a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004990:	e043      	b.n	8004a1a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004996:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800499a:	d140      	bne.n	8004a1e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049a0:	e03d      	b.n	8004a1e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049aa:	d121      	bne.n	80049f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2b03      	cmp	r3, #3
 80049b0:	d837      	bhi.n	8004a22 <DMA_CheckFifoParam+0xda>
 80049b2:	a201      	add	r2, pc, #4	@ (adr r2, 80049b8 <DMA_CheckFifoParam+0x70>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	080049c9 	.word	0x080049c9
 80049bc:	080049cf 	.word	0x080049cf
 80049c0:	080049c9 	.word	0x080049c9
 80049c4:	080049e1 	.word	0x080049e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	73fb      	strb	r3, [r7, #15]
      break;
 80049cc:	e030      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d025      	beq.n	8004a26 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049de:	e022      	b.n	8004a26 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80049e8:	d11f      	bne.n	8004a2a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80049ee:	e01c      	b.n	8004a2a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d903      	bls.n	80049fe <DMA_CheckFifoParam+0xb6>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d003      	beq.n	8004a04 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80049fc:	e018      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]
      break;
 8004a02:	e015      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00e      	beq.n	8004a2e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	73fb      	strb	r3, [r7, #15]
      break;
 8004a14:	e00b      	b.n	8004a2e <DMA_CheckFifoParam+0xe6>
      break;
 8004a16:	bf00      	nop
 8004a18:	e00a      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      break;
 8004a1a:	bf00      	nop
 8004a1c:	e008      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      break;
 8004a1e:	bf00      	nop
 8004a20:	e006      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      break;
 8004a22:	bf00      	nop
 8004a24:	e004      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      break;
 8004a26:	bf00      	nop
 8004a28:	e002      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a2a:	bf00      	nop
 8004a2c:	e000      	b.n	8004a30 <DMA_CheckFifoParam+0xe8>
      break;
 8004a2e:	bf00      	nop
    }
  } 
  
  return status; 
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop

08004a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b089      	sub	sp, #36	@ 0x24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a56:	2300      	movs	r3, #0
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	e159      	b.n	8004d10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	fa02 f303 	lsl.w	r3, r2, r3
 8004a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	f040 8148 	bne.w	8004d0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d005      	beq.n	8004a92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d130      	bne.n	8004af4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	2203      	movs	r2, #3
 8004a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa2:	43db      	mvns	r3, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	005b      	lsls	r3, r3, #1
 8004ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ac8:	2201      	movs	r2, #1
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	43db      	mvns	r3, r3
 8004ad2:	69ba      	ldr	r2, [r7, #24]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	091b      	lsrs	r3, r3, #4
 8004ade:	f003 0201 	and.w	r2, r3, #1
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69ba      	ldr	r2, [r7, #24]
 8004af2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 0303 	and.w	r3, r3, #3
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d017      	beq.n	8004b30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	2203      	movs	r2, #3
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	43db      	mvns	r3, r3
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4013      	ands	r3, r2
 8004b16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f003 0303 	and.w	r3, r3, #3
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	d123      	bne.n	8004b84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	08da      	lsrs	r2, r3, #3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	3208      	adds	r2, #8
 8004b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	220f      	movs	r2, #15
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	43db      	mvns	r3, r3
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	69ba      	ldr	r2, [r7, #24]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	08da      	lsrs	r2, r3, #3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	3208      	adds	r2, #8
 8004b7e:	69b9      	ldr	r1, [r7, #24]
 8004b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	2203      	movs	r2, #3
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	43db      	mvns	r3, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f003 0203 	and.w	r2, r3, #3
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 80a2 	beq.w	8004d0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	4b57      	ldr	r3, [pc, #348]	@ (8004d28 <HAL_GPIO_Init+0x2e8>)
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bce:	4a56      	ldr	r2, [pc, #344]	@ (8004d28 <HAL_GPIO_Init+0x2e8>)
 8004bd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004bd6:	4b54      	ldr	r3, [pc, #336]	@ (8004d28 <HAL_GPIO_Init+0x2e8>)
 8004bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bde:	60fb      	str	r3, [r7, #12]
 8004be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004be2:	4a52      	ldr	r2, [pc, #328]	@ (8004d2c <HAL_GPIO_Init+0x2ec>)
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	089b      	lsrs	r3, r3, #2
 8004be8:	3302      	adds	r3, #2
 8004bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	f003 0303 	and.w	r3, r3, #3
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	220f      	movs	r2, #15
 8004bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004bfe:	43db      	mvns	r3, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	4013      	ands	r3, r2
 8004c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a49      	ldr	r2, [pc, #292]	@ (8004d30 <HAL_GPIO_Init+0x2f0>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d019      	beq.n	8004c42 <HAL_GPIO_Init+0x202>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a48      	ldr	r2, [pc, #288]	@ (8004d34 <HAL_GPIO_Init+0x2f4>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d013      	beq.n	8004c3e <HAL_GPIO_Init+0x1fe>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a47      	ldr	r2, [pc, #284]	@ (8004d38 <HAL_GPIO_Init+0x2f8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00d      	beq.n	8004c3a <HAL_GPIO_Init+0x1fa>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a46      	ldr	r2, [pc, #280]	@ (8004d3c <HAL_GPIO_Init+0x2fc>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d007      	beq.n	8004c36 <HAL_GPIO_Init+0x1f6>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a45      	ldr	r2, [pc, #276]	@ (8004d40 <HAL_GPIO_Init+0x300>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d101      	bne.n	8004c32 <HAL_GPIO_Init+0x1f2>
 8004c2e:	2304      	movs	r3, #4
 8004c30:	e008      	b.n	8004c44 <HAL_GPIO_Init+0x204>
 8004c32:	2307      	movs	r3, #7
 8004c34:	e006      	b.n	8004c44 <HAL_GPIO_Init+0x204>
 8004c36:	2303      	movs	r3, #3
 8004c38:	e004      	b.n	8004c44 <HAL_GPIO_Init+0x204>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e002      	b.n	8004c44 <HAL_GPIO_Init+0x204>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e000      	b.n	8004c44 <HAL_GPIO_Init+0x204>
 8004c42:	2300      	movs	r3, #0
 8004c44:	69fa      	ldr	r2, [r7, #28]
 8004c46:	f002 0203 	and.w	r2, r2, #3
 8004c4a:	0092      	lsls	r2, r2, #2
 8004c4c:	4093      	lsls	r3, r2
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c54:	4935      	ldr	r1, [pc, #212]	@ (8004d2c <HAL_GPIO_Init+0x2ec>)
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	089b      	lsrs	r3, r3, #2
 8004c5a:	3302      	adds	r3, #2
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c62:	4b38      	ldr	r3, [pc, #224]	@ (8004d44 <HAL_GPIO_Init+0x304>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c86:	4a2f      	ldr	r2, [pc, #188]	@ (8004d44 <HAL_GPIO_Init+0x304>)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8004d44 <HAL_GPIO_Init+0x304>)
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	43db      	mvns	r3, r3
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d003      	beq.n	8004cb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cb0:	4a24      	ldr	r2, [pc, #144]	@ (8004d44 <HAL_GPIO_Init+0x304>)
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cb6:	4b23      	ldr	r3, [pc, #140]	@ (8004d44 <HAL_GPIO_Init+0x304>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	43db      	mvns	r3, r3
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d003      	beq.n	8004cda <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004cda:	4a1a      	ldr	r2, [pc, #104]	@ (8004d44 <HAL_GPIO_Init+0x304>)
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ce0:	4b18      	ldr	r3, [pc, #96]	@ (8004d44 <HAL_GPIO_Init+0x304>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	69ba      	ldr	r2, [r7, #24]
 8004cec:	4013      	ands	r3, r2
 8004cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d04:	4a0f      	ldr	r2, [pc, #60]	@ (8004d44 <HAL_GPIO_Init+0x304>)
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	61fb      	str	r3, [r7, #28]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	2b0f      	cmp	r3, #15
 8004d14:	f67f aea2 	bls.w	8004a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
 8004d1c:	3724      	adds	r7, #36	@ 0x24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	40013800 	.word	0x40013800
 8004d30:	40020000 	.word	0x40020000
 8004d34:	40020400 	.word	0x40020400
 8004d38:	40020800 	.word	0x40020800
 8004d3c:	40020c00 	.word	0x40020c00
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40013c00 	.word	0x40013c00

08004d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	460b      	mov	r3, r1
 8004d52:	807b      	strh	r3, [r7, #2]
 8004d54:	4613      	mov	r3, r2
 8004d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d58:	787b      	ldrb	r3, [r7, #1]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d5e:	887a      	ldrh	r2, [r7, #2]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004d64:	e003      	b.n	8004d6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004d66:	887b      	ldrh	r3, [r7, #2]
 8004d68:	041a      	lsls	r2, r3, #16
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	619a      	str	r2, [r3, #24]
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b085      	sub	sp, #20
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
 8004d82:	460b      	mov	r3, r1
 8004d84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d8c:	887a      	ldrh	r2, [r7, #2]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	4013      	ands	r3, r2
 8004d92:	041a      	lsls	r2, r3, #16
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	43d9      	mvns	r1, r3
 8004d98:	887b      	ldrh	r3, [r7, #2]
 8004d9a:	400b      	ands	r3, r1
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	619a      	str	r2, [r3, #24]
}
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
	...

08004db0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e12b      	b.n	800501a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fc f98e 	bl	80010f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2224      	movs	r2, #36	@ 0x24
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0201 	bic.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e14:	f001 f8aa 	bl	8005f6c <HAL_RCC_GetPCLK1Freq>
 8004e18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4a81      	ldr	r2, [pc, #516]	@ (8005024 <HAL_I2C_Init+0x274>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d807      	bhi.n	8004e34 <HAL_I2C_Init+0x84>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	4a80      	ldr	r2, [pc, #512]	@ (8005028 <HAL_I2C_Init+0x278>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	bf94      	ite	ls
 8004e2c:	2301      	movls	r3, #1
 8004e2e:	2300      	movhi	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	e006      	b.n	8004e42 <HAL_I2C_Init+0x92>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4a7d      	ldr	r2, [pc, #500]	@ (800502c <HAL_I2C_Init+0x27c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	bf94      	ite	ls
 8004e3c:	2301      	movls	r3, #1
 8004e3e:	2300      	movhi	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d001      	beq.n	8004e4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e0e7      	b.n	800501a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	4a78      	ldr	r2, [pc, #480]	@ (8005030 <HAL_I2C_Init+0x280>)
 8004e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e52:	0c9b      	lsrs	r3, r3, #18
 8004e54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	4a6a      	ldr	r2, [pc, #424]	@ (8005024 <HAL_I2C_Init+0x274>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d802      	bhi.n	8004e84 <HAL_I2C_Init+0xd4>
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	3301      	adds	r3, #1
 8004e82:	e009      	b.n	8004e98 <HAL_I2C_Init+0xe8>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004e8a:	fb02 f303 	mul.w	r3, r2, r3
 8004e8e:	4a69      	ldr	r2, [pc, #420]	@ (8005034 <HAL_I2C_Init+0x284>)
 8004e90:	fba2 2303 	umull	r2, r3, r2, r3
 8004e94:	099b      	lsrs	r3, r3, #6
 8004e96:	3301      	adds	r3, #1
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	430b      	orrs	r3, r1
 8004e9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004eaa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	495c      	ldr	r1, [pc, #368]	@ (8005024 <HAL_I2C_Init+0x274>)
 8004eb4:	428b      	cmp	r3, r1
 8004eb6:	d819      	bhi.n	8004eec <HAL_I2C_Init+0x13c>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1e59      	subs	r1, r3, #1
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	005b      	lsls	r3, r3, #1
 8004ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ec6:	1c59      	adds	r1, r3, #1
 8004ec8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004ecc:	400b      	ands	r3, r1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_I2C_Init+0x138>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1e59      	subs	r1, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	005b      	lsls	r3, r3, #1
 8004edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ee6:	e051      	b.n	8004f8c <HAL_I2C_Init+0x1dc>
 8004ee8:	2304      	movs	r3, #4
 8004eea:	e04f      	b.n	8004f8c <HAL_I2C_Init+0x1dc>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d111      	bne.n	8004f18 <HAL_I2C_Init+0x168>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	1e58      	subs	r0, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6859      	ldr	r1, [r3, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	440b      	add	r3, r1
 8004f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f06:	3301      	adds	r3, #1
 8004f08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bf0c      	ite	eq
 8004f10:	2301      	moveq	r3, #1
 8004f12:	2300      	movne	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	e012      	b.n	8004f3e <HAL_I2C_Init+0x18e>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	1e58      	subs	r0, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6859      	ldr	r1, [r3, #4]
 8004f20:	460b      	mov	r3, r1
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	0099      	lsls	r1, r3, #2
 8004f28:	440b      	add	r3, r1
 8004f2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f2e:	3301      	adds	r3, #1
 8004f30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <HAL_I2C_Init+0x196>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e022      	b.n	8004f8c <HAL_I2C_Init+0x1dc>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10e      	bne.n	8004f6c <HAL_I2C_Init+0x1bc>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1e58      	subs	r0, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6859      	ldr	r1, [r3, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	440b      	add	r3, r1
 8004f5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f60:	3301      	adds	r3, #1
 8004f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f6a:	e00f      	b.n	8004f8c <HAL_I2C_Init+0x1dc>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	1e58      	subs	r0, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6859      	ldr	r1, [r3, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	0099      	lsls	r1, r3, #2
 8004f7c:	440b      	add	r3, r1
 8004f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f82:	3301      	adds	r3, #1
 8004f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	6809      	ldr	r1, [r1, #0]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	69da      	ldr	r2, [r3, #28]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	431a      	orrs	r2, r3
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004fba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6911      	ldr	r1, [r2, #16]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68d2      	ldr	r2, [r2, #12]
 8004fc6:	4311      	orrs	r1, r2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	430b      	orrs	r3, r1
 8004fce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695a      	ldr	r2, [r3, #20]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f042 0201 	orr.w	r2, r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	000186a0 	.word	0x000186a0
 8005028:	001e847f 	.word	0x001e847f
 800502c:	003d08ff 	.word	0x003d08ff
 8005030:	431bde83 	.word	0x431bde83
 8005034:	10624dd3 	.word	0x10624dd3

08005038 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af02      	add	r7, sp, #8
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	4608      	mov	r0, r1
 8005042:	4611      	mov	r1, r2
 8005044:	461a      	mov	r2, r3
 8005046:	4603      	mov	r3, r0
 8005048:	817b      	strh	r3, [r7, #10]
 800504a:	460b      	mov	r3, r1
 800504c:	813b      	strh	r3, [r7, #8]
 800504e:	4613      	mov	r3, r2
 8005050:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005052:	f7fe fc3d 	bl	80038d0 <HAL_GetTick>
 8005056:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b20      	cmp	r3, #32
 8005062:	f040 80d9 	bne.w	8005218 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	9300      	str	r3, [sp, #0]
 800506a:	2319      	movs	r3, #25
 800506c:	2201      	movs	r2, #1
 800506e:	496d      	ldr	r1, [pc, #436]	@ (8005224 <HAL_I2C_Mem_Write+0x1ec>)
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f971 	bl	8005358 <I2C_WaitOnFlagUntilTimeout>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800507c:	2302      	movs	r3, #2
 800507e:	e0cc      	b.n	800521a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_I2C_Mem_Write+0x56>
 800508a:	2302      	movs	r3, #2
 800508c:	e0c5      	b.n	800521a <HAL_I2C_Mem_Write+0x1e2>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d007      	beq.n	80050b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2221      	movs	r2, #33	@ 0x21
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2240      	movs	r2, #64	@ 0x40
 80050d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6a3a      	ldr	r2, [r7, #32]
 80050de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80050e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ea:	b29a      	uxth	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4a4d      	ldr	r2, [pc, #308]	@ (8005228 <HAL_I2C_Mem_Write+0x1f0>)
 80050f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050f6:	88f8      	ldrh	r0, [r7, #6]
 80050f8:	893a      	ldrh	r2, [r7, #8]
 80050fa:	8979      	ldrh	r1, [r7, #10]
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	4603      	mov	r3, r0
 8005106:	68f8      	ldr	r0, [r7, #12]
 8005108:	f000 f890 	bl	800522c <I2C_RequestMemoryWrite>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d052      	beq.n	80051b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e081      	b.n	800521a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f000 fa36 	bl	800558c <I2C_WaitOnTXEFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d00d      	beq.n	8005142 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512a:	2b04      	cmp	r3, #4
 800512c:	d107      	bne.n	800513e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800513c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e06b      	b.n	800521a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005146:	781a      	ldrb	r2, [r3, #0]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005152:	1c5a      	adds	r2, r3, #1
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29a      	uxth	r2, r3
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b04      	cmp	r3, #4
 800517e:	d11b      	bne.n	80051b8 <HAL_I2C_Mem_Write+0x180>
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005184:	2b00      	cmp	r3, #0
 8005186:	d017      	beq.n	80051b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518c:	781a      	ldrb	r2, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1aa      	bne.n	8005116 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 fa29 	bl	800561c <I2C_WaitOnBTFFlagUntilTimeout>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00d      	beq.n	80051ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d107      	bne.n	80051e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e016      	b.n	800521a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	e000      	b.n	800521a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005218:	2302      	movs	r3, #2
  }
}
 800521a:	4618      	mov	r0, r3
 800521c:	3718      	adds	r7, #24
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	00100002 	.word	0x00100002
 8005228:	ffff0000 	.word	0xffff0000

0800522c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af02      	add	r7, sp, #8
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	4608      	mov	r0, r1
 8005236:	4611      	mov	r1, r2
 8005238:	461a      	mov	r2, r3
 800523a:	4603      	mov	r3, r0
 800523c:	817b      	strh	r3, [r7, #10]
 800523e:	460b      	mov	r3, r1
 8005240:	813b      	strh	r3, [r7, #8]
 8005242:	4613      	mov	r3, r2
 8005244:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005254:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	2200      	movs	r2, #0
 800525e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f000 f878 	bl	8005358 <I2C_WaitOnFlagUntilTimeout>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00d      	beq.n	800528a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800527c:	d103      	bne.n	8005286 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005284:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e05f      	b.n	800534a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800528a:	897b      	ldrh	r3, [r7, #10]
 800528c:	b2db      	uxtb	r3, r3
 800528e:	461a      	mov	r2, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005298:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	6a3a      	ldr	r2, [r7, #32]
 800529e:	492d      	ldr	r1, [pc, #180]	@ (8005354 <I2C_RequestMemoryWrite+0x128>)
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 f8d3 	bl	800544c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e04c      	b.n	800534a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052b0:	2300      	movs	r3, #0
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	617b      	str	r3, [r7, #20]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052c8:	6a39      	ldr	r1, [r7, #32]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f95e 	bl	800558c <I2C_WaitOnTXEFlagUntilTimeout>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00d      	beq.n	80052f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d107      	bne.n	80052ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e02b      	b.n	800534a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052f2:	88fb      	ldrh	r3, [r7, #6]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d105      	bne.n	8005304 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052f8:	893b      	ldrh	r3, [r7, #8]
 80052fa:	b2da      	uxtb	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	611a      	str	r2, [r3, #16]
 8005302:	e021      	b.n	8005348 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005304:	893b      	ldrh	r3, [r7, #8]
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	b29b      	uxth	r3, r3
 800530a:	b2da      	uxtb	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005314:	6a39      	ldr	r1, [r7, #32]
 8005316:	68f8      	ldr	r0, [r7, #12]
 8005318:	f000 f938 	bl	800558c <I2C_WaitOnTXEFlagUntilTimeout>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00d      	beq.n	800533e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005326:	2b04      	cmp	r3, #4
 8005328:	d107      	bne.n	800533a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005338:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e005      	b.n	800534a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800533e:	893b      	ldrh	r3, [r7, #8]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	4618      	mov	r0, r3
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	00010002 	.word	0x00010002

08005358 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	4613      	mov	r3, r2
 8005366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005368:	e048      	b.n	80053fc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005370:	d044      	beq.n	80053fc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005372:	f7fe faad 	bl	80038d0 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	683a      	ldr	r2, [r7, #0]
 800537e:	429a      	cmp	r2, r3
 8005380:	d302      	bcc.n	8005388 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d139      	bne.n	80053fc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	0c1b      	lsrs	r3, r3, #16
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b01      	cmp	r3, #1
 8005390:	d10d      	bne.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x56>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	43da      	mvns	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	4013      	ands	r3, r2
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bf0c      	ite	eq
 80053a4:	2301      	moveq	r3, #1
 80053a6:	2300      	movne	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	e00c      	b.n	80053c8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	43da      	mvns	r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4013      	ands	r3, r2
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	2b00      	cmp	r3, #0
 80053be:	bf0c      	ite	eq
 80053c0:	2301      	moveq	r3, #1
 80053c2:	2300      	movne	r3, #0
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	461a      	mov	r2, r3
 80053c8:	79fb      	ldrb	r3, [r7, #7]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d116      	bne.n	80053fc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e8:	f043 0220 	orr.w	r2, r3, #32
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e023      	b.n	8005444 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	0c1b      	lsrs	r3, r3, #16
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b01      	cmp	r3, #1
 8005404:	d10d      	bne.n	8005422 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	43da      	mvns	r2, r3
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4013      	ands	r3, r2
 8005412:	b29b      	uxth	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	461a      	mov	r2, r3
 8005420:	e00c      	b.n	800543c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	43da      	mvns	r2, r3
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4013      	ands	r3, r2
 800542e:	b29b      	uxth	r3, r3
 8005430:	2b00      	cmp	r3, #0
 8005432:	bf0c      	ite	eq
 8005434:	2301      	moveq	r3, #1
 8005436:	2300      	movne	r3, #0
 8005438:	b2db      	uxtb	r3, r3
 800543a:	461a      	mov	r2, r3
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	429a      	cmp	r2, r3
 8005440:	d093      	beq.n	800536a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800545a:	e071      	b.n	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005466:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800546a:	d123      	bne.n	80054b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800547a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005484:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a0:	f043 0204 	orr.w	r2, r3, #4
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e067      	b.n	8005584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ba:	d041      	beq.n	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054bc:	f7fe fa08 	bl	80038d0 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d302      	bcc.n	80054d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d136      	bne.n	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	0c1b      	lsrs	r3, r3, #16
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d10c      	bne.n	80054f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	43da      	mvns	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4013      	ands	r3, r2
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	bf14      	ite	ne
 80054ee:	2301      	movne	r3, #1
 80054f0:	2300      	moveq	r3, #0
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	e00b      	b.n	800550e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	43da      	mvns	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	4013      	ands	r3, r2
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	bf14      	ite	ne
 8005508:	2301      	movne	r3, #1
 800550a:	2300      	moveq	r3, #0
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d016      	beq.n	8005540 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552c:	f043 0220 	orr.w	r2, r3, #32
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e021      	b.n	8005584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	0c1b      	lsrs	r3, r3, #16
 8005544:	b2db      	uxtb	r3, r3
 8005546:	2b01      	cmp	r3, #1
 8005548:	d10c      	bne.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695b      	ldr	r3, [r3, #20]
 8005550:	43da      	mvns	r2, r3
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	4013      	ands	r3, r2
 8005556:	b29b      	uxth	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2db      	uxtb	r3, r3
 8005562:	e00b      	b.n	800557c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	43da      	mvns	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4013      	ands	r3, r2
 8005570:	b29b      	uxth	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	bf14      	ite	ne
 8005576:	2301      	movne	r3, #1
 8005578:	2300      	moveq	r3, #0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	f47f af6d 	bne.w	800545c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	60f8      	str	r0, [r7, #12]
 8005594:	60b9      	str	r1, [r7, #8]
 8005596:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005598:	e034      	b.n	8005604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800559a:	68f8      	ldr	r0, [r7, #12]
 800559c:	f000 f886 	bl	80056ac <I2C_IsAcknowledgeFailed>
 80055a0:	4603      	mov	r3, r0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e034      	b.n	8005614 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b0:	d028      	beq.n	8005604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b2:	f7fe f98d 	bl	80038d0 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d302      	bcc.n	80055c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d11d      	bne.n	8005604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d2:	2b80      	cmp	r3, #128	@ 0x80
 80055d4:	d016      	beq.n	8005604 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f0:	f043 0220 	orr.w	r2, r3, #32
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e007      	b.n	8005614 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800560e:	2b80      	cmp	r3, #128	@ 0x80
 8005610:	d1c3      	bne.n	800559a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005628:	e034      	b.n	8005694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	f000 f83e 	bl	80056ac <I2C_IsAcknowledgeFailed>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e034      	b.n	80056a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005640:	d028      	beq.n	8005694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005642:	f7fe f945 	bl	80038d0 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	429a      	cmp	r2, r3
 8005650:	d302      	bcc.n	8005658 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d11d      	bne.n	8005694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f003 0304 	and.w	r3, r3, #4
 8005662:	2b04      	cmp	r3, #4
 8005664:	d016      	beq.n	8005694 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005680:	f043 0220 	orr.w	r2, r3, #32
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e007      	b.n	80056a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f003 0304 	and.w	r3, r3, #4
 800569e:	2b04      	cmp	r3, #4
 80056a0:	d1c3      	bne.n	800562a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056c2:	d11b      	bne.n	80056fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80056cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e8:	f043 0204 	orr.w	r2, r3, #4
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e267      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d075      	beq.n	8005816 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800572a:	4b88      	ldr	r3, [pc, #544]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f003 030c 	and.w	r3, r3, #12
 8005732:	2b04      	cmp	r3, #4
 8005734:	d00c      	beq.n	8005750 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005736:	4b85      	ldr	r3, [pc, #532]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800573e:	2b08      	cmp	r3, #8
 8005740:	d112      	bne.n	8005768 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005742:	4b82      	ldr	r3, [pc, #520]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800574a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800574e:	d10b      	bne.n	8005768 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005750:	4b7e      	ldr	r3, [pc, #504]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d05b      	beq.n	8005814 <HAL_RCC_OscConfig+0x108>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d157      	bne.n	8005814 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e242      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005770:	d106      	bne.n	8005780 <HAL_RCC_OscConfig+0x74>
 8005772:	4b76      	ldr	r3, [pc, #472]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a75      	ldr	r2, [pc, #468]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 8005778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	e01d      	b.n	80057bc <HAL_RCC_OscConfig+0xb0>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005788:	d10c      	bne.n	80057a4 <HAL_RCC_OscConfig+0x98>
 800578a:	4b70      	ldr	r3, [pc, #448]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a6f      	ldr	r2, [pc, #444]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 8005790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	4b6d      	ldr	r3, [pc, #436]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a6c      	ldr	r2, [pc, #432]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 800579c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057a0:	6013      	str	r3, [r2, #0]
 80057a2:	e00b      	b.n	80057bc <HAL_RCC_OscConfig+0xb0>
 80057a4:	4b69      	ldr	r3, [pc, #420]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a68      	ldr	r2, [pc, #416]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 80057aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057ae:	6013      	str	r3, [r2, #0]
 80057b0:	4b66      	ldr	r3, [pc, #408]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a65      	ldr	r2, [pc, #404]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 80057b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d013      	beq.n	80057ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057c4:	f7fe f884 	bl	80038d0 <HAL_GetTick>
 80057c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057cc:	f7fe f880 	bl	80038d0 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b64      	cmp	r3, #100	@ 0x64
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e207      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057de:	4b5b      	ldr	r3, [pc, #364]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0xc0>
 80057ea:	e014      	b.n	8005816 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ec:	f7fe f870 	bl	80038d0 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057f4:	f7fe f86c 	bl	80038d0 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b64      	cmp	r3, #100	@ 0x64
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e1f3      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005806:	4b51      	ldr	r3, [pc, #324]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1f0      	bne.n	80057f4 <HAL_RCC_OscConfig+0xe8>
 8005812:	e000      	b.n	8005816 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d063      	beq.n	80058ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005822:	4b4a      	ldr	r3, [pc, #296]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f003 030c 	and.w	r3, r3, #12
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00b      	beq.n	8005846 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800582e:	4b47      	ldr	r3, [pc, #284]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005836:	2b08      	cmp	r3, #8
 8005838:	d11c      	bne.n	8005874 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800583a:	4b44      	ldr	r3, [pc, #272]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d116      	bne.n	8005874 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005846:	4b41      	ldr	r3, [pc, #260]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	d005      	beq.n	800585e <HAL_RCC_OscConfig+0x152>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d001      	beq.n	800585e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e1c7      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585e:	4b3b      	ldr	r3, [pc, #236]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	4937      	ldr	r1, [pc, #220]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 800586e:	4313      	orrs	r3, r2
 8005870:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005872:	e03a      	b.n	80058ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d020      	beq.n	80058be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800587c:	4b34      	ldr	r3, [pc, #208]	@ (8005950 <HAL_RCC_OscConfig+0x244>)
 800587e:	2201      	movs	r2, #1
 8005880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005882:	f7fe f825 	bl	80038d0 <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800588a:	f7fe f821 	bl	80038d0 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e1a8      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800589c:	4b2b      	ldr	r3, [pc, #172]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0f0      	beq.n	800588a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058a8:	4b28      	ldr	r3, [pc, #160]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	00db      	lsls	r3, r3, #3
 80058b6:	4925      	ldr	r1, [pc, #148]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	600b      	str	r3, [r1, #0]
 80058bc:	e015      	b.n	80058ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058be:	4b24      	ldr	r3, [pc, #144]	@ (8005950 <HAL_RCC_OscConfig+0x244>)
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c4:	f7fe f804 	bl	80038d0 <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058cc:	f7fe f800 	bl	80038d0 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e187      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058de:	4b1b      	ldr	r3, [pc, #108]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1f0      	bne.n	80058cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d036      	beq.n	8005964 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d016      	beq.n	800592c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058fe:	4b15      	ldr	r3, [pc, #84]	@ (8005954 <HAL_RCC_OscConfig+0x248>)
 8005900:	2201      	movs	r2, #1
 8005902:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005904:	f7fd ffe4 	bl	80038d0 <HAL_GetTick>
 8005908:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800590a:	e008      	b.n	800591e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800590c:	f7fd ffe0 	bl	80038d0 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	2b02      	cmp	r3, #2
 8005918:	d901      	bls.n	800591e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e167      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800591e:	4b0b      	ldr	r3, [pc, #44]	@ (800594c <HAL_RCC_OscConfig+0x240>)
 8005920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0f0      	beq.n	800590c <HAL_RCC_OscConfig+0x200>
 800592a:	e01b      	b.n	8005964 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800592c:	4b09      	ldr	r3, [pc, #36]	@ (8005954 <HAL_RCC_OscConfig+0x248>)
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005932:	f7fd ffcd 	bl	80038d0 <HAL_GetTick>
 8005936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005938:	e00e      	b.n	8005958 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800593a:	f7fd ffc9 	bl	80038d0 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d907      	bls.n	8005958 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e150      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
 800594c:	40023800 	.word	0x40023800
 8005950:	42470000 	.word	0x42470000
 8005954:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005958:	4b88      	ldr	r3, [pc, #544]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 800595a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1ea      	bne.n	800593a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 8097 	beq.w	8005aa0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005972:	2300      	movs	r3, #0
 8005974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005976:	4b81      	ldr	r3, [pc, #516]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10f      	bne.n	80059a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005982:	2300      	movs	r3, #0
 8005984:	60bb      	str	r3, [r7, #8]
 8005986:	4b7d      	ldr	r3, [pc, #500]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598a:	4a7c      	ldr	r2, [pc, #496]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 800598c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005990:	6413      	str	r3, [r2, #64]	@ 0x40
 8005992:	4b7a      	ldr	r3, [pc, #488]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005996:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800599a:	60bb      	str	r3, [r7, #8]
 800599c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800599e:	2301      	movs	r3, #1
 80059a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059a2:	4b77      	ldr	r3, [pc, #476]	@ (8005b80 <HAL_RCC_OscConfig+0x474>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d118      	bne.n	80059e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ae:	4b74      	ldr	r3, [pc, #464]	@ (8005b80 <HAL_RCC_OscConfig+0x474>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a73      	ldr	r2, [pc, #460]	@ (8005b80 <HAL_RCC_OscConfig+0x474>)
 80059b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ba:	f7fd ff89 	bl	80038d0 <HAL_GetTick>
 80059be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059c0:	e008      	b.n	80059d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c2:	f7fd ff85 	bl	80038d0 <HAL_GetTick>
 80059c6:	4602      	mov	r2, r0
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d901      	bls.n	80059d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80059d0:	2303      	movs	r3, #3
 80059d2:	e10c      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059d4:	4b6a      	ldr	r3, [pc, #424]	@ (8005b80 <HAL_RCC_OscConfig+0x474>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d0f0      	beq.n	80059c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d106      	bne.n	80059f6 <HAL_RCC_OscConfig+0x2ea>
 80059e8:	4b64      	ldr	r3, [pc, #400]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 80059ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059ec:	4a63      	ldr	r2, [pc, #396]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 80059ee:	f043 0301 	orr.w	r3, r3, #1
 80059f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80059f4:	e01c      	b.n	8005a30 <HAL_RCC_OscConfig+0x324>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	2b05      	cmp	r3, #5
 80059fc:	d10c      	bne.n	8005a18 <HAL_RCC_OscConfig+0x30c>
 80059fe:	4b5f      	ldr	r3, [pc, #380]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a02:	4a5e      	ldr	r2, [pc, #376]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005a04:	f043 0304 	orr.w	r3, r3, #4
 8005a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a0e:	4a5b      	ldr	r2, [pc, #364]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005a10:	f043 0301 	orr.w	r3, r3, #1
 8005a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a16:	e00b      	b.n	8005a30 <HAL_RCC_OscConfig+0x324>
 8005a18:	4b58      	ldr	r3, [pc, #352]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005a1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a1c:	4a57      	ldr	r2, [pc, #348]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005a1e:	f023 0301 	bic.w	r3, r3, #1
 8005a22:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a24:	4b55      	ldr	r3, [pc, #340]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a28:	4a54      	ldr	r2, [pc, #336]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005a2a:	f023 0304 	bic.w	r3, r3, #4
 8005a2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d015      	beq.n	8005a64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a38:	f7fd ff4a 	bl	80038d0 <HAL_GetTick>
 8005a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a3e:	e00a      	b.n	8005a56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a40:	f7fd ff46 	bl	80038d0 <HAL_GetTick>
 8005a44:	4602      	mov	r2, r0
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e0cb      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a56:	4b49      	ldr	r3, [pc, #292]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0ee      	beq.n	8005a40 <HAL_RCC_OscConfig+0x334>
 8005a62:	e014      	b.n	8005a8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a64:	f7fd ff34 	bl	80038d0 <HAL_GetTick>
 8005a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a6a:	e00a      	b.n	8005a82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a6c:	f7fd ff30 	bl	80038d0 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d901      	bls.n	8005a82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e0b5      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a82:	4b3e      	ldr	r3, [pc, #248]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a86:	f003 0302 	and.w	r3, r3, #2
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1ee      	bne.n	8005a6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d105      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a94:	4b39      	ldr	r3, [pc, #228]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a98:	4a38      	ldr	r2, [pc, #224]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 80a1 	beq.w	8005bec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005aaa:	4b34      	ldr	r3, [pc, #208]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 030c 	and.w	r3, r3, #12
 8005ab2:	2b08      	cmp	r3, #8
 8005ab4:	d05c      	beq.n	8005b70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d141      	bne.n	8005b42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005abe:	4b31      	ldr	r3, [pc, #196]	@ (8005b84 <HAL_RCC_OscConfig+0x478>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ac4:	f7fd ff04 	bl	80038d0 <HAL_GetTick>
 8005ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aca:	e008      	b.n	8005ade <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005acc:	f7fd ff00 	bl	80038d0 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d901      	bls.n	8005ade <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e087      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ade:	4b27      	ldr	r3, [pc, #156]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d1f0      	bne.n	8005acc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	69da      	ldr	r2, [r3, #28]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af8:	019b      	lsls	r3, r3, #6
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b00:	085b      	lsrs	r3, r3, #1
 8005b02:	3b01      	subs	r3, #1
 8005b04:	041b      	lsls	r3, r3, #16
 8005b06:	431a      	orrs	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b0c:	061b      	lsls	r3, r3, #24
 8005b0e:	491b      	ldr	r1, [pc, #108]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b14:	4b1b      	ldr	r3, [pc, #108]	@ (8005b84 <HAL_RCC_OscConfig+0x478>)
 8005b16:	2201      	movs	r2, #1
 8005b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1a:	f7fd fed9 	bl	80038d0 <HAL_GetTick>
 8005b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b22:	f7fd fed5 	bl	80038d0 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e05c      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b34:	4b11      	ldr	r3, [pc, #68]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0f0      	beq.n	8005b22 <HAL_RCC_OscConfig+0x416>
 8005b40:	e054      	b.n	8005bec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b42:	4b10      	ldr	r3, [pc, #64]	@ (8005b84 <HAL_RCC_OscConfig+0x478>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b48:	f7fd fec2 	bl	80038d0 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b50:	f7fd febe 	bl	80038d0 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e045      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b62:	4b06      	ldr	r3, [pc, #24]	@ (8005b7c <HAL_RCC_OscConfig+0x470>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1f0      	bne.n	8005b50 <HAL_RCC_OscConfig+0x444>
 8005b6e:	e03d      	b.n	8005bec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d107      	bne.n	8005b88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	e038      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
 8005b7c:	40023800 	.word	0x40023800
 8005b80:	40007000 	.word	0x40007000
 8005b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b88:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf8 <HAL_RCC_OscConfig+0x4ec>)
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d028      	beq.n	8005be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d121      	bne.n	8005be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d11a      	bne.n	8005be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005bb8:	4013      	ands	r3, r2
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d111      	bne.n	8005be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bce:	085b      	lsrs	r3, r3, #1
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d107      	bne.n	8005be8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d001      	beq.n	8005bec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e000      	b.n	8005bee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3718      	adds	r7, #24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40023800 	.word	0x40023800

08005bfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0cc      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c10:	4b68      	ldr	r3, [pc, #416]	@ (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d90c      	bls.n	8005c38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c1e:	4b65      	ldr	r3, [pc, #404]	@ (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	b2d2      	uxtb	r2, r2
 8005c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c26:	4b63      	ldr	r3, [pc, #396]	@ (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d001      	beq.n	8005c38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e0b8      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d020      	beq.n	8005c86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f003 0304 	and.w	r3, r3, #4
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c50:	4b59      	ldr	r3, [pc, #356]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	4a58      	ldr	r2, [pc, #352]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005c5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0308 	and.w	r3, r3, #8
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c68:	4b53      	ldr	r3, [pc, #332]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	4a52      	ldr	r2, [pc, #328]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005c72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c74:	4b50      	ldr	r3, [pc, #320]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	494d      	ldr	r1, [pc, #308]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d044      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d107      	bne.n	8005caa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c9a:	4b47      	ldr	r3, [pc, #284]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d119      	bne.n	8005cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e07f      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d003      	beq.n	8005cba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d107      	bne.n	8005cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cba:	4b3f      	ldr	r3, [pc, #252]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d109      	bne.n	8005cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e06f      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005cca:	4b3b      	ldr	r3, [pc, #236]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d101      	bne.n	8005cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e067      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005cda:	4b37      	ldr	r3, [pc, #220]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f023 0203 	bic.w	r2, r3, #3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	4934      	ldr	r1, [pc, #208]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005cec:	f7fd fdf0 	bl	80038d0 <HAL_GetTick>
 8005cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cf2:	e00a      	b.n	8005d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cf4:	f7fd fdec 	bl	80038d0 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d901      	bls.n	8005d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	e04f      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f003 020c 	and.w	r2, r3, #12
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d1eb      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d1c:	4b25      	ldr	r3, [pc, #148]	@ (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0307 	and.w	r3, r3, #7
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d20c      	bcs.n	8005d44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d2a:	4b22      	ldr	r3, [pc, #136]	@ (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d32:	4b20      	ldr	r3, [pc, #128]	@ (8005db4 <HAL_RCC_ClockConfig+0x1b8>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d001      	beq.n	8005d44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e032      	b.n	8005daa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d008      	beq.n	8005d62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d50:	4b19      	ldr	r3, [pc, #100]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	4916      	ldr	r1, [pc, #88]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0308 	and.w	r3, r3, #8
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d009      	beq.n	8005d82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d6e:	4b12      	ldr	r3, [pc, #72]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	490e      	ldr	r1, [pc, #56]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d82:	f000 f821 	bl	8005dc8 <HAL_RCC_GetSysClockFreq>
 8005d86:	4602      	mov	r2, r0
 8005d88:	4b0b      	ldr	r3, [pc, #44]	@ (8005db8 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	091b      	lsrs	r3, r3, #4
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	490a      	ldr	r1, [pc, #40]	@ (8005dbc <HAL_RCC_ClockConfig+0x1c0>)
 8005d94:	5ccb      	ldrb	r3, [r1, r3]
 8005d96:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9a:	4a09      	ldr	r2, [pc, #36]	@ (8005dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8005d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005d9e:	4b09      	ldr	r3, [pc, #36]	@ (8005dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fd fd50 	bl	8003848 <HAL_InitTick>

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40023c00 	.word	0x40023c00
 8005db8:	40023800 	.word	0x40023800
 8005dbc:	0800e5f4 	.word	0x0800e5f4
 8005dc0:	20000000 	.word	0x20000000
 8005dc4:	20000004 	.word	0x20000004

08005dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dcc:	b090      	sub	sp, #64	@ 0x40
 8005dce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005de0:	4b59      	ldr	r3, [pc, #356]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f003 030c 	and.w	r3, r3, #12
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d00d      	beq.n	8005e08 <HAL_RCC_GetSysClockFreq+0x40>
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	f200 80a1 	bhi.w	8005f34 <HAL_RCC_GetSysClockFreq+0x16c>
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d002      	beq.n	8005dfc <HAL_RCC_GetSysClockFreq+0x34>
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d003      	beq.n	8005e02 <HAL_RCC_GetSysClockFreq+0x3a>
 8005dfa:	e09b      	b.n	8005f34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005dfc:	4b53      	ldr	r3, [pc, #332]	@ (8005f4c <HAL_RCC_GetSysClockFreq+0x184>)
 8005dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005e00:	e09b      	b.n	8005f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e02:	4b53      	ldr	r3, [pc, #332]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8005e04:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005e06:	e098      	b.n	8005f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e08:	4b4f      	ldr	r3, [pc, #316]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005e10:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e12:	4b4d      	ldr	r3, [pc, #308]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d028      	beq.n	8005e70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	099b      	lsrs	r3, r3, #6
 8005e24:	2200      	movs	r2, #0
 8005e26:	623b      	str	r3, [r7, #32]
 8005e28:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005e30:	2100      	movs	r1, #0
 8005e32:	4b47      	ldr	r3, [pc, #284]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8005e34:	fb03 f201 	mul.w	r2, r3, r1
 8005e38:	2300      	movs	r3, #0
 8005e3a:	fb00 f303 	mul.w	r3, r0, r3
 8005e3e:	4413      	add	r3, r2
 8005e40:	4a43      	ldr	r2, [pc, #268]	@ (8005f50 <HAL_RCC_GetSysClockFreq+0x188>)
 8005e42:	fba0 1202 	umull	r1, r2, r0, r2
 8005e46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e48:	460a      	mov	r2, r1
 8005e4a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e4e:	4413      	add	r3, r2
 8005e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e54:	2200      	movs	r2, #0
 8005e56:	61bb      	str	r3, [r7, #24]
 8005e58:	61fa      	str	r2, [r7, #28]
 8005e5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005e62:	f7fa fe03 	bl	8000a6c <__aeabi_uldivmod>
 8005e66:	4602      	mov	r2, r0
 8005e68:	460b      	mov	r3, r1
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e6e:	e053      	b.n	8005f18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e70:	4b35      	ldr	r3, [pc, #212]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	099b      	lsrs	r3, r3, #6
 8005e76:	2200      	movs	r2, #0
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	617a      	str	r2, [r7, #20]
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005e82:	f04f 0b00 	mov.w	fp, #0
 8005e86:	4652      	mov	r2, sl
 8005e88:	465b      	mov	r3, fp
 8005e8a:	f04f 0000 	mov.w	r0, #0
 8005e8e:	f04f 0100 	mov.w	r1, #0
 8005e92:	0159      	lsls	r1, r3, #5
 8005e94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005e98:	0150      	lsls	r0, r2, #5
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	ebb2 080a 	subs.w	r8, r2, sl
 8005ea2:	eb63 090b 	sbc.w	r9, r3, fp
 8005ea6:	f04f 0200 	mov.w	r2, #0
 8005eaa:	f04f 0300 	mov.w	r3, #0
 8005eae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005eb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005eb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005eba:	ebb2 0408 	subs.w	r4, r2, r8
 8005ebe:	eb63 0509 	sbc.w	r5, r3, r9
 8005ec2:	f04f 0200 	mov.w	r2, #0
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	00eb      	lsls	r3, r5, #3
 8005ecc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ed0:	00e2      	lsls	r2, r4, #3
 8005ed2:	4614      	mov	r4, r2
 8005ed4:	461d      	mov	r5, r3
 8005ed6:	eb14 030a 	adds.w	r3, r4, sl
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	eb45 030b 	adc.w	r3, r5, fp
 8005ee0:	607b      	str	r3, [r7, #4]
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005eee:	4629      	mov	r1, r5
 8005ef0:	028b      	lsls	r3, r1, #10
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005ef8:	4621      	mov	r1, r4
 8005efa:	028a      	lsls	r2, r1, #10
 8005efc:	4610      	mov	r0, r2
 8005efe:	4619      	mov	r1, r3
 8005f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f02:	2200      	movs	r2, #0
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	60fa      	str	r2, [r7, #12]
 8005f08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f0c:	f7fa fdae 	bl	8000a6c <__aeabi_uldivmod>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4613      	mov	r3, r2
 8005f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005f18:	4b0b      	ldr	r3, [pc, #44]	@ (8005f48 <HAL_RCC_GetSysClockFreq+0x180>)
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	0c1b      	lsrs	r3, r3, #16
 8005f1e:	f003 0303 	and.w	r3, r3, #3
 8005f22:	3301      	adds	r3, #1
 8005f24:	005b      	lsls	r3, r3, #1
 8005f26:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005f28:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f30:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f32:	e002      	b.n	8005f3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f34:	4b05      	ldr	r3, [pc, #20]	@ (8005f4c <HAL_RCC_GetSysClockFreq+0x184>)
 8005f36:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3740      	adds	r7, #64	@ 0x40
 8005f40:	46bd      	mov	sp, r7
 8005f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f46:	bf00      	nop
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	00f42400 	.word	0x00f42400
 8005f50:	017d7840 	.word	0x017d7840

08005f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f54:	b480      	push	{r7}
 8005f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f58:	4b03      	ldr	r3, [pc, #12]	@ (8005f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	20000000 	.word	0x20000000

08005f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f70:	f7ff fff0 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8005f74:	4602      	mov	r2, r0
 8005f76:	4b05      	ldr	r3, [pc, #20]	@ (8005f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	0a9b      	lsrs	r3, r3, #10
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	4903      	ldr	r1, [pc, #12]	@ (8005f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f82:	5ccb      	ldrb	r3, [r1, r3]
 8005f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	40023800 	.word	0x40023800
 8005f90:	0800e604 	.word	0x0800e604

08005f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f98:	f7ff ffdc 	bl	8005f54 <HAL_RCC_GetHCLKFreq>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	4b05      	ldr	r3, [pc, #20]	@ (8005fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	0b5b      	lsrs	r3, r3, #13
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	4903      	ldr	r1, [pc, #12]	@ (8005fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005faa:	5ccb      	ldrb	r3, [r1, r3]
 8005fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	bd80      	pop	{r7, pc}
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	0800e604 	.word	0x0800e604

08005fbc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d105      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d038      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005fe4:	4b68      	ldr	r3, [pc, #416]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005fea:	f7fd fc71 	bl	80038d0 <HAL_GetTick>
 8005fee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ff0:	e008      	b.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ff2:	f7fd fc6d 	bl	80038d0 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d901      	bls.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e0bd      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006004:	4b61      	ldr	r3, [pc, #388]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1f0      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	019b      	lsls	r3, r3, #6
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	071b      	lsls	r3, r3, #28
 8006022:	495a      	ldr	r1, [pc, #360]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006024:	4313      	orrs	r3, r2
 8006026:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800602a:	4b57      	ldr	r3, [pc, #348]	@ (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800602c:	2201      	movs	r2, #1
 800602e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006030:	f7fd fc4e 	bl	80038d0 <HAL_GetTick>
 8006034:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006036:	e008      	b.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006038:	f7fd fc4a 	bl	80038d0 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e09a      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800604a:	4b50      	ldr	r3, [pc, #320]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0f0      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 8083 	beq.w	800616a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	4b48      	ldr	r3, [pc, #288]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800606a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606c:	4a47      	ldr	r2, [pc, #284]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800606e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006072:	6413      	str	r3, [r2, #64]	@ 0x40
 8006074:	4b45      	ldr	r3, [pc, #276]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006080:	4b43      	ldr	r3, [pc, #268]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a42      	ldr	r2, [pc, #264]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800608a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800608c:	f7fd fc20 	bl	80038d0 <HAL_GetTick>
 8006090:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006092:	e008      	b.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006094:	f7fd fc1c 	bl	80038d0 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e06c      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80060a6:	4b3a      	ldr	r3, [pc, #232]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0f0      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060b2:	4b36      	ldr	r3, [pc, #216]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ba:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d02f      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d028      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80060d0:	4b2e      	ldr	r3, [pc, #184]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060d8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80060da:	4b2e      	ldr	r3, [pc, #184]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060dc:	2201      	movs	r2, #1
 80060de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80060e0:	4b2c      	ldr	r3, [pc, #176]	@ (8006194 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80060e6:	4a29      	ldr	r2, [pc, #164]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80060ec:	4b27      	ldr	r3, [pc, #156]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d114      	bne.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80060f8:	f7fd fbea 	bl	80038d0 <HAL_GetTick>
 80060fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060fe:	e00a      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006100:	f7fd fbe6 	bl	80038d0 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800610e:	4293      	cmp	r3, r2
 8006110:	d901      	bls.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e034      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006116:	4b1d      	ldr	r3, [pc, #116]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0ee      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800612a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800612e:	d10d      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8006130:	4b16      	ldr	r3, [pc, #88]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006144:	4911      	ldr	r1, [pc, #68]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006146:	4313      	orrs	r3, r2
 8006148:	608b      	str	r3, [r1, #8]
 800614a:	e005      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800614c:	4b0f      	ldr	r3, [pc, #60]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	4a0e      	ldr	r2, [pc, #56]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006152:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006156:	6093      	str	r3, [r2, #8]
 8006158:	4b0c      	ldr	r3, [pc, #48]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006164:	4909      	ldr	r1, [pc, #36]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006166:	4313      	orrs	r3, r2
 8006168:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0308 	and.w	r3, r3, #8
 8006172:	2b00      	cmp	r3, #0
 8006174:	d003      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	7d1a      	ldrb	r2, [r3, #20]
 800617a:	4b07      	ldr	r3, [pc, #28]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800617c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	42470068 	.word	0x42470068
 800618c:	40023800 	.word	0x40023800
 8006190:	40007000 	.word	0x40007000
 8006194:	42470e40 	.word	0x42470e40
 8006198:	424711e0 	.word	0x424711e0

0800619c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d101      	bne.n	80061ae <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e073      	b.n	8006296 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	7f5b      	ldrb	r3, [r3, #29]
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d105      	bne.n	80061c4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fb fa86 	bl	80016d0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	f003 0310 	and.w	r3, r3, #16
 80061d4:	2b10      	cmp	r3, #16
 80061d6:	d055      	beq.n	8006284 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	22ca      	movs	r2, #202	@ 0xca
 80061de:	625a      	str	r2, [r3, #36]	@ 0x24
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2253      	movs	r2, #83	@ 0x53
 80061e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f99d 	bl	8006528 <RTC_EnterInitMode>
 80061ee:	4603      	mov	r3, r0
 80061f0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80061f2:	7bfb      	ldrb	r3, [r7, #15]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d12c      	bne.n	8006252 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	689b      	ldr	r3, [r3, #8]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	6812      	ldr	r2, [r2, #0]
 8006202:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006206:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800620a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	6899      	ldr	r1, [r3, #8]
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	431a      	orrs	r2, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	695b      	ldr	r3, [r3, #20]
 8006220:	431a      	orrs	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	68d2      	ldr	r2, [r2, #12]
 8006232:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6919      	ldr	r1, [r3, #16]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	041a      	lsls	r2, r3, #16
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f9a4 	bl	8006596 <RTC_ExitInitMode>
 800624e:	4603      	mov	r3, r0
 8006250:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006252:	7bfb      	ldrb	r3, [r7, #15]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d110      	bne.n	800627a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006266:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	22ff      	movs	r2, #255	@ 0xff
 8006280:	625a      	str	r2, [r3, #36]	@ 0x24
 8006282:	e001      	b.n	8006288 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d102      	bne.n	8006294 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800629e:	b590      	push	{r4, r7, lr}
 80062a0:	b087      	sub	sp, #28
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	60f8      	str	r0, [r7, #12]
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80062aa:	2300      	movs	r3, #0
 80062ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	7f1b      	ldrb	r3, [r3, #28]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d101      	bne.n	80062ba <HAL_RTC_SetTime+0x1c>
 80062b6:	2302      	movs	r3, #2
 80062b8:	e087      	b.n	80063ca <HAL_RTC_SetTime+0x12c>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2201      	movs	r2, #1
 80062be:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2202      	movs	r2, #2
 80062c4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d126      	bne.n	800631a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d102      	bne.n	80062e0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2200      	movs	r2, #0
 80062de:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	4618      	mov	r0, r3
 80062e6:	f000 f97b 	bl	80065e0 <RTC_ByteToBcd2>
 80062ea:	4603      	mov	r3, r0
 80062ec:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	785b      	ldrb	r3, [r3, #1]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f000 f974 	bl	80065e0 <RTC_ByteToBcd2>
 80062f8:	4603      	mov	r3, r0
 80062fa:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80062fc:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	789b      	ldrb	r3, [r3, #2]
 8006302:	4618      	mov	r0, r3
 8006304:	f000 f96c 	bl	80065e0 <RTC_ByteToBcd2>
 8006308:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800630a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	78db      	ldrb	r3, [r3, #3]
 8006312:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006314:	4313      	orrs	r3, r2
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	e018      	b.n	800634c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006324:	2b00      	cmp	r3, #0
 8006326:	d102      	bne.n	800632e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2200      	movs	r2, #0
 800632c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	785b      	ldrb	r3, [r3, #1]
 8006338:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800633a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800633c:	68ba      	ldr	r2, [r7, #8]
 800633e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006340:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	78db      	ldrb	r3, [r3, #3]
 8006346:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006348:	4313      	orrs	r3, r2
 800634a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	22ca      	movs	r2, #202	@ 0xca
 8006352:	625a      	str	r2, [r3, #36]	@ 0x24
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2253      	movs	r2, #83	@ 0x53
 800635a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800635c:	68f8      	ldr	r0, [r7, #12]
 800635e:	f000 f8e3 	bl	8006528 <RTC_EnterInitMode>
 8006362:	4603      	mov	r3, r0
 8006364:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006366:	7cfb      	ldrb	r3, [r7, #19]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d120      	bne.n	80063ae <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006376:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800637a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689a      	ldr	r2, [r3, #8]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800638a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6899      	ldr	r1, [r3, #8]
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	431a      	orrs	r2, r3
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 f8f6 	bl	8006596 <RTC_ExitInitMode>
 80063aa:	4603      	mov	r3, r0
 80063ac:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80063ae:	7cfb      	ldrb	r3, [r7, #19]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2201      	movs	r2, #1
 80063b8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	22ff      	movs	r2, #255	@ 0xff
 80063c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	771a      	strb	r2, [r3, #28]

  return status;
 80063c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	371c      	adds	r7, #28
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd90      	pop	{r4, r7, pc}

080063d2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80063d2:	b590      	push	{r4, r7, lr}
 80063d4:	b087      	sub	sp, #28
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	7f1b      	ldrb	r3, [r3, #28]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_RTC_SetDate+0x1c>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e071      	b.n	80064d2 <HAL_RTC_SetDate+0x100>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2201      	movs	r2, #1
 80063f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2202      	movs	r2, #2
 80063f8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d10e      	bne.n	800641e <HAL_RTC_SetDate+0x4c>
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	f003 0310 	and.w	r3, r3, #16
 8006408:	2b00      	cmp	r3, #0
 800640a:	d008      	beq.n	800641e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	785b      	ldrb	r3, [r3, #1]
 8006410:	f023 0310 	bic.w	r3, r3, #16
 8006414:	b2db      	uxtb	r3, r3
 8006416:	330a      	adds	r3, #10
 8006418:	b2da      	uxtb	r2, r3
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d11c      	bne.n	800645e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	78db      	ldrb	r3, [r3, #3]
 8006428:	4618      	mov	r0, r3
 800642a:	f000 f8d9 	bl	80065e0 <RTC_ByteToBcd2>
 800642e:	4603      	mov	r3, r0
 8006430:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	785b      	ldrb	r3, [r3, #1]
 8006436:	4618      	mov	r0, r3
 8006438:	f000 f8d2 	bl	80065e0 <RTC_ByteToBcd2>
 800643c:	4603      	mov	r3, r0
 800643e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006440:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	789b      	ldrb	r3, [r3, #2]
 8006446:	4618      	mov	r0, r3
 8006448:	f000 f8ca 	bl	80065e0 <RTC_ByteToBcd2>
 800644c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800644e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006458:	4313      	orrs	r3, r2
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	e00e      	b.n	800647c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	78db      	ldrb	r3, [r3, #3]
 8006462:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	785b      	ldrb	r3, [r3, #1]
 8006468:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800646a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800646c:	68ba      	ldr	r2, [r7, #8]
 800646e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006470:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	22ca      	movs	r2, #202	@ 0xca
 8006482:	625a      	str	r2, [r3, #36]	@ 0x24
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2253      	movs	r2, #83	@ 0x53
 800648a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 f84b 	bl	8006528 <RTC_EnterInitMode>
 8006492:	4603      	mov	r3, r0
 8006494:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006496:	7cfb      	ldrb	r3, [r7, #19]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d10c      	bne.n	80064b6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80064a6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80064aa:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f000 f872 	bl	8006596 <RTC_ExitInitMode>
 80064b2:	4603      	mov	r3, r0
 80064b4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80064b6:	7cfb      	ldrb	r3, [r7, #19]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d102      	bne.n	80064c2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2201      	movs	r2, #1
 80064c0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	22ff      	movs	r2, #255	@ 0xff
 80064c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	771a      	strb	r2, [r3, #28]

  return status;
 80064d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	371c      	adds	r7, #28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd90      	pop	{r4, r7, pc}
	...

080064dc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a0d      	ldr	r2, [pc, #52]	@ (8006524 <HAL_RTC_WaitForSynchro+0x48>)
 80064ee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064f0:	f7fd f9ee 	bl	80038d0 <HAL_GetTick>
 80064f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80064f6:	e009      	b.n	800650c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80064f8:	f7fd f9ea 	bl	80038d0 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006506:	d901      	bls.n	800650c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e007      	b.n	800651c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f003 0320 	and.w	r3, r3, #32
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0ee      	beq.n	80064f8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3710      	adds	r7, #16
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	00013f5f 	.word	0x00013f5f

08006528 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006530:	2300      	movs	r3, #0
 8006532:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006534:	2300      	movs	r3, #0
 8006536:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d122      	bne.n	800658c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006554:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006556:	f7fd f9bb 	bl	80038d0 <HAL_GetTick>
 800655a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800655c:	e00c      	b.n	8006578 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800655e:	f7fd f9b7 	bl	80038d0 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800656c:	d904      	bls.n	8006578 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2204      	movs	r2, #4
 8006572:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006582:	2b00      	cmp	r3, #0
 8006584:	d102      	bne.n	800658c <RTC_EnterInitMode+0x64>
 8006586:	7bfb      	ldrb	r3, [r7, #15]
 8006588:	2b01      	cmp	r3, #1
 800658a:	d1e8      	bne.n	800655e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800658c:	7bfb      	ldrb	r3, [r7, #15]
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68da      	ldr	r2, [r3, #12]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065b0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10a      	bne.n	80065d6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f7ff ff8b 	bl	80064dc <HAL_RTC_WaitForSynchro>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d004      	beq.n	80065d6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2204      	movs	r2, #4
 80065d0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	4603      	mov	r3, r0
 80065e8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80065ea:	2300      	movs	r3, #0
 80065ec:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80065ee:	e005      	b.n	80065fc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3301      	adds	r3, #1
 80065f4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80065f6:	79fb      	ldrb	r3, [r7, #7]
 80065f8:	3b0a      	subs	r3, #10
 80065fa:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	2b09      	cmp	r3, #9
 8006600:	d8f6      	bhi.n	80065f0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	b2db      	uxtb	r3, r3
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	b2da      	uxtb	r2, r3
 800660a:	79fb      	ldrb	r3, [r7, #7]
 800660c:	4313      	orrs	r3, r2
 800660e:	b2db      	uxtb	r3, r3
}
 8006610:	4618      	mov	r0, r3
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d101      	bne.n	800662e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e07b      	b.n	8006726 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006632:	2b00      	cmp	r3, #0
 8006634:	d108      	bne.n	8006648 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800663e:	d009      	beq.n	8006654 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	61da      	str	r2, [r3, #28]
 8006646:	e005      	b.n	8006654 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f7fb f890 	bl	8001794 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2202      	movs	r2, #2
 8006678:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800668a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066a6:	431a      	orrs	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	431a      	orrs	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	431a      	orrs	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066c4:	431a      	orrs	r2, r3
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69db      	ldr	r3, [r3, #28]
 80066ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a1b      	ldr	r3, [r3, #32]
 80066d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d8:	ea42 0103 	orr.w	r1, r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	0c1b      	lsrs	r3, r3, #16
 80066f2:	f003 0104 	and.w	r1, r3, #4
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066fa:	f003 0210 	and.w	r2, r3, #16
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	430a      	orrs	r2, r1
 8006704:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69da      	ldr	r2, [r3, #28]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006714:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2201      	movs	r2, #1
 8006720:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d101      	bne.n	8006740 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	e041      	b.n	80067c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006746:	b2db      	uxtb	r3, r3
 8006748:	2b00      	cmp	r3, #0
 800674a:	d106      	bne.n	800675a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7fc fe85 	bl	8003464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2202      	movs	r2, #2
 800675e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3304      	adds	r3, #4
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f000 fd6f 	bl	8007250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2201      	movs	r2, #1
 800678e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d001      	beq.n	80067e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e044      	b.n	800686e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2202      	movs	r2, #2
 80067e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68da      	ldr	r2, [r3, #12]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f042 0201 	orr.w	r2, r2, #1
 80067fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a1e      	ldr	r2, [pc, #120]	@ (800687c <HAL_TIM_Base_Start_IT+0xb0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d018      	beq.n	8006838 <HAL_TIM_Base_Start_IT+0x6c>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800680e:	d013      	beq.n	8006838 <HAL_TIM_Base_Start_IT+0x6c>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a1a      	ldr	r2, [pc, #104]	@ (8006880 <HAL_TIM_Base_Start_IT+0xb4>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00e      	beq.n	8006838 <HAL_TIM_Base_Start_IT+0x6c>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a19      	ldr	r2, [pc, #100]	@ (8006884 <HAL_TIM_Base_Start_IT+0xb8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d009      	beq.n	8006838 <HAL_TIM_Base_Start_IT+0x6c>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a17      	ldr	r2, [pc, #92]	@ (8006888 <HAL_TIM_Base_Start_IT+0xbc>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d004      	beq.n	8006838 <HAL_TIM_Base_Start_IT+0x6c>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a16      	ldr	r2, [pc, #88]	@ (800688c <HAL_TIM_Base_Start_IT+0xc0>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d111      	bne.n	800685c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2b06      	cmp	r3, #6
 8006848:	d010      	beq.n	800686c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f042 0201 	orr.w	r2, r2, #1
 8006858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800685a:	e007      	b.n	800686c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f042 0201 	orr.w	r2, r2, #1
 800686a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3714      	adds	r7, #20
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	40010000 	.word	0x40010000
 8006880:	40000400 	.word	0x40000400
 8006884:	40000800 	.word	0x40000800
 8006888:	40000c00 	.word	0x40000c00
 800688c:	40014000 	.word	0x40014000

08006890 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e041      	b.n	8006926 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d106      	bne.n	80068bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f839 	bl	800692e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681a      	ldr	r2, [r3, #0]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	3304      	adds	r3, #4
 80068cc:	4619      	mov	r1, r3
 80068ce:	4610      	mov	r0, r2
 80068d0:	f000 fcbe 	bl	8007250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}

0800692e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800692e:	b480      	push	{r7}
 8006930:	b083      	sub	sp, #12
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006936:	bf00      	nop
 8006938:	370c      	adds	r7, #12
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
	...

08006944 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d109      	bne.n	8006968 <HAL_TIM_PWM_Start+0x24>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b01      	cmp	r3, #1
 800695e:	bf14      	ite	ne
 8006960:	2301      	movne	r3, #1
 8006962:	2300      	moveq	r3, #0
 8006964:	b2db      	uxtb	r3, r3
 8006966:	e022      	b.n	80069ae <HAL_TIM_PWM_Start+0x6a>
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	2b04      	cmp	r3, #4
 800696c:	d109      	bne.n	8006982 <HAL_TIM_PWM_Start+0x3e>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b01      	cmp	r3, #1
 8006978:	bf14      	ite	ne
 800697a:	2301      	movne	r3, #1
 800697c:	2300      	moveq	r3, #0
 800697e:	b2db      	uxtb	r3, r3
 8006980:	e015      	b.n	80069ae <HAL_TIM_PWM_Start+0x6a>
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	2b08      	cmp	r3, #8
 8006986:	d109      	bne.n	800699c <HAL_TIM_PWM_Start+0x58>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800698e:	b2db      	uxtb	r3, r3
 8006990:	2b01      	cmp	r3, #1
 8006992:	bf14      	ite	ne
 8006994:	2301      	movne	r3, #1
 8006996:	2300      	moveq	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	e008      	b.n	80069ae <HAL_TIM_PWM_Start+0x6a>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	bf14      	ite	ne
 80069a8:	2301      	movne	r3, #1
 80069aa:	2300      	moveq	r3, #0
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d001      	beq.n	80069b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e068      	b.n	8006a88 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d104      	bne.n	80069c6 <HAL_TIM_PWM_Start+0x82>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069c4:	e013      	b.n	80069ee <HAL_TIM_PWM_Start+0xaa>
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d104      	bne.n	80069d6 <HAL_TIM_PWM_Start+0x92>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069d4:	e00b      	b.n	80069ee <HAL_TIM_PWM_Start+0xaa>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b08      	cmp	r3, #8
 80069da:	d104      	bne.n	80069e6 <HAL_TIM_PWM_Start+0xa2>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069e4:	e003      	b.n	80069ee <HAL_TIM_PWM_Start+0xaa>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2202      	movs	r2, #2
 80069ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2201      	movs	r2, #1
 80069f4:	6839      	ldr	r1, [r7, #0]
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fed6 	bl	80077a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a23      	ldr	r2, [pc, #140]	@ (8006a90 <HAL_TIM_PWM_Start+0x14c>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d107      	bne.n	8006a16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8006a90 <HAL_TIM_PWM_Start+0x14c>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d018      	beq.n	8006a52 <HAL_TIM_PWM_Start+0x10e>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a28:	d013      	beq.n	8006a52 <HAL_TIM_PWM_Start+0x10e>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a19      	ldr	r2, [pc, #100]	@ (8006a94 <HAL_TIM_PWM_Start+0x150>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00e      	beq.n	8006a52 <HAL_TIM_PWM_Start+0x10e>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a17      	ldr	r2, [pc, #92]	@ (8006a98 <HAL_TIM_PWM_Start+0x154>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d009      	beq.n	8006a52 <HAL_TIM_PWM_Start+0x10e>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a16      	ldr	r2, [pc, #88]	@ (8006a9c <HAL_TIM_PWM_Start+0x158>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d004      	beq.n	8006a52 <HAL_TIM_PWM_Start+0x10e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a14      	ldr	r2, [pc, #80]	@ (8006aa0 <HAL_TIM_PWM_Start+0x15c>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d111      	bne.n	8006a76 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2b06      	cmp	r3, #6
 8006a62:	d010      	beq.n	8006a86 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a74:	e007      	b.n	8006a86 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0201 	orr.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	40010000 	.word	0x40010000
 8006a94:	40000400 	.word	0x40000400
 8006a98:	40000800 	.word	0x40000800
 8006a9c:	40000c00 	.word	0x40000c00
 8006aa0:	40014000 	.word	0x40014000

08006aa4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	e097      	b.n	8006be8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d106      	bne.n	8006ad2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f7fc fd23 	bl	8003518 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6812      	ldr	r2, [r2, #0]
 8006ae4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ae8:	f023 0307 	bic.w	r3, r3, #7
 8006aec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	3304      	adds	r3, #4
 8006af6:	4619      	mov	r1, r3
 8006af8:	4610      	mov	r0, r2
 8006afa:	f000 fba9 	bl	8007250 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	6a1b      	ldr	r3, [r3, #32]
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b26:	f023 0303 	bic.w	r3, r3, #3
 8006b2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	699b      	ldr	r3, [r3, #24]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	4313      	orrs	r3, r2
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006b44:	f023 030c 	bic.w	r3, r3, #12
 8006b48:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	4313      	orrs	r3, r2
 8006b62:	693a      	ldr	r2, [r7, #16]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	011a      	lsls	r2, r3, #4
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	031b      	lsls	r3, r3, #12
 8006b74:	4313      	orrs	r3, r2
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006b82:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006b8a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	011b      	lsls	r3, r3, #4
 8006b96:	4313      	orrs	r3, r2
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	697a      	ldr	r2, [r7, #20]
 8006ba4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c00:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c08:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c10:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006c18:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d110      	bne.n	8006c42 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d102      	bne.n	8006c2c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c26:	7b7b      	ldrb	r3, [r7, #13]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d001      	beq.n	8006c30 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e069      	b.n	8006d04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c40:	e031      	b.n	8006ca6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d110      	bne.n	8006c6a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d102      	bne.n	8006c54 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c4e:	7b3b      	ldrb	r3, [r7, #12]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d001      	beq.n	8006c58 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	e055      	b.n	8006d04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c68:	e01d      	b.n	8006ca6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d108      	bne.n	8006c82 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c70:	7bbb      	ldrb	r3, [r7, #14]
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d105      	bne.n	8006c82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006c76:	7b7b      	ldrb	r3, [r7, #13]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d102      	bne.n	8006c82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006c7c:	7b3b      	ldrb	r3, [r7, #12]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d001      	beq.n	8006c86 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e03e      	b.n	8006d04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2202      	movs	r2, #2
 8006c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2202      	movs	r2, #2
 8006c92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2202      	movs	r2, #2
 8006c9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <HAL_TIM_Encoder_Start+0xc4>
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	d008      	beq.n	8006cc4 <HAL_TIM_Encoder_Start+0xd4>
 8006cb2:	e00f      	b.n	8006cd4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	2100      	movs	r1, #0
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fd73 	bl	80077a8 <TIM_CCxChannelCmd>
      break;
 8006cc2:	e016      	b.n	8006cf2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	2104      	movs	r1, #4
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fd6b 	bl	80077a8 <TIM_CCxChannelCmd>
      break;
 8006cd2:	e00e      	b.n	8006cf2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	2100      	movs	r1, #0
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 fd63 	bl	80077a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	2104      	movs	r1, #4
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 fd5c 	bl	80077a8 <TIM_CCxChannelCmd>
      break;
 8006cf0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f042 0201 	orr.w	r2, r2, #1
 8006d00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d020      	beq.n	8006d70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f003 0302 	and.w	r3, r3, #2
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d01b      	beq.n	8006d70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f06f 0202 	mvn.w	r2, #2
 8006d40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	f003 0303 	and.w	r3, r3, #3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fa5b 	bl	8007212 <HAL_TIM_IC_CaptureCallback>
 8006d5c:	e005      	b.n	8006d6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fa4d 	bl	80071fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 fa5e 	bl	8007226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f003 0304 	and.w	r3, r3, #4
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d020      	beq.n	8006dbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01b      	beq.n	8006dbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f06f 0204 	mvn.w	r2, #4
 8006d8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2202      	movs	r2, #2
 8006d92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699b      	ldr	r3, [r3, #24]
 8006d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fa35 	bl	8007212 <HAL_TIM_IC_CaptureCallback>
 8006da8:	e005      	b.n	8006db6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fa27 	bl	80071fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fa38 	bl	8007226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d020      	beq.n	8006e08 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f003 0308 	and.w	r3, r3, #8
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01b      	beq.n	8006e08 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f06f 0208 	mvn.w	r2, #8
 8006dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2204      	movs	r2, #4
 8006dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	f003 0303 	and.w	r3, r3, #3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fa0f 	bl	8007212 <HAL_TIM_IC_CaptureCallback>
 8006df4:	e005      	b.n	8006e02 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 fa01 	bl	80071fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 fa12 	bl	8007226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f003 0310 	and.w	r3, r3, #16
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d020      	beq.n	8006e54 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f003 0310 	and.w	r3, r3, #16
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d01b      	beq.n	8006e54 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f06f 0210 	mvn.w	r2, #16
 8006e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2208      	movs	r2, #8
 8006e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d003      	beq.n	8006e42 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 f9e9 	bl	8007212 <HAL_TIM_IC_CaptureCallback>
 8006e40:	e005      	b.n	8006e4e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f9db 	bl	80071fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f000 f9ec 	bl	8007226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00c      	beq.n	8006e78 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d007      	beq.n	8006e78 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f06f 0201 	mvn.w	r2, #1
 8006e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7fa fa14 	bl	80012a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00c      	beq.n	8006e9c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d007      	beq.n	8006e9c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fd76 	bl	8007988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00c      	beq.n	8006ec0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d007      	beq.n	8006ec0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f9bd 	bl	800723a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f003 0320 	and.w	r3, r3, #32
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d00c      	beq.n	8006ee4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	f003 0320 	and.w	r3, r3, #32
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d007      	beq.n	8006ee4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f06f 0220 	mvn.w	r2, #32
 8006edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fd48 	bl	8007974 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	3710      	adds	r7, #16
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d101      	bne.n	8006f0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006f06:	2302      	movs	r3, #2
 8006f08:	e0ae      	b.n	8007068 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b0c      	cmp	r3, #12
 8006f16:	f200 809f 	bhi.w	8007058 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8006f20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f20:	08006f55 	.word	0x08006f55
 8006f24:	08007059 	.word	0x08007059
 8006f28:	08007059 	.word	0x08007059
 8006f2c:	08007059 	.word	0x08007059
 8006f30:	08006f95 	.word	0x08006f95
 8006f34:	08007059 	.word	0x08007059
 8006f38:	08007059 	.word	0x08007059
 8006f3c:	08007059 	.word	0x08007059
 8006f40:	08006fd7 	.word	0x08006fd7
 8006f44:	08007059 	.word	0x08007059
 8006f48:	08007059 	.word	0x08007059
 8006f4c:	08007059 	.word	0x08007059
 8006f50:	08007017 	.word	0x08007017
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	68b9      	ldr	r1, [r7, #8]
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f000 f9fe 	bl	800735c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699a      	ldr	r2, [r3, #24]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0208 	orr.w	r2, r2, #8
 8006f6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	699a      	ldr	r2, [r3, #24]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0204 	bic.w	r2, r2, #4
 8006f7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6999      	ldr	r1, [r3, #24]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	691a      	ldr	r2, [r3, #16]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	619a      	str	r2, [r3, #24]
      break;
 8006f92:	e064      	b.n	800705e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68b9      	ldr	r1, [r7, #8]
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f000 fa44 	bl	8007428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699a      	ldr	r2, [r3, #24]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006fae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699a      	ldr	r2, [r3, #24]
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	6999      	ldr	r1, [r3, #24]
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	021a      	lsls	r2, r3, #8
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	430a      	orrs	r2, r1
 8006fd2:	619a      	str	r2, [r3, #24]
      break;
 8006fd4:	e043      	b.n	800705e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68b9      	ldr	r1, [r7, #8]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f000 fa8f 	bl	8007500 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	69da      	ldr	r2, [r3, #28]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f042 0208 	orr.w	r2, r2, #8
 8006ff0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69da      	ldr	r2, [r3, #28]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0204 	bic.w	r2, r2, #4
 8007000:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	69d9      	ldr	r1, [r3, #28]
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	691a      	ldr	r2, [r3, #16]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	430a      	orrs	r2, r1
 8007012:	61da      	str	r2, [r3, #28]
      break;
 8007014:	e023      	b.n	800705e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	4618      	mov	r0, r3
 800701e:	f000 fad9 	bl	80075d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69da      	ldr	r2, [r3, #28]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007030:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	69da      	ldr	r2, [r3, #28]
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007040:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69d9      	ldr	r1, [r3, #28]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	691b      	ldr	r3, [r3, #16]
 800704c:	021a      	lsls	r2, r3, #8
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	430a      	orrs	r2, r1
 8007054:	61da      	str	r2, [r3, #28]
      break;
 8007056:	e002      	b.n	800705e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	75fb      	strb	r3, [r7, #23]
      break;
 800705c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007066:	7dfb      	ldrb	r3, [r7, #23]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_TIM_ConfigClockSource+0x1c>
 8007088:	2302      	movs	r3, #2
 800708a:	e0b4      	b.n	80071f6 <HAL_TIM_ConfigClockSource+0x186>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80070aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80070b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070c4:	d03e      	beq.n	8007144 <HAL_TIM_ConfigClockSource+0xd4>
 80070c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80070ca:	f200 8087 	bhi.w	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 80070ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070d2:	f000 8086 	beq.w	80071e2 <HAL_TIM_ConfigClockSource+0x172>
 80070d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070da:	d87f      	bhi.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 80070dc:	2b70      	cmp	r3, #112	@ 0x70
 80070de:	d01a      	beq.n	8007116 <HAL_TIM_ConfigClockSource+0xa6>
 80070e0:	2b70      	cmp	r3, #112	@ 0x70
 80070e2:	d87b      	bhi.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 80070e4:	2b60      	cmp	r3, #96	@ 0x60
 80070e6:	d050      	beq.n	800718a <HAL_TIM_ConfigClockSource+0x11a>
 80070e8:	2b60      	cmp	r3, #96	@ 0x60
 80070ea:	d877      	bhi.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 80070ec:	2b50      	cmp	r3, #80	@ 0x50
 80070ee:	d03c      	beq.n	800716a <HAL_TIM_ConfigClockSource+0xfa>
 80070f0:	2b50      	cmp	r3, #80	@ 0x50
 80070f2:	d873      	bhi.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 80070f4:	2b40      	cmp	r3, #64	@ 0x40
 80070f6:	d058      	beq.n	80071aa <HAL_TIM_ConfigClockSource+0x13a>
 80070f8:	2b40      	cmp	r3, #64	@ 0x40
 80070fa:	d86f      	bhi.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 80070fc:	2b30      	cmp	r3, #48	@ 0x30
 80070fe:	d064      	beq.n	80071ca <HAL_TIM_ConfigClockSource+0x15a>
 8007100:	2b30      	cmp	r3, #48	@ 0x30
 8007102:	d86b      	bhi.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 8007104:	2b20      	cmp	r3, #32
 8007106:	d060      	beq.n	80071ca <HAL_TIM_ConfigClockSource+0x15a>
 8007108:	2b20      	cmp	r3, #32
 800710a:	d867      	bhi.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
 800710c:	2b00      	cmp	r3, #0
 800710e:	d05c      	beq.n	80071ca <HAL_TIM_ConfigClockSource+0x15a>
 8007110:	2b10      	cmp	r3, #16
 8007112:	d05a      	beq.n	80071ca <HAL_TIM_ConfigClockSource+0x15a>
 8007114:	e062      	b.n	80071dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007126:	f000 fb1f 	bl	8007768 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	609a      	str	r2, [r3, #8]
      break;
 8007142:	e04f      	b.n	80071e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007154:	f000 fb08 	bl	8007768 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689a      	ldr	r2, [r3, #8]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007166:	609a      	str	r2, [r3, #8]
      break;
 8007168:	e03c      	b.n	80071e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007176:	461a      	mov	r2, r3
 8007178:	f000 fa7c 	bl	8007674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2150      	movs	r1, #80	@ 0x50
 8007182:	4618      	mov	r0, r3
 8007184:	f000 fad5 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 8007188:	e02c      	b.n	80071e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007196:	461a      	mov	r2, r3
 8007198:	f000 fa9b 	bl	80076d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2160      	movs	r1, #96	@ 0x60
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fac5 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 80071a8:	e01c      	b.n	80071e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071b6:	461a      	mov	r2, r3
 80071b8:	f000 fa5c 	bl	8007674 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2140      	movs	r1, #64	@ 0x40
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fab5 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 80071c8:	e00c      	b.n	80071e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4619      	mov	r1, r3
 80071d4:	4610      	mov	r0, r2
 80071d6:	f000 faac 	bl	8007732 <TIM_ITRx_SetConfig>
      break;
 80071da:	e003      	b.n	80071e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	73fb      	strb	r3, [r7, #15]
      break;
 80071e0:	e000      	b.n	80071e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80071e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80071fe:	b480      	push	{r7}
 8007200:	b083      	sub	sp, #12
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007206:	bf00      	nop
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007212:	b480      	push	{r7}
 8007214:	b083      	sub	sp, #12
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800722e:	bf00      	nop
 8007230:	370c      	adds	r7, #12
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800723a:	b480      	push	{r7}
 800723c:	b083      	sub	sp, #12
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007242:	bf00      	nop
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr
	...

08007250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a37      	ldr	r2, [pc, #220]	@ (8007340 <TIM_Base_SetConfig+0xf0>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d00f      	beq.n	8007288 <TIM_Base_SetConfig+0x38>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800726e:	d00b      	beq.n	8007288 <TIM_Base_SetConfig+0x38>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a34      	ldr	r2, [pc, #208]	@ (8007344 <TIM_Base_SetConfig+0xf4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d007      	beq.n	8007288 <TIM_Base_SetConfig+0x38>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a33      	ldr	r2, [pc, #204]	@ (8007348 <TIM_Base_SetConfig+0xf8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d003      	beq.n	8007288 <TIM_Base_SetConfig+0x38>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a32      	ldr	r2, [pc, #200]	@ (800734c <TIM_Base_SetConfig+0xfc>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d108      	bne.n	800729a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800728e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a28      	ldr	r2, [pc, #160]	@ (8007340 <TIM_Base_SetConfig+0xf0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d01b      	beq.n	80072da <TIM_Base_SetConfig+0x8a>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072a8:	d017      	beq.n	80072da <TIM_Base_SetConfig+0x8a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4a25      	ldr	r2, [pc, #148]	@ (8007344 <TIM_Base_SetConfig+0xf4>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d013      	beq.n	80072da <TIM_Base_SetConfig+0x8a>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a24      	ldr	r2, [pc, #144]	@ (8007348 <TIM_Base_SetConfig+0xf8>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d00f      	beq.n	80072da <TIM_Base_SetConfig+0x8a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a23      	ldr	r2, [pc, #140]	@ (800734c <TIM_Base_SetConfig+0xfc>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d00b      	beq.n	80072da <TIM_Base_SetConfig+0x8a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a22      	ldr	r2, [pc, #136]	@ (8007350 <TIM_Base_SetConfig+0x100>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d007      	beq.n	80072da <TIM_Base_SetConfig+0x8a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a21      	ldr	r2, [pc, #132]	@ (8007354 <TIM_Base_SetConfig+0x104>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d003      	beq.n	80072da <TIM_Base_SetConfig+0x8a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a20      	ldr	r2, [pc, #128]	@ (8007358 <TIM_Base_SetConfig+0x108>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d108      	bne.n	80072ec <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	4313      	orrs	r3, r2
 80072ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	689a      	ldr	r2, [r3, #8]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a0c      	ldr	r2, [pc, #48]	@ (8007340 <TIM_Base_SetConfig+0xf0>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d103      	bne.n	800731a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	691a      	ldr	r2, [r3, #16]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f043 0204 	orr.w	r2, r3, #4
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	601a      	str	r2, [r3, #0]
}
 8007332:	bf00      	nop
 8007334:	3714      	adds	r7, #20
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	40010000 	.word	0x40010000
 8007344:	40000400 	.word	0x40000400
 8007348:	40000800 	.word	0x40000800
 800734c:	40000c00 	.word	0x40000c00
 8007350:	40014000 	.word	0x40014000
 8007354:	40014400 	.word	0x40014400
 8007358:	40014800 	.word	0x40014800

0800735c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	f023 0201 	bic.w	r2, r3, #1
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800738a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f023 0303 	bic.w	r3, r3, #3
 8007392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	4313      	orrs	r3, r2
 800739c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f023 0302 	bic.w	r3, r3, #2
 80073a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a1c      	ldr	r2, [pc, #112]	@ (8007424 <TIM_OC1_SetConfig+0xc8>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d10c      	bne.n	80073d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	f023 0308 	bic.w	r3, r3, #8
 80073be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	4313      	orrs	r3, r2
 80073c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	f023 0304 	bic.w	r3, r3, #4
 80073d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a13      	ldr	r2, [pc, #76]	@ (8007424 <TIM_OC1_SetConfig+0xc8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d111      	bne.n	80073fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	693a      	ldr	r2, [r7, #16]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	693a      	ldr	r2, [r7, #16]
 8007402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	685a      	ldr	r2, [r3, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	621a      	str	r2, [r3, #32]
}
 8007418:	bf00      	nop
 800741a:	371c      	adds	r7, #28
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	40010000 	.word	0x40010000

08007428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a1b      	ldr	r3, [r3, #32]
 8007436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a1b      	ldr	r3, [r3, #32]
 800743c:	f023 0210 	bic.w	r2, r3, #16
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800745e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	021b      	lsls	r3, r3, #8
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	4313      	orrs	r3, r2
 800746a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	f023 0320 	bic.w	r3, r3, #32
 8007472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	011b      	lsls	r3, r3, #4
 800747a:	697a      	ldr	r2, [r7, #20]
 800747c:	4313      	orrs	r3, r2
 800747e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a1e      	ldr	r2, [pc, #120]	@ (80074fc <TIM_OC2_SetConfig+0xd4>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d10d      	bne.n	80074a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800748e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	011b      	lsls	r3, r3, #4
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	4313      	orrs	r3, r2
 800749a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a15      	ldr	r2, [pc, #84]	@ (80074fc <TIM_OC2_SetConfig+0xd4>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d113      	bne.n	80074d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	693a      	ldr	r2, [r7, #16]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68fa      	ldr	r2, [r7, #12]
 80074de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685a      	ldr	r2, [r3, #4]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	621a      	str	r2, [r3, #32]
}
 80074ee:	bf00      	nop
 80074f0:	371c      	adds	r7, #28
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	40010000 	.word	0x40010000

08007500 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a1b      	ldr	r3, [r3, #32]
 8007514:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800752e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f023 0303 	bic.w	r3, r3, #3
 8007536:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68fa      	ldr	r2, [r7, #12]
 800753e:	4313      	orrs	r3, r2
 8007540:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007548:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	021b      	lsls	r3, r3, #8
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	4313      	orrs	r3, r2
 8007554:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a1d      	ldr	r2, [pc, #116]	@ (80075d0 <TIM_OC3_SetConfig+0xd0>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d10d      	bne.n	800757a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007564:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	021b      	lsls	r3, r3, #8
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	4313      	orrs	r3, r2
 8007570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	4a14      	ldr	r2, [pc, #80]	@ (80075d0 <TIM_OC3_SetConfig+0xd0>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d113      	bne.n	80075aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	695b      	ldr	r3, [r3, #20]
 8007596:	011b      	lsls	r3, r3, #4
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	4313      	orrs	r3, r2
 800759c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	699b      	ldr	r3, [r3, #24]
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	621a      	str	r2, [r3, #32]
}
 80075c4:	bf00      	nop
 80075c6:	371c      	adds	r7, #28
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	40010000 	.word	0x40010000

080075d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800760a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	021b      	lsls	r3, r3, #8
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	4313      	orrs	r3, r2
 8007616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800761e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	031b      	lsls	r3, r3, #12
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4313      	orrs	r3, r2
 800762a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a10      	ldr	r2, [pc, #64]	@ (8007670 <TIM_OC4_SetConfig+0x9c>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d109      	bne.n	8007648 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800763a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	695b      	ldr	r3, [r3, #20]
 8007640:	019b      	lsls	r3, r3, #6
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	693a      	ldr	r2, [r7, #16]
 8007660:	621a      	str	r2, [r3, #32]
}
 8007662:	bf00      	nop
 8007664:	371c      	adds	r7, #28
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	40010000 	.word	0x40010000

08007674 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007674:	b480      	push	{r7}
 8007676:	b087      	sub	sp, #28
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	f023 0201 	bic.w	r2, r3, #1
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800769e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f023 030a 	bic.w	r3, r3, #10
 80076b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	697a      	ldr	r2, [r7, #20]
 80076c4:	621a      	str	r2, [r3, #32]
}
 80076c6:	bf00      	nop
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b087      	sub	sp, #28
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	6a1b      	ldr	r3, [r3, #32]
 80076e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	f023 0210 	bic.w	r2, r3, #16
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	699b      	ldr	r3, [r3, #24]
 80076f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80076fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	031b      	lsls	r3, r3, #12
 8007702:	693a      	ldr	r2, [r7, #16]
 8007704:	4313      	orrs	r3, r2
 8007706:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800770e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	011b      	lsls	r3, r3, #4
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	4313      	orrs	r3, r2
 8007718:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	621a      	str	r2, [r3, #32]
}
 8007726:	bf00      	nop
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007732:	b480      	push	{r7}
 8007734:	b085      	sub	sp, #20
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007748:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	4313      	orrs	r3, r2
 8007750:	f043 0307 	orr.w	r3, r3, #7
 8007754:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	609a      	str	r2, [r3, #8]
}
 800775c:	bf00      	nop
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007782:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	021a      	lsls	r2, r3, #8
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	431a      	orrs	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	4313      	orrs	r3, r2
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	609a      	str	r2, [r3, #8]
}
 800779c:	bf00      	nop
 800779e:	371c      	adds	r7, #28
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b087      	sub	sp, #28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f003 031f 	and.w	r3, r3, #31
 80077ba:	2201      	movs	r2, #1
 80077bc:	fa02 f303 	lsl.w	r3, r2, r3
 80077c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	6a1a      	ldr	r2, [r3, #32]
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	43db      	mvns	r3, r3
 80077ca:	401a      	ands	r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6a1a      	ldr	r2, [r3, #32]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f003 031f 	and.w	r3, r3, #31
 80077da:	6879      	ldr	r1, [r7, #4]
 80077dc:	fa01 f303 	lsl.w	r3, r1, r3
 80077e0:	431a      	orrs	r2, r3
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	621a      	str	r2, [r3, #32]
}
 80077e6:	bf00      	nop
 80077e8:	371c      	adds	r7, #28
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
	...

080077f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007804:	2b01      	cmp	r3, #1
 8007806:	d101      	bne.n	800780c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007808:	2302      	movs	r3, #2
 800780a:	e050      	b.n	80078ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	4313      	orrs	r3, r2
 800783c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	4a1c      	ldr	r2, [pc, #112]	@ (80078bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800784c:	4293      	cmp	r3, r2
 800784e:	d018      	beq.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007858:	d013      	beq.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a18      	ldr	r2, [pc, #96]	@ (80078c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d00e      	beq.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a16      	ldr	r2, [pc, #88]	@ (80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d009      	beq.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a15      	ldr	r2, [pc, #84]	@ (80078c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d004      	beq.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a13      	ldr	r2, [pc, #76]	@ (80078cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d10c      	bne.n	800789c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007888:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	4313      	orrs	r3, r2
 8007892:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3714      	adds	r7, #20
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	40010000 	.word	0x40010000
 80078c0:	40000400 	.word	0x40000400
 80078c4:	40000800 	.word	0x40000800
 80078c8:	40000c00 	.word	0x40000c00
 80078cc:	40014000 	.word	0x40014000

080078d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d101      	bne.n	80078ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078e8:	2302      	movs	r3, #2
 80078ea:	e03d      	b.n	8007968 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	68db      	ldr	r3, [r3, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	4313      	orrs	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	4313      	orrs	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	4313      	orrs	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	4313      	orrs	r3, r2
 8007946:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	69db      	ldr	r3, [r3, #28]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800797c:	bf00      	nop
 800797e:	370c      	adds	r7, #12
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b082      	sub	sp, #8
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e042      	b.n	8007a34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d106      	bne.n	80079c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f7fb feac 	bl	8003720 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2224      	movs	r2, #36	@ 0x24
 80079cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	68da      	ldr	r2, [r3, #12]
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f82b 	bl	8007a3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	691a      	ldr	r2, [r3, #16]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80079f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	695a      	ldr	r2, [r3, #20]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3708      	adds	r7, #8
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a40:	b0c0      	sub	sp, #256	@ 0x100
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	691b      	ldr	r3, [r3, #16]
 8007a50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a58:	68d9      	ldr	r1, [r3, #12]
 8007a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	ea40 0301 	orr.w	r3, r0, r1
 8007a64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a6a:	689a      	ldr	r2, [r3, #8]
 8007a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a70:	691b      	ldr	r3, [r3, #16]
 8007a72:	431a      	orrs	r2, r3
 8007a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a80:	69db      	ldr	r3, [r3, #28]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007a94:	f021 010c 	bic.w	r1, r1, #12
 8007a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007aa2:	430b      	orrs	r3, r1
 8007aa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ab6:	6999      	ldr	r1, [r3, #24]
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	ea40 0301 	orr.w	r3, r0, r1
 8007ac2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	4b8f      	ldr	r3, [pc, #572]	@ (8007d08 <UART_SetConfig+0x2cc>)
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d005      	beq.n	8007adc <UART_SetConfig+0xa0>
 8007ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	4b8d      	ldr	r3, [pc, #564]	@ (8007d0c <UART_SetConfig+0x2d0>)
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d104      	bne.n	8007ae6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007adc:	f7fe fa5a 	bl	8005f94 <HAL_RCC_GetPCLK2Freq>
 8007ae0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007ae4:	e003      	b.n	8007aee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007ae6:	f7fe fa41 	bl	8005f6c <HAL_RCC_GetPCLK1Freq>
 8007aea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007af8:	f040 810c 	bne.w	8007d14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007b06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007b0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007b0e:	4622      	mov	r2, r4
 8007b10:	462b      	mov	r3, r5
 8007b12:	1891      	adds	r1, r2, r2
 8007b14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007b16:	415b      	adcs	r3, r3
 8007b18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007b1e:	4621      	mov	r1, r4
 8007b20:	eb12 0801 	adds.w	r8, r2, r1
 8007b24:	4629      	mov	r1, r5
 8007b26:	eb43 0901 	adc.w	r9, r3, r1
 8007b2a:	f04f 0200 	mov.w	r2, #0
 8007b2e:	f04f 0300 	mov.w	r3, #0
 8007b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b3e:	4690      	mov	r8, r2
 8007b40:	4699      	mov	r9, r3
 8007b42:	4623      	mov	r3, r4
 8007b44:	eb18 0303 	adds.w	r3, r8, r3
 8007b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007b4c:	462b      	mov	r3, r5
 8007b4e:	eb49 0303 	adc.w	r3, r9, r3
 8007b52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007b62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007b66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	18db      	adds	r3, r3, r3
 8007b6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b70:	4613      	mov	r3, r2
 8007b72:	eb42 0303 	adc.w	r3, r2, r3
 8007b76:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007b7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007b80:	f7f8 ff74 	bl	8000a6c <__aeabi_uldivmod>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4b61      	ldr	r3, [pc, #388]	@ (8007d10 <UART_SetConfig+0x2d4>)
 8007b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b8e:	095b      	lsrs	r3, r3, #5
 8007b90:	011c      	lsls	r4, r3, #4
 8007b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b96:	2200      	movs	r2, #0
 8007b98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007ba0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007ba4:	4642      	mov	r2, r8
 8007ba6:	464b      	mov	r3, r9
 8007ba8:	1891      	adds	r1, r2, r2
 8007baa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007bac:	415b      	adcs	r3, r3
 8007bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007bb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007bb4:	4641      	mov	r1, r8
 8007bb6:	eb12 0a01 	adds.w	sl, r2, r1
 8007bba:	4649      	mov	r1, r9
 8007bbc:	eb43 0b01 	adc.w	fp, r3, r1
 8007bc0:	f04f 0200 	mov.w	r2, #0
 8007bc4:	f04f 0300 	mov.w	r3, #0
 8007bc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007bcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007bd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007bd4:	4692      	mov	sl, r2
 8007bd6:	469b      	mov	fp, r3
 8007bd8:	4643      	mov	r3, r8
 8007bda:	eb1a 0303 	adds.w	r3, sl, r3
 8007bde:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007be2:	464b      	mov	r3, r9
 8007be4:	eb4b 0303 	adc.w	r3, fp, r3
 8007be8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bf8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007bfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c00:	460b      	mov	r3, r1
 8007c02:	18db      	adds	r3, r3, r3
 8007c04:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c06:	4613      	mov	r3, r2
 8007c08:	eb42 0303 	adc.w	r3, r2, r3
 8007c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007c12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007c16:	f7f8 ff29 	bl	8000a6c <__aeabi_uldivmod>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4611      	mov	r1, r2
 8007c20:	4b3b      	ldr	r3, [pc, #236]	@ (8007d10 <UART_SetConfig+0x2d4>)
 8007c22:	fba3 2301 	umull	r2, r3, r3, r1
 8007c26:	095b      	lsrs	r3, r3, #5
 8007c28:	2264      	movs	r2, #100	@ 0x64
 8007c2a:	fb02 f303 	mul.w	r3, r2, r3
 8007c2e:	1acb      	subs	r3, r1, r3
 8007c30:	00db      	lsls	r3, r3, #3
 8007c32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007c36:	4b36      	ldr	r3, [pc, #216]	@ (8007d10 <UART_SetConfig+0x2d4>)
 8007c38:	fba3 2302 	umull	r2, r3, r3, r2
 8007c3c:	095b      	lsrs	r3, r3, #5
 8007c3e:	005b      	lsls	r3, r3, #1
 8007c40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007c44:	441c      	add	r4, r3
 8007c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007c54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007c58:	4642      	mov	r2, r8
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	1891      	adds	r1, r2, r2
 8007c5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007c60:	415b      	adcs	r3, r3
 8007c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007c68:	4641      	mov	r1, r8
 8007c6a:	1851      	adds	r1, r2, r1
 8007c6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007c6e:	4649      	mov	r1, r9
 8007c70:	414b      	adcs	r3, r1
 8007c72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c74:	f04f 0200 	mov.w	r2, #0
 8007c78:	f04f 0300 	mov.w	r3, #0
 8007c7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007c80:	4659      	mov	r1, fp
 8007c82:	00cb      	lsls	r3, r1, #3
 8007c84:	4651      	mov	r1, sl
 8007c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c8a:	4651      	mov	r1, sl
 8007c8c:	00ca      	lsls	r2, r1, #3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	4619      	mov	r1, r3
 8007c92:	4603      	mov	r3, r0
 8007c94:	4642      	mov	r2, r8
 8007c96:	189b      	adds	r3, r3, r2
 8007c98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007c9c:	464b      	mov	r3, r9
 8007c9e:	460a      	mov	r2, r1
 8007ca0:	eb42 0303 	adc.w	r3, r2, r3
 8007ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007cb4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007cb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	18db      	adds	r3, r3, r3
 8007cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	eb42 0303 	adc.w	r3, r2, r3
 8007cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007cce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007cd2:	f7f8 fecb 	bl	8000a6c <__aeabi_uldivmod>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4b0d      	ldr	r3, [pc, #52]	@ (8007d10 <UART_SetConfig+0x2d4>)
 8007cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8007ce0:	095b      	lsrs	r3, r3, #5
 8007ce2:	2164      	movs	r1, #100	@ 0x64
 8007ce4:	fb01 f303 	mul.w	r3, r1, r3
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	3332      	adds	r3, #50	@ 0x32
 8007cee:	4a08      	ldr	r2, [pc, #32]	@ (8007d10 <UART_SetConfig+0x2d4>)
 8007cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cf4:	095b      	lsrs	r3, r3, #5
 8007cf6:	f003 0207 	and.w	r2, r3, #7
 8007cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4422      	add	r2, r4
 8007d02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d04:	e106      	b.n	8007f14 <UART_SetConfig+0x4d8>
 8007d06:	bf00      	nop
 8007d08:	40011000 	.word	0x40011000
 8007d0c:	40011400 	.word	0x40011400
 8007d10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007d1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007d22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007d26:	4642      	mov	r2, r8
 8007d28:	464b      	mov	r3, r9
 8007d2a:	1891      	adds	r1, r2, r2
 8007d2c:	6239      	str	r1, [r7, #32]
 8007d2e:	415b      	adcs	r3, r3
 8007d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d36:	4641      	mov	r1, r8
 8007d38:	1854      	adds	r4, r2, r1
 8007d3a:	4649      	mov	r1, r9
 8007d3c:	eb43 0501 	adc.w	r5, r3, r1
 8007d40:	f04f 0200 	mov.w	r2, #0
 8007d44:	f04f 0300 	mov.w	r3, #0
 8007d48:	00eb      	lsls	r3, r5, #3
 8007d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d4e:	00e2      	lsls	r2, r4, #3
 8007d50:	4614      	mov	r4, r2
 8007d52:	461d      	mov	r5, r3
 8007d54:	4643      	mov	r3, r8
 8007d56:	18e3      	adds	r3, r4, r3
 8007d58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007d5c:	464b      	mov	r3, r9
 8007d5e:	eb45 0303 	adc.w	r3, r5, r3
 8007d62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007d72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007d76:	f04f 0200 	mov.w	r2, #0
 8007d7a:	f04f 0300 	mov.w	r3, #0
 8007d7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007d82:	4629      	mov	r1, r5
 8007d84:	008b      	lsls	r3, r1, #2
 8007d86:	4621      	mov	r1, r4
 8007d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d8c:	4621      	mov	r1, r4
 8007d8e:	008a      	lsls	r2, r1, #2
 8007d90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007d94:	f7f8 fe6a 	bl	8000a6c <__aeabi_uldivmod>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	4b60      	ldr	r3, [pc, #384]	@ (8007f20 <UART_SetConfig+0x4e4>)
 8007d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8007da2:	095b      	lsrs	r3, r3, #5
 8007da4:	011c      	lsls	r4, r3, #4
 8007da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007daa:	2200      	movs	r2, #0
 8007dac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007db0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007db4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007db8:	4642      	mov	r2, r8
 8007dba:	464b      	mov	r3, r9
 8007dbc:	1891      	adds	r1, r2, r2
 8007dbe:	61b9      	str	r1, [r7, #24]
 8007dc0:	415b      	adcs	r3, r3
 8007dc2:	61fb      	str	r3, [r7, #28]
 8007dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007dc8:	4641      	mov	r1, r8
 8007dca:	1851      	adds	r1, r2, r1
 8007dcc:	6139      	str	r1, [r7, #16]
 8007dce:	4649      	mov	r1, r9
 8007dd0:	414b      	adcs	r3, r1
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	f04f 0200 	mov.w	r2, #0
 8007dd8:	f04f 0300 	mov.w	r3, #0
 8007ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007de0:	4659      	mov	r1, fp
 8007de2:	00cb      	lsls	r3, r1, #3
 8007de4:	4651      	mov	r1, sl
 8007de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dea:	4651      	mov	r1, sl
 8007dec:	00ca      	lsls	r2, r1, #3
 8007dee:	4610      	mov	r0, r2
 8007df0:	4619      	mov	r1, r3
 8007df2:	4603      	mov	r3, r0
 8007df4:	4642      	mov	r2, r8
 8007df6:	189b      	adds	r3, r3, r2
 8007df8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007dfc:	464b      	mov	r3, r9
 8007dfe:	460a      	mov	r2, r1
 8007e00:	eb42 0303 	adc.w	r3, r2, r3
 8007e04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007e14:	f04f 0200 	mov.w	r2, #0
 8007e18:	f04f 0300 	mov.w	r3, #0
 8007e1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007e20:	4649      	mov	r1, r9
 8007e22:	008b      	lsls	r3, r1, #2
 8007e24:	4641      	mov	r1, r8
 8007e26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e2a:	4641      	mov	r1, r8
 8007e2c:	008a      	lsls	r2, r1, #2
 8007e2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007e32:	f7f8 fe1b 	bl	8000a6c <__aeabi_uldivmod>
 8007e36:	4602      	mov	r2, r0
 8007e38:	460b      	mov	r3, r1
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	4b38      	ldr	r3, [pc, #224]	@ (8007f20 <UART_SetConfig+0x4e4>)
 8007e3e:	fba3 2301 	umull	r2, r3, r3, r1
 8007e42:	095b      	lsrs	r3, r3, #5
 8007e44:	2264      	movs	r2, #100	@ 0x64
 8007e46:	fb02 f303 	mul.w	r3, r2, r3
 8007e4a:	1acb      	subs	r3, r1, r3
 8007e4c:	011b      	lsls	r3, r3, #4
 8007e4e:	3332      	adds	r3, #50	@ 0x32
 8007e50:	4a33      	ldr	r2, [pc, #204]	@ (8007f20 <UART_SetConfig+0x4e4>)
 8007e52:	fba2 2303 	umull	r2, r3, r2, r3
 8007e56:	095b      	lsrs	r3, r3, #5
 8007e58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007e5c:	441c      	add	r4, r3
 8007e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e62:	2200      	movs	r2, #0
 8007e64:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e66:	677a      	str	r2, [r7, #116]	@ 0x74
 8007e68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007e6c:	4642      	mov	r2, r8
 8007e6e:	464b      	mov	r3, r9
 8007e70:	1891      	adds	r1, r2, r2
 8007e72:	60b9      	str	r1, [r7, #8]
 8007e74:	415b      	adcs	r3, r3
 8007e76:	60fb      	str	r3, [r7, #12]
 8007e78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e7c:	4641      	mov	r1, r8
 8007e7e:	1851      	adds	r1, r2, r1
 8007e80:	6039      	str	r1, [r7, #0]
 8007e82:	4649      	mov	r1, r9
 8007e84:	414b      	adcs	r3, r1
 8007e86:	607b      	str	r3, [r7, #4]
 8007e88:	f04f 0200 	mov.w	r2, #0
 8007e8c:	f04f 0300 	mov.w	r3, #0
 8007e90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007e94:	4659      	mov	r1, fp
 8007e96:	00cb      	lsls	r3, r1, #3
 8007e98:	4651      	mov	r1, sl
 8007e9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e9e:	4651      	mov	r1, sl
 8007ea0:	00ca      	lsls	r2, r1, #3
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	4642      	mov	r2, r8
 8007eaa:	189b      	adds	r3, r3, r2
 8007eac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007eae:	464b      	mov	r3, r9
 8007eb0:	460a      	mov	r2, r1
 8007eb2:	eb42 0303 	adc.w	r3, r2, r3
 8007eb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ec2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007ec4:	f04f 0200 	mov.w	r2, #0
 8007ec8:	f04f 0300 	mov.w	r3, #0
 8007ecc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007ed0:	4649      	mov	r1, r9
 8007ed2:	008b      	lsls	r3, r1, #2
 8007ed4:	4641      	mov	r1, r8
 8007ed6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007eda:	4641      	mov	r1, r8
 8007edc:	008a      	lsls	r2, r1, #2
 8007ede:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007ee2:	f7f8 fdc3 	bl	8000a6c <__aeabi_uldivmod>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4b0d      	ldr	r3, [pc, #52]	@ (8007f20 <UART_SetConfig+0x4e4>)
 8007eec:	fba3 1302 	umull	r1, r3, r3, r2
 8007ef0:	095b      	lsrs	r3, r3, #5
 8007ef2:	2164      	movs	r1, #100	@ 0x64
 8007ef4:	fb01 f303 	mul.w	r3, r1, r3
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	011b      	lsls	r3, r3, #4
 8007efc:	3332      	adds	r3, #50	@ 0x32
 8007efe:	4a08      	ldr	r2, [pc, #32]	@ (8007f20 <UART_SetConfig+0x4e4>)
 8007f00:	fba2 2303 	umull	r2, r3, r2, r3
 8007f04:	095b      	lsrs	r3, r3, #5
 8007f06:	f003 020f 	and.w	r2, r3, #15
 8007f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4422      	add	r2, r4
 8007f12:	609a      	str	r2, [r3, #8]
}
 8007f14:	bf00      	nop
 8007f16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f20:	51eb851f 	.word	0x51eb851f

08007f24 <sniprintf>:
 8007f24:	b40c      	push	{r2, r3}
 8007f26:	b530      	push	{r4, r5, lr}
 8007f28:	4b18      	ldr	r3, [pc, #96]	@ (8007f8c <sniprintf+0x68>)
 8007f2a:	1e0c      	subs	r4, r1, #0
 8007f2c:	681d      	ldr	r5, [r3, #0]
 8007f2e:	b09d      	sub	sp, #116	@ 0x74
 8007f30:	da08      	bge.n	8007f44 <sniprintf+0x20>
 8007f32:	238b      	movs	r3, #139	@ 0x8b
 8007f34:	602b      	str	r3, [r5, #0]
 8007f36:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3a:	b01d      	add	sp, #116	@ 0x74
 8007f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f40:	b002      	add	sp, #8
 8007f42:	4770      	bx	lr
 8007f44:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007f48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f4c:	f04f 0300 	mov.w	r3, #0
 8007f50:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007f52:	bf14      	ite	ne
 8007f54:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007f58:	4623      	moveq	r3, r4
 8007f5a:	9304      	str	r3, [sp, #16]
 8007f5c:	9307      	str	r3, [sp, #28]
 8007f5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007f62:	9002      	str	r0, [sp, #8]
 8007f64:	9006      	str	r0, [sp, #24]
 8007f66:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007f6a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007f6c:	ab21      	add	r3, sp, #132	@ 0x84
 8007f6e:	a902      	add	r1, sp, #8
 8007f70:	4628      	mov	r0, r5
 8007f72:	9301      	str	r3, [sp, #4]
 8007f74:	f000 f9bc 	bl	80082f0 <_svfiprintf_r>
 8007f78:	1c43      	adds	r3, r0, #1
 8007f7a:	bfbc      	itt	lt
 8007f7c:	238b      	movlt	r3, #139	@ 0x8b
 8007f7e:	602b      	strlt	r3, [r5, #0]
 8007f80:	2c00      	cmp	r4, #0
 8007f82:	d0da      	beq.n	8007f3a <sniprintf+0x16>
 8007f84:	9b02      	ldr	r3, [sp, #8]
 8007f86:	2200      	movs	r2, #0
 8007f88:	701a      	strb	r2, [r3, #0]
 8007f8a:	e7d6      	b.n	8007f3a <sniprintf+0x16>
 8007f8c:	2000000c 	.word	0x2000000c

08007f90 <memmove>:
 8007f90:	4288      	cmp	r0, r1
 8007f92:	b510      	push	{r4, lr}
 8007f94:	eb01 0402 	add.w	r4, r1, r2
 8007f98:	d902      	bls.n	8007fa0 <memmove+0x10>
 8007f9a:	4284      	cmp	r4, r0
 8007f9c:	4623      	mov	r3, r4
 8007f9e:	d807      	bhi.n	8007fb0 <memmove+0x20>
 8007fa0:	1e43      	subs	r3, r0, #1
 8007fa2:	42a1      	cmp	r1, r4
 8007fa4:	d008      	beq.n	8007fb8 <memmove+0x28>
 8007fa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007faa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007fae:	e7f8      	b.n	8007fa2 <memmove+0x12>
 8007fb0:	4402      	add	r2, r0
 8007fb2:	4601      	mov	r1, r0
 8007fb4:	428a      	cmp	r2, r1
 8007fb6:	d100      	bne.n	8007fba <memmove+0x2a>
 8007fb8:	bd10      	pop	{r4, pc}
 8007fba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007fbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007fc2:	e7f7      	b.n	8007fb4 <memmove+0x24>

08007fc4 <memset>:
 8007fc4:	4402      	add	r2, r0
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d100      	bne.n	8007fce <memset+0xa>
 8007fcc:	4770      	bx	lr
 8007fce:	f803 1b01 	strb.w	r1, [r3], #1
 8007fd2:	e7f9      	b.n	8007fc8 <memset+0x4>

08007fd4 <__errno>:
 8007fd4:	4b01      	ldr	r3, [pc, #4]	@ (8007fdc <__errno+0x8>)
 8007fd6:	6818      	ldr	r0, [r3, #0]
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	2000000c 	.word	0x2000000c

08007fe0 <__libc_init_array>:
 8007fe0:	b570      	push	{r4, r5, r6, lr}
 8007fe2:	4d0d      	ldr	r5, [pc, #52]	@ (8008018 <__libc_init_array+0x38>)
 8007fe4:	4c0d      	ldr	r4, [pc, #52]	@ (800801c <__libc_init_array+0x3c>)
 8007fe6:	1b64      	subs	r4, r4, r5
 8007fe8:	10a4      	asrs	r4, r4, #2
 8007fea:	2600      	movs	r6, #0
 8007fec:	42a6      	cmp	r6, r4
 8007fee:	d109      	bne.n	8008004 <__libc_init_array+0x24>
 8007ff0:	4d0b      	ldr	r5, [pc, #44]	@ (8008020 <__libc_init_array+0x40>)
 8007ff2:	4c0c      	ldr	r4, [pc, #48]	@ (8008024 <__libc_init_array+0x44>)
 8007ff4:	f001 f9be 	bl	8009374 <_init>
 8007ff8:	1b64      	subs	r4, r4, r5
 8007ffa:	10a4      	asrs	r4, r4, #2
 8007ffc:	2600      	movs	r6, #0
 8007ffe:	42a6      	cmp	r6, r4
 8008000:	d105      	bne.n	800800e <__libc_init_array+0x2e>
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	f855 3b04 	ldr.w	r3, [r5], #4
 8008008:	4798      	blx	r3
 800800a:	3601      	adds	r6, #1
 800800c:	e7ee      	b.n	8007fec <__libc_init_array+0xc>
 800800e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008012:	4798      	blx	r3
 8008014:	3601      	adds	r6, #1
 8008016:	e7f2      	b.n	8007ffe <__libc_init_array+0x1e>
 8008018:	0800ea20 	.word	0x0800ea20
 800801c:	0800ea20 	.word	0x0800ea20
 8008020:	0800ea20 	.word	0x0800ea20
 8008024:	0800ea24 	.word	0x0800ea24

08008028 <__retarget_lock_acquire_recursive>:
 8008028:	4770      	bx	lr

0800802a <__retarget_lock_release_recursive>:
 800802a:	4770      	bx	lr

0800802c <memcpy>:
 800802c:	440a      	add	r2, r1
 800802e:	4291      	cmp	r1, r2
 8008030:	f100 33ff 	add.w	r3, r0, #4294967295
 8008034:	d100      	bne.n	8008038 <memcpy+0xc>
 8008036:	4770      	bx	lr
 8008038:	b510      	push	{r4, lr}
 800803a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800803e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008042:	4291      	cmp	r1, r2
 8008044:	d1f9      	bne.n	800803a <memcpy+0xe>
 8008046:	bd10      	pop	{r4, pc}

08008048 <_free_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4605      	mov	r5, r0
 800804c:	2900      	cmp	r1, #0
 800804e:	d041      	beq.n	80080d4 <_free_r+0x8c>
 8008050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008054:	1f0c      	subs	r4, r1, #4
 8008056:	2b00      	cmp	r3, #0
 8008058:	bfb8      	it	lt
 800805a:	18e4      	addlt	r4, r4, r3
 800805c:	f000 f8e0 	bl	8008220 <__malloc_lock>
 8008060:	4a1d      	ldr	r2, [pc, #116]	@ (80080d8 <_free_r+0x90>)
 8008062:	6813      	ldr	r3, [r2, #0]
 8008064:	b933      	cbnz	r3, 8008074 <_free_r+0x2c>
 8008066:	6063      	str	r3, [r4, #4]
 8008068:	6014      	str	r4, [r2, #0]
 800806a:	4628      	mov	r0, r5
 800806c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008070:	f000 b8dc 	b.w	800822c <__malloc_unlock>
 8008074:	42a3      	cmp	r3, r4
 8008076:	d908      	bls.n	800808a <_free_r+0x42>
 8008078:	6820      	ldr	r0, [r4, #0]
 800807a:	1821      	adds	r1, r4, r0
 800807c:	428b      	cmp	r3, r1
 800807e:	bf01      	itttt	eq
 8008080:	6819      	ldreq	r1, [r3, #0]
 8008082:	685b      	ldreq	r3, [r3, #4]
 8008084:	1809      	addeq	r1, r1, r0
 8008086:	6021      	streq	r1, [r4, #0]
 8008088:	e7ed      	b.n	8008066 <_free_r+0x1e>
 800808a:	461a      	mov	r2, r3
 800808c:	685b      	ldr	r3, [r3, #4]
 800808e:	b10b      	cbz	r3, 8008094 <_free_r+0x4c>
 8008090:	42a3      	cmp	r3, r4
 8008092:	d9fa      	bls.n	800808a <_free_r+0x42>
 8008094:	6811      	ldr	r1, [r2, #0]
 8008096:	1850      	adds	r0, r2, r1
 8008098:	42a0      	cmp	r0, r4
 800809a:	d10b      	bne.n	80080b4 <_free_r+0x6c>
 800809c:	6820      	ldr	r0, [r4, #0]
 800809e:	4401      	add	r1, r0
 80080a0:	1850      	adds	r0, r2, r1
 80080a2:	4283      	cmp	r3, r0
 80080a4:	6011      	str	r1, [r2, #0]
 80080a6:	d1e0      	bne.n	800806a <_free_r+0x22>
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	6053      	str	r3, [r2, #4]
 80080ae:	4408      	add	r0, r1
 80080b0:	6010      	str	r0, [r2, #0]
 80080b2:	e7da      	b.n	800806a <_free_r+0x22>
 80080b4:	d902      	bls.n	80080bc <_free_r+0x74>
 80080b6:	230c      	movs	r3, #12
 80080b8:	602b      	str	r3, [r5, #0]
 80080ba:	e7d6      	b.n	800806a <_free_r+0x22>
 80080bc:	6820      	ldr	r0, [r4, #0]
 80080be:	1821      	adds	r1, r4, r0
 80080c0:	428b      	cmp	r3, r1
 80080c2:	bf04      	itt	eq
 80080c4:	6819      	ldreq	r1, [r3, #0]
 80080c6:	685b      	ldreq	r3, [r3, #4]
 80080c8:	6063      	str	r3, [r4, #4]
 80080ca:	bf04      	itt	eq
 80080cc:	1809      	addeq	r1, r1, r0
 80080ce:	6021      	streq	r1, [r4, #0]
 80080d0:	6054      	str	r4, [r2, #4]
 80080d2:	e7ca      	b.n	800806a <_free_r+0x22>
 80080d4:	bd38      	pop	{r3, r4, r5, pc}
 80080d6:	bf00      	nop
 80080d8:	20000914 	.word	0x20000914

080080dc <sbrk_aligned>:
 80080dc:	b570      	push	{r4, r5, r6, lr}
 80080de:	4e0f      	ldr	r6, [pc, #60]	@ (800811c <sbrk_aligned+0x40>)
 80080e0:	460c      	mov	r4, r1
 80080e2:	6831      	ldr	r1, [r6, #0]
 80080e4:	4605      	mov	r5, r0
 80080e6:	b911      	cbnz	r1, 80080ee <sbrk_aligned+0x12>
 80080e8:	f000 fb8a 	bl	8008800 <_sbrk_r>
 80080ec:	6030      	str	r0, [r6, #0]
 80080ee:	4621      	mov	r1, r4
 80080f0:	4628      	mov	r0, r5
 80080f2:	f000 fb85 	bl	8008800 <_sbrk_r>
 80080f6:	1c43      	adds	r3, r0, #1
 80080f8:	d103      	bne.n	8008102 <sbrk_aligned+0x26>
 80080fa:	f04f 34ff 	mov.w	r4, #4294967295
 80080fe:	4620      	mov	r0, r4
 8008100:	bd70      	pop	{r4, r5, r6, pc}
 8008102:	1cc4      	adds	r4, r0, #3
 8008104:	f024 0403 	bic.w	r4, r4, #3
 8008108:	42a0      	cmp	r0, r4
 800810a:	d0f8      	beq.n	80080fe <sbrk_aligned+0x22>
 800810c:	1a21      	subs	r1, r4, r0
 800810e:	4628      	mov	r0, r5
 8008110:	f000 fb76 	bl	8008800 <_sbrk_r>
 8008114:	3001      	adds	r0, #1
 8008116:	d1f2      	bne.n	80080fe <sbrk_aligned+0x22>
 8008118:	e7ef      	b.n	80080fa <sbrk_aligned+0x1e>
 800811a:	bf00      	nop
 800811c:	20000910 	.word	0x20000910

08008120 <_malloc_r>:
 8008120:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008124:	1ccd      	adds	r5, r1, #3
 8008126:	f025 0503 	bic.w	r5, r5, #3
 800812a:	3508      	adds	r5, #8
 800812c:	2d0c      	cmp	r5, #12
 800812e:	bf38      	it	cc
 8008130:	250c      	movcc	r5, #12
 8008132:	2d00      	cmp	r5, #0
 8008134:	4606      	mov	r6, r0
 8008136:	db01      	blt.n	800813c <_malloc_r+0x1c>
 8008138:	42a9      	cmp	r1, r5
 800813a:	d904      	bls.n	8008146 <_malloc_r+0x26>
 800813c:	230c      	movs	r3, #12
 800813e:	6033      	str	r3, [r6, #0]
 8008140:	2000      	movs	r0, #0
 8008142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008146:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800821c <_malloc_r+0xfc>
 800814a:	f000 f869 	bl	8008220 <__malloc_lock>
 800814e:	f8d8 3000 	ldr.w	r3, [r8]
 8008152:	461c      	mov	r4, r3
 8008154:	bb44      	cbnz	r4, 80081a8 <_malloc_r+0x88>
 8008156:	4629      	mov	r1, r5
 8008158:	4630      	mov	r0, r6
 800815a:	f7ff ffbf 	bl	80080dc <sbrk_aligned>
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	4604      	mov	r4, r0
 8008162:	d158      	bne.n	8008216 <_malloc_r+0xf6>
 8008164:	f8d8 4000 	ldr.w	r4, [r8]
 8008168:	4627      	mov	r7, r4
 800816a:	2f00      	cmp	r7, #0
 800816c:	d143      	bne.n	80081f6 <_malloc_r+0xd6>
 800816e:	2c00      	cmp	r4, #0
 8008170:	d04b      	beq.n	800820a <_malloc_r+0xea>
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	4639      	mov	r1, r7
 8008176:	4630      	mov	r0, r6
 8008178:	eb04 0903 	add.w	r9, r4, r3
 800817c:	f000 fb40 	bl	8008800 <_sbrk_r>
 8008180:	4581      	cmp	r9, r0
 8008182:	d142      	bne.n	800820a <_malloc_r+0xea>
 8008184:	6821      	ldr	r1, [r4, #0]
 8008186:	1a6d      	subs	r5, r5, r1
 8008188:	4629      	mov	r1, r5
 800818a:	4630      	mov	r0, r6
 800818c:	f7ff ffa6 	bl	80080dc <sbrk_aligned>
 8008190:	3001      	adds	r0, #1
 8008192:	d03a      	beq.n	800820a <_malloc_r+0xea>
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	442b      	add	r3, r5
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	f8d8 3000 	ldr.w	r3, [r8]
 800819e:	685a      	ldr	r2, [r3, #4]
 80081a0:	bb62      	cbnz	r2, 80081fc <_malloc_r+0xdc>
 80081a2:	f8c8 7000 	str.w	r7, [r8]
 80081a6:	e00f      	b.n	80081c8 <_malloc_r+0xa8>
 80081a8:	6822      	ldr	r2, [r4, #0]
 80081aa:	1b52      	subs	r2, r2, r5
 80081ac:	d420      	bmi.n	80081f0 <_malloc_r+0xd0>
 80081ae:	2a0b      	cmp	r2, #11
 80081b0:	d917      	bls.n	80081e2 <_malloc_r+0xc2>
 80081b2:	1961      	adds	r1, r4, r5
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	6025      	str	r5, [r4, #0]
 80081b8:	bf18      	it	ne
 80081ba:	6059      	strne	r1, [r3, #4]
 80081bc:	6863      	ldr	r3, [r4, #4]
 80081be:	bf08      	it	eq
 80081c0:	f8c8 1000 	streq.w	r1, [r8]
 80081c4:	5162      	str	r2, [r4, r5]
 80081c6:	604b      	str	r3, [r1, #4]
 80081c8:	4630      	mov	r0, r6
 80081ca:	f000 f82f 	bl	800822c <__malloc_unlock>
 80081ce:	f104 000b 	add.w	r0, r4, #11
 80081d2:	1d23      	adds	r3, r4, #4
 80081d4:	f020 0007 	bic.w	r0, r0, #7
 80081d8:	1ac2      	subs	r2, r0, r3
 80081da:	bf1c      	itt	ne
 80081dc:	1a1b      	subne	r3, r3, r0
 80081de:	50a3      	strne	r3, [r4, r2]
 80081e0:	e7af      	b.n	8008142 <_malloc_r+0x22>
 80081e2:	6862      	ldr	r2, [r4, #4]
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	bf0c      	ite	eq
 80081e8:	f8c8 2000 	streq.w	r2, [r8]
 80081ec:	605a      	strne	r2, [r3, #4]
 80081ee:	e7eb      	b.n	80081c8 <_malloc_r+0xa8>
 80081f0:	4623      	mov	r3, r4
 80081f2:	6864      	ldr	r4, [r4, #4]
 80081f4:	e7ae      	b.n	8008154 <_malloc_r+0x34>
 80081f6:	463c      	mov	r4, r7
 80081f8:	687f      	ldr	r7, [r7, #4]
 80081fa:	e7b6      	b.n	800816a <_malloc_r+0x4a>
 80081fc:	461a      	mov	r2, r3
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	42a3      	cmp	r3, r4
 8008202:	d1fb      	bne.n	80081fc <_malloc_r+0xdc>
 8008204:	2300      	movs	r3, #0
 8008206:	6053      	str	r3, [r2, #4]
 8008208:	e7de      	b.n	80081c8 <_malloc_r+0xa8>
 800820a:	230c      	movs	r3, #12
 800820c:	6033      	str	r3, [r6, #0]
 800820e:	4630      	mov	r0, r6
 8008210:	f000 f80c 	bl	800822c <__malloc_unlock>
 8008214:	e794      	b.n	8008140 <_malloc_r+0x20>
 8008216:	6005      	str	r5, [r0, #0]
 8008218:	e7d6      	b.n	80081c8 <_malloc_r+0xa8>
 800821a:	bf00      	nop
 800821c:	20000914 	.word	0x20000914

08008220 <__malloc_lock>:
 8008220:	4801      	ldr	r0, [pc, #4]	@ (8008228 <__malloc_lock+0x8>)
 8008222:	f7ff bf01 	b.w	8008028 <__retarget_lock_acquire_recursive>
 8008226:	bf00      	nop
 8008228:	2000090c 	.word	0x2000090c

0800822c <__malloc_unlock>:
 800822c:	4801      	ldr	r0, [pc, #4]	@ (8008234 <__malloc_unlock+0x8>)
 800822e:	f7ff befc 	b.w	800802a <__retarget_lock_release_recursive>
 8008232:	bf00      	nop
 8008234:	2000090c 	.word	0x2000090c

08008238 <__ssputs_r>:
 8008238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800823c:	688e      	ldr	r6, [r1, #8]
 800823e:	461f      	mov	r7, r3
 8008240:	42be      	cmp	r6, r7
 8008242:	680b      	ldr	r3, [r1, #0]
 8008244:	4682      	mov	sl, r0
 8008246:	460c      	mov	r4, r1
 8008248:	4690      	mov	r8, r2
 800824a:	d82d      	bhi.n	80082a8 <__ssputs_r+0x70>
 800824c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008250:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008254:	d026      	beq.n	80082a4 <__ssputs_r+0x6c>
 8008256:	6965      	ldr	r5, [r4, #20]
 8008258:	6909      	ldr	r1, [r1, #16]
 800825a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800825e:	eba3 0901 	sub.w	r9, r3, r1
 8008262:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008266:	1c7b      	adds	r3, r7, #1
 8008268:	444b      	add	r3, r9
 800826a:	106d      	asrs	r5, r5, #1
 800826c:	429d      	cmp	r5, r3
 800826e:	bf38      	it	cc
 8008270:	461d      	movcc	r5, r3
 8008272:	0553      	lsls	r3, r2, #21
 8008274:	d527      	bpl.n	80082c6 <__ssputs_r+0x8e>
 8008276:	4629      	mov	r1, r5
 8008278:	f7ff ff52 	bl	8008120 <_malloc_r>
 800827c:	4606      	mov	r6, r0
 800827e:	b360      	cbz	r0, 80082da <__ssputs_r+0xa2>
 8008280:	6921      	ldr	r1, [r4, #16]
 8008282:	464a      	mov	r2, r9
 8008284:	f7ff fed2 	bl	800802c <memcpy>
 8008288:	89a3      	ldrh	r3, [r4, #12]
 800828a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800828e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008292:	81a3      	strh	r3, [r4, #12]
 8008294:	6126      	str	r6, [r4, #16]
 8008296:	6165      	str	r5, [r4, #20]
 8008298:	444e      	add	r6, r9
 800829a:	eba5 0509 	sub.w	r5, r5, r9
 800829e:	6026      	str	r6, [r4, #0]
 80082a0:	60a5      	str	r5, [r4, #8]
 80082a2:	463e      	mov	r6, r7
 80082a4:	42be      	cmp	r6, r7
 80082a6:	d900      	bls.n	80082aa <__ssputs_r+0x72>
 80082a8:	463e      	mov	r6, r7
 80082aa:	6820      	ldr	r0, [r4, #0]
 80082ac:	4632      	mov	r2, r6
 80082ae:	4641      	mov	r1, r8
 80082b0:	f7ff fe6e 	bl	8007f90 <memmove>
 80082b4:	68a3      	ldr	r3, [r4, #8]
 80082b6:	1b9b      	subs	r3, r3, r6
 80082b8:	60a3      	str	r3, [r4, #8]
 80082ba:	6823      	ldr	r3, [r4, #0]
 80082bc:	4433      	add	r3, r6
 80082be:	6023      	str	r3, [r4, #0]
 80082c0:	2000      	movs	r0, #0
 80082c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c6:	462a      	mov	r2, r5
 80082c8:	f000 faaa 	bl	8008820 <_realloc_r>
 80082cc:	4606      	mov	r6, r0
 80082ce:	2800      	cmp	r0, #0
 80082d0:	d1e0      	bne.n	8008294 <__ssputs_r+0x5c>
 80082d2:	6921      	ldr	r1, [r4, #16]
 80082d4:	4650      	mov	r0, sl
 80082d6:	f7ff feb7 	bl	8008048 <_free_r>
 80082da:	230c      	movs	r3, #12
 80082dc:	f8ca 3000 	str.w	r3, [sl]
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082e6:	81a3      	strh	r3, [r4, #12]
 80082e8:	f04f 30ff 	mov.w	r0, #4294967295
 80082ec:	e7e9      	b.n	80082c2 <__ssputs_r+0x8a>
	...

080082f0 <_svfiprintf_r>:
 80082f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f4:	4698      	mov	r8, r3
 80082f6:	898b      	ldrh	r3, [r1, #12]
 80082f8:	061b      	lsls	r3, r3, #24
 80082fa:	b09d      	sub	sp, #116	@ 0x74
 80082fc:	4607      	mov	r7, r0
 80082fe:	460d      	mov	r5, r1
 8008300:	4614      	mov	r4, r2
 8008302:	d510      	bpl.n	8008326 <_svfiprintf_r+0x36>
 8008304:	690b      	ldr	r3, [r1, #16]
 8008306:	b973      	cbnz	r3, 8008326 <_svfiprintf_r+0x36>
 8008308:	2140      	movs	r1, #64	@ 0x40
 800830a:	f7ff ff09 	bl	8008120 <_malloc_r>
 800830e:	6028      	str	r0, [r5, #0]
 8008310:	6128      	str	r0, [r5, #16]
 8008312:	b930      	cbnz	r0, 8008322 <_svfiprintf_r+0x32>
 8008314:	230c      	movs	r3, #12
 8008316:	603b      	str	r3, [r7, #0]
 8008318:	f04f 30ff 	mov.w	r0, #4294967295
 800831c:	b01d      	add	sp, #116	@ 0x74
 800831e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008322:	2340      	movs	r3, #64	@ 0x40
 8008324:	616b      	str	r3, [r5, #20]
 8008326:	2300      	movs	r3, #0
 8008328:	9309      	str	r3, [sp, #36]	@ 0x24
 800832a:	2320      	movs	r3, #32
 800832c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008330:	f8cd 800c 	str.w	r8, [sp, #12]
 8008334:	2330      	movs	r3, #48	@ 0x30
 8008336:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80084d4 <_svfiprintf_r+0x1e4>
 800833a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800833e:	f04f 0901 	mov.w	r9, #1
 8008342:	4623      	mov	r3, r4
 8008344:	469a      	mov	sl, r3
 8008346:	f813 2b01 	ldrb.w	r2, [r3], #1
 800834a:	b10a      	cbz	r2, 8008350 <_svfiprintf_r+0x60>
 800834c:	2a25      	cmp	r2, #37	@ 0x25
 800834e:	d1f9      	bne.n	8008344 <_svfiprintf_r+0x54>
 8008350:	ebba 0b04 	subs.w	fp, sl, r4
 8008354:	d00b      	beq.n	800836e <_svfiprintf_r+0x7e>
 8008356:	465b      	mov	r3, fp
 8008358:	4622      	mov	r2, r4
 800835a:	4629      	mov	r1, r5
 800835c:	4638      	mov	r0, r7
 800835e:	f7ff ff6b 	bl	8008238 <__ssputs_r>
 8008362:	3001      	adds	r0, #1
 8008364:	f000 80a7 	beq.w	80084b6 <_svfiprintf_r+0x1c6>
 8008368:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800836a:	445a      	add	r2, fp
 800836c:	9209      	str	r2, [sp, #36]	@ 0x24
 800836e:	f89a 3000 	ldrb.w	r3, [sl]
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 809f 	beq.w	80084b6 <_svfiprintf_r+0x1c6>
 8008378:	2300      	movs	r3, #0
 800837a:	f04f 32ff 	mov.w	r2, #4294967295
 800837e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008382:	f10a 0a01 	add.w	sl, sl, #1
 8008386:	9304      	str	r3, [sp, #16]
 8008388:	9307      	str	r3, [sp, #28]
 800838a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800838e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008390:	4654      	mov	r4, sl
 8008392:	2205      	movs	r2, #5
 8008394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008398:	484e      	ldr	r0, [pc, #312]	@ (80084d4 <_svfiprintf_r+0x1e4>)
 800839a:	f7f7 ff21 	bl	80001e0 <memchr>
 800839e:	9a04      	ldr	r2, [sp, #16]
 80083a0:	b9d8      	cbnz	r0, 80083da <_svfiprintf_r+0xea>
 80083a2:	06d0      	lsls	r0, r2, #27
 80083a4:	bf44      	itt	mi
 80083a6:	2320      	movmi	r3, #32
 80083a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083ac:	0711      	lsls	r1, r2, #28
 80083ae:	bf44      	itt	mi
 80083b0:	232b      	movmi	r3, #43	@ 0x2b
 80083b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083b6:	f89a 3000 	ldrb.w	r3, [sl]
 80083ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80083bc:	d015      	beq.n	80083ea <_svfiprintf_r+0xfa>
 80083be:	9a07      	ldr	r2, [sp, #28]
 80083c0:	4654      	mov	r4, sl
 80083c2:	2000      	movs	r0, #0
 80083c4:	f04f 0c0a 	mov.w	ip, #10
 80083c8:	4621      	mov	r1, r4
 80083ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083ce:	3b30      	subs	r3, #48	@ 0x30
 80083d0:	2b09      	cmp	r3, #9
 80083d2:	d94b      	bls.n	800846c <_svfiprintf_r+0x17c>
 80083d4:	b1b0      	cbz	r0, 8008404 <_svfiprintf_r+0x114>
 80083d6:	9207      	str	r2, [sp, #28]
 80083d8:	e014      	b.n	8008404 <_svfiprintf_r+0x114>
 80083da:	eba0 0308 	sub.w	r3, r0, r8
 80083de:	fa09 f303 	lsl.w	r3, r9, r3
 80083e2:	4313      	orrs	r3, r2
 80083e4:	9304      	str	r3, [sp, #16]
 80083e6:	46a2      	mov	sl, r4
 80083e8:	e7d2      	b.n	8008390 <_svfiprintf_r+0xa0>
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	1d19      	adds	r1, r3, #4
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	9103      	str	r1, [sp, #12]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	bfbb      	ittet	lt
 80083f6:	425b      	neglt	r3, r3
 80083f8:	f042 0202 	orrlt.w	r2, r2, #2
 80083fc:	9307      	strge	r3, [sp, #28]
 80083fe:	9307      	strlt	r3, [sp, #28]
 8008400:	bfb8      	it	lt
 8008402:	9204      	strlt	r2, [sp, #16]
 8008404:	7823      	ldrb	r3, [r4, #0]
 8008406:	2b2e      	cmp	r3, #46	@ 0x2e
 8008408:	d10a      	bne.n	8008420 <_svfiprintf_r+0x130>
 800840a:	7863      	ldrb	r3, [r4, #1]
 800840c:	2b2a      	cmp	r3, #42	@ 0x2a
 800840e:	d132      	bne.n	8008476 <_svfiprintf_r+0x186>
 8008410:	9b03      	ldr	r3, [sp, #12]
 8008412:	1d1a      	adds	r2, r3, #4
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	9203      	str	r2, [sp, #12]
 8008418:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800841c:	3402      	adds	r4, #2
 800841e:	9305      	str	r3, [sp, #20]
 8008420:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084e4 <_svfiprintf_r+0x1f4>
 8008424:	7821      	ldrb	r1, [r4, #0]
 8008426:	2203      	movs	r2, #3
 8008428:	4650      	mov	r0, sl
 800842a:	f7f7 fed9 	bl	80001e0 <memchr>
 800842e:	b138      	cbz	r0, 8008440 <_svfiprintf_r+0x150>
 8008430:	9b04      	ldr	r3, [sp, #16]
 8008432:	eba0 000a 	sub.w	r0, r0, sl
 8008436:	2240      	movs	r2, #64	@ 0x40
 8008438:	4082      	lsls	r2, r0
 800843a:	4313      	orrs	r3, r2
 800843c:	3401      	adds	r4, #1
 800843e:	9304      	str	r3, [sp, #16]
 8008440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008444:	4824      	ldr	r0, [pc, #144]	@ (80084d8 <_svfiprintf_r+0x1e8>)
 8008446:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800844a:	2206      	movs	r2, #6
 800844c:	f7f7 fec8 	bl	80001e0 <memchr>
 8008450:	2800      	cmp	r0, #0
 8008452:	d036      	beq.n	80084c2 <_svfiprintf_r+0x1d2>
 8008454:	4b21      	ldr	r3, [pc, #132]	@ (80084dc <_svfiprintf_r+0x1ec>)
 8008456:	bb1b      	cbnz	r3, 80084a0 <_svfiprintf_r+0x1b0>
 8008458:	9b03      	ldr	r3, [sp, #12]
 800845a:	3307      	adds	r3, #7
 800845c:	f023 0307 	bic.w	r3, r3, #7
 8008460:	3308      	adds	r3, #8
 8008462:	9303      	str	r3, [sp, #12]
 8008464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008466:	4433      	add	r3, r6
 8008468:	9309      	str	r3, [sp, #36]	@ 0x24
 800846a:	e76a      	b.n	8008342 <_svfiprintf_r+0x52>
 800846c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008470:	460c      	mov	r4, r1
 8008472:	2001      	movs	r0, #1
 8008474:	e7a8      	b.n	80083c8 <_svfiprintf_r+0xd8>
 8008476:	2300      	movs	r3, #0
 8008478:	3401      	adds	r4, #1
 800847a:	9305      	str	r3, [sp, #20]
 800847c:	4619      	mov	r1, r3
 800847e:	f04f 0c0a 	mov.w	ip, #10
 8008482:	4620      	mov	r0, r4
 8008484:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008488:	3a30      	subs	r2, #48	@ 0x30
 800848a:	2a09      	cmp	r2, #9
 800848c:	d903      	bls.n	8008496 <_svfiprintf_r+0x1a6>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d0c6      	beq.n	8008420 <_svfiprintf_r+0x130>
 8008492:	9105      	str	r1, [sp, #20]
 8008494:	e7c4      	b.n	8008420 <_svfiprintf_r+0x130>
 8008496:	fb0c 2101 	mla	r1, ip, r1, r2
 800849a:	4604      	mov	r4, r0
 800849c:	2301      	movs	r3, #1
 800849e:	e7f0      	b.n	8008482 <_svfiprintf_r+0x192>
 80084a0:	ab03      	add	r3, sp, #12
 80084a2:	9300      	str	r3, [sp, #0]
 80084a4:	462a      	mov	r2, r5
 80084a6:	4b0e      	ldr	r3, [pc, #56]	@ (80084e0 <_svfiprintf_r+0x1f0>)
 80084a8:	a904      	add	r1, sp, #16
 80084aa:	4638      	mov	r0, r7
 80084ac:	f3af 8000 	nop.w
 80084b0:	1c42      	adds	r2, r0, #1
 80084b2:	4606      	mov	r6, r0
 80084b4:	d1d6      	bne.n	8008464 <_svfiprintf_r+0x174>
 80084b6:	89ab      	ldrh	r3, [r5, #12]
 80084b8:	065b      	lsls	r3, r3, #25
 80084ba:	f53f af2d 	bmi.w	8008318 <_svfiprintf_r+0x28>
 80084be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084c0:	e72c      	b.n	800831c <_svfiprintf_r+0x2c>
 80084c2:	ab03      	add	r3, sp, #12
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	462a      	mov	r2, r5
 80084c8:	4b05      	ldr	r3, [pc, #20]	@ (80084e0 <_svfiprintf_r+0x1f0>)
 80084ca:	a904      	add	r1, sp, #16
 80084cc:	4638      	mov	r0, r7
 80084ce:	f000 f879 	bl	80085c4 <_printf_i>
 80084d2:	e7ed      	b.n	80084b0 <_svfiprintf_r+0x1c0>
 80084d4:	0800e614 	.word	0x0800e614
 80084d8:	0800e61e 	.word	0x0800e61e
 80084dc:	00000000 	.word	0x00000000
 80084e0:	08008239 	.word	0x08008239
 80084e4:	0800e61a 	.word	0x0800e61a

080084e8 <_printf_common>:
 80084e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ec:	4616      	mov	r6, r2
 80084ee:	4698      	mov	r8, r3
 80084f0:	688a      	ldr	r2, [r1, #8]
 80084f2:	690b      	ldr	r3, [r1, #16]
 80084f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084f8:	4293      	cmp	r3, r2
 80084fa:	bfb8      	it	lt
 80084fc:	4613      	movlt	r3, r2
 80084fe:	6033      	str	r3, [r6, #0]
 8008500:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008504:	4607      	mov	r7, r0
 8008506:	460c      	mov	r4, r1
 8008508:	b10a      	cbz	r2, 800850e <_printf_common+0x26>
 800850a:	3301      	adds	r3, #1
 800850c:	6033      	str	r3, [r6, #0]
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	0699      	lsls	r1, r3, #26
 8008512:	bf42      	ittt	mi
 8008514:	6833      	ldrmi	r3, [r6, #0]
 8008516:	3302      	addmi	r3, #2
 8008518:	6033      	strmi	r3, [r6, #0]
 800851a:	6825      	ldr	r5, [r4, #0]
 800851c:	f015 0506 	ands.w	r5, r5, #6
 8008520:	d106      	bne.n	8008530 <_printf_common+0x48>
 8008522:	f104 0a19 	add.w	sl, r4, #25
 8008526:	68e3      	ldr	r3, [r4, #12]
 8008528:	6832      	ldr	r2, [r6, #0]
 800852a:	1a9b      	subs	r3, r3, r2
 800852c:	42ab      	cmp	r3, r5
 800852e:	dc26      	bgt.n	800857e <_printf_common+0x96>
 8008530:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008534:	6822      	ldr	r2, [r4, #0]
 8008536:	3b00      	subs	r3, #0
 8008538:	bf18      	it	ne
 800853a:	2301      	movne	r3, #1
 800853c:	0692      	lsls	r2, r2, #26
 800853e:	d42b      	bmi.n	8008598 <_printf_common+0xb0>
 8008540:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008544:	4641      	mov	r1, r8
 8008546:	4638      	mov	r0, r7
 8008548:	47c8      	blx	r9
 800854a:	3001      	adds	r0, #1
 800854c:	d01e      	beq.n	800858c <_printf_common+0xa4>
 800854e:	6823      	ldr	r3, [r4, #0]
 8008550:	6922      	ldr	r2, [r4, #16]
 8008552:	f003 0306 	and.w	r3, r3, #6
 8008556:	2b04      	cmp	r3, #4
 8008558:	bf02      	ittt	eq
 800855a:	68e5      	ldreq	r5, [r4, #12]
 800855c:	6833      	ldreq	r3, [r6, #0]
 800855e:	1aed      	subeq	r5, r5, r3
 8008560:	68a3      	ldr	r3, [r4, #8]
 8008562:	bf0c      	ite	eq
 8008564:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008568:	2500      	movne	r5, #0
 800856a:	4293      	cmp	r3, r2
 800856c:	bfc4      	itt	gt
 800856e:	1a9b      	subgt	r3, r3, r2
 8008570:	18ed      	addgt	r5, r5, r3
 8008572:	2600      	movs	r6, #0
 8008574:	341a      	adds	r4, #26
 8008576:	42b5      	cmp	r5, r6
 8008578:	d11a      	bne.n	80085b0 <_printf_common+0xc8>
 800857a:	2000      	movs	r0, #0
 800857c:	e008      	b.n	8008590 <_printf_common+0xa8>
 800857e:	2301      	movs	r3, #1
 8008580:	4652      	mov	r2, sl
 8008582:	4641      	mov	r1, r8
 8008584:	4638      	mov	r0, r7
 8008586:	47c8      	blx	r9
 8008588:	3001      	adds	r0, #1
 800858a:	d103      	bne.n	8008594 <_printf_common+0xac>
 800858c:	f04f 30ff 	mov.w	r0, #4294967295
 8008590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008594:	3501      	adds	r5, #1
 8008596:	e7c6      	b.n	8008526 <_printf_common+0x3e>
 8008598:	18e1      	adds	r1, r4, r3
 800859a:	1c5a      	adds	r2, r3, #1
 800859c:	2030      	movs	r0, #48	@ 0x30
 800859e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80085a2:	4422      	add	r2, r4
 80085a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085ac:	3302      	adds	r3, #2
 80085ae:	e7c7      	b.n	8008540 <_printf_common+0x58>
 80085b0:	2301      	movs	r3, #1
 80085b2:	4622      	mov	r2, r4
 80085b4:	4641      	mov	r1, r8
 80085b6:	4638      	mov	r0, r7
 80085b8:	47c8      	blx	r9
 80085ba:	3001      	adds	r0, #1
 80085bc:	d0e6      	beq.n	800858c <_printf_common+0xa4>
 80085be:	3601      	adds	r6, #1
 80085c0:	e7d9      	b.n	8008576 <_printf_common+0x8e>
	...

080085c4 <_printf_i>:
 80085c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085c8:	7e0f      	ldrb	r7, [r1, #24]
 80085ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085cc:	2f78      	cmp	r7, #120	@ 0x78
 80085ce:	4691      	mov	r9, r2
 80085d0:	4680      	mov	r8, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	469a      	mov	sl, r3
 80085d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085da:	d807      	bhi.n	80085ec <_printf_i+0x28>
 80085dc:	2f62      	cmp	r7, #98	@ 0x62
 80085de:	d80a      	bhi.n	80085f6 <_printf_i+0x32>
 80085e0:	2f00      	cmp	r7, #0
 80085e2:	f000 80d1 	beq.w	8008788 <_printf_i+0x1c4>
 80085e6:	2f58      	cmp	r7, #88	@ 0x58
 80085e8:	f000 80b8 	beq.w	800875c <_printf_i+0x198>
 80085ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085f4:	e03a      	b.n	800866c <_printf_i+0xa8>
 80085f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085fa:	2b15      	cmp	r3, #21
 80085fc:	d8f6      	bhi.n	80085ec <_printf_i+0x28>
 80085fe:	a101      	add	r1, pc, #4	@ (adr r1, 8008604 <_printf_i+0x40>)
 8008600:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008604:	0800865d 	.word	0x0800865d
 8008608:	08008671 	.word	0x08008671
 800860c:	080085ed 	.word	0x080085ed
 8008610:	080085ed 	.word	0x080085ed
 8008614:	080085ed 	.word	0x080085ed
 8008618:	080085ed 	.word	0x080085ed
 800861c:	08008671 	.word	0x08008671
 8008620:	080085ed 	.word	0x080085ed
 8008624:	080085ed 	.word	0x080085ed
 8008628:	080085ed 	.word	0x080085ed
 800862c:	080085ed 	.word	0x080085ed
 8008630:	0800876f 	.word	0x0800876f
 8008634:	0800869b 	.word	0x0800869b
 8008638:	08008729 	.word	0x08008729
 800863c:	080085ed 	.word	0x080085ed
 8008640:	080085ed 	.word	0x080085ed
 8008644:	08008791 	.word	0x08008791
 8008648:	080085ed 	.word	0x080085ed
 800864c:	0800869b 	.word	0x0800869b
 8008650:	080085ed 	.word	0x080085ed
 8008654:	080085ed 	.word	0x080085ed
 8008658:	08008731 	.word	0x08008731
 800865c:	6833      	ldr	r3, [r6, #0]
 800865e:	1d1a      	adds	r2, r3, #4
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6032      	str	r2, [r6, #0]
 8008664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008668:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800866c:	2301      	movs	r3, #1
 800866e:	e09c      	b.n	80087aa <_printf_i+0x1e6>
 8008670:	6833      	ldr	r3, [r6, #0]
 8008672:	6820      	ldr	r0, [r4, #0]
 8008674:	1d19      	adds	r1, r3, #4
 8008676:	6031      	str	r1, [r6, #0]
 8008678:	0606      	lsls	r6, r0, #24
 800867a:	d501      	bpl.n	8008680 <_printf_i+0xbc>
 800867c:	681d      	ldr	r5, [r3, #0]
 800867e:	e003      	b.n	8008688 <_printf_i+0xc4>
 8008680:	0645      	lsls	r5, r0, #25
 8008682:	d5fb      	bpl.n	800867c <_printf_i+0xb8>
 8008684:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008688:	2d00      	cmp	r5, #0
 800868a:	da03      	bge.n	8008694 <_printf_i+0xd0>
 800868c:	232d      	movs	r3, #45	@ 0x2d
 800868e:	426d      	negs	r5, r5
 8008690:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008694:	4858      	ldr	r0, [pc, #352]	@ (80087f8 <_printf_i+0x234>)
 8008696:	230a      	movs	r3, #10
 8008698:	e011      	b.n	80086be <_printf_i+0xfa>
 800869a:	6821      	ldr	r1, [r4, #0]
 800869c:	6833      	ldr	r3, [r6, #0]
 800869e:	0608      	lsls	r0, r1, #24
 80086a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80086a4:	d402      	bmi.n	80086ac <_printf_i+0xe8>
 80086a6:	0649      	lsls	r1, r1, #25
 80086a8:	bf48      	it	mi
 80086aa:	b2ad      	uxthmi	r5, r5
 80086ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80086ae:	4852      	ldr	r0, [pc, #328]	@ (80087f8 <_printf_i+0x234>)
 80086b0:	6033      	str	r3, [r6, #0]
 80086b2:	bf14      	ite	ne
 80086b4:	230a      	movne	r3, #10
 80086b6:	2308      	moveq	r3, #8
 80086b8:	2100      	movs	r1, #0
 80086ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086be:	6866      	ldr	r6, [r4, #4]
 80086c0:	60a6      	str	r6, [r4, #8]
 80086c2:	2e00      	cmp	r6, #0
 80086c4:	db05      	blt.n	80086d2 <_printf_i+0x10e>
 80086c6:	6821      	ldr	r1, [r4, #0]
 80086c8:	432e      	orrs	r6, r5
 80086ca:	f021 0104 	bic.w	r1, r1, #4
 80086ce:	6021      	str	r1, [r4, #0]
 80086d0:	d04b      	beq.n	800876a <_printf_i+0x1a6>
 80086d2:	4616      	mov	r6, r2
 80086d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80086d8:	fb03 5711 	mls	r7, r3, r1, r5
 80086dc:	5dc7      	ldrb	r7, [r0, r7]
 80086de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086e2:	462f      	mov	r7, r5
 80086e4:	42bb      	cmp	r3, r7
 80086e6:	460d      	mov	r5, r1
 80086e8:	d9f4      	bls.n	80086d4 <_printf_i+0x110>
 80086ea:	2b08      	cmp	r3, #8
 80086ec:	d10b      	bne.n	8008706 <_printf_i+0x142>
 80086ee:	6823      	ldr	r3, [r4, #0]
 80086f0:	07df      	lsls	r7, r3, #31
 80086f2:	d508      	bpl.n	8008706 <_printf_i+0x142>
 80086f4:	6923      	ldr	r3, [r4, #16]
 80086f6:	6861      	ldr	r1, [r4, #4]
 80086f8:	4299      	cmp	r1, r3
 80086fa:	bfde      	ittt	le
 80086fc:	2330      	movle	r3, #48	@ 0x30
 80086fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008702:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008706:	1b92      	subs	r2, r2, r6
 8008708:	6122      	str	r2, [r4, #16]
 800870a:	f8cd a000 	str.w	sl, [sp]
 800870e:	464b      	mov	r3, r9
 8008710:	aa03      	add	r2, sp, #12
 8008712:	4621      	mov	r1, r4
 8008714:	4640      	mov	r0, r8
 8008716:	f7ff fee7 	bl	80084e8 <_printf_common>
 800871a:	3001      	adds	r0, #1
 800871c:	d14a      	bne.n	80087b4 <_printf_i+0x1f0>
 800871e:	f04f 30ff 	mov.w	r0, #4294967295
 8008722:	b004      	add	sp, #16
 8008724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	f043 0320 	orr.w	r3, r3, #32
 800872e:	6023      	str	r3, [r4, #0]
 8008730:	4832      	ldr	r0, [pc, #200]	@ (80087fc <_printf_i+0x238>)
 8008732:	2778      	movs	r7, #120	@ 0x78
 8008734:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008738:	6823      	ldr	r3, [r4, #0]
 800873a:	6831      	ldr	r1, [r6, #0]
 800873c:	061f      	lsls	r7, r3, #24
 800873e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008742:	d402      	bmi.n	800874a <_printf_i+0x186>
 8008744:	065f      	lsls	r7, r3, #25
 8008746:	bf48      	it	mi
 8008748:	b2ad      	uxthmi	r5, r5
 800874a:	6031      	str	r1, [r6, #0]
 800874c:	07d9      	lsls	r1, r3, #31
 800874e:	bf44      	itt	mi
 8008750:	f043 0320 	orrmi.w	r3, r3, #32
 8008754:	6023      	strmi	r3, [r4, #0]
 8008756:	b11d      	cbz	r5, 8008760 <_printf_i+0x19c>
 8008758:	2310      	movs	r3, #16
 800875a:	e7ad      	b.n	80086b8 <_printf_i+0xf4>
 800875c:	4826      	ldr	r0, [pc, #152]	@ (80087f8 <_printf_i+0x234>)
 800875e:	e7e9      	b.n	8008734 <_printf_i+0x170>
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	f023 0320 	bic.w	r3, r3, #32
 8008766:	6023      	str	r3, [r4, #0]
 8008768:	e7f6      	b.n	8008758 <_printf_i+0x194>
 800876a:	4616      	mov	r6, r2
 800876c:	e7bd      	b.n	80086ea <_printf_i+0x126>
 800876e:	6833      	ldr	r3, [r6, #0]
 8008770:	6825      	ldr	r5, [r4, #0]
 8008772:	6961      	ldr	r1, [r4, #20]
 8008774:	1d18      	adds	r0, r3, #4
 8008776:	6030      	str	r0, [r6, #0]
 8008778:	062e      	lsls	r6, r5, #24
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	d501      	bpl.n	8008782 <_printf_i+0x1be>
 800877e:	6019      	str	r1, [r3, #0]
 8008780:	e002      	b.n	8008788 <_printf_i+0x1c4>
 8008782:	0668      	lsls	r0, r5, #25
 8008784:	d5fb      	bpl.n	800877e <_printf_i+0x1ba>
 8008786:	8019      	strh	r1, [r3, #0]
 8008788:	2300      	movs	r3, #0
 800878a:	6123      	str	r3, [r4, #16]
 800878c:	4616      	mov	r6, r2
 800878e:	e7bc      	b.n	800870a <_printf_i+0x146>
 8008790:	6833      	ldr	r3, [r6, #0]
 8008792:	1d1a      	adds	r2, r3, #4
 8008794:	6032      	str	r2, [r6, #0]
 8008796:	681e      	ldr	r6, [r3, #0]
 8008798:	6862      	ldr	r2, [r4, #4]
 800879a:	2100      	movs	r1, #0
 800879c:	4630      	mov	r0, r6
 800879e:	f7f7 fd1f 	bl	80001e0 <memchr>
 80087a2:	b108      	cbz	r0, 80087a8 <_printf_i+0x1e4>
 80087a4:	1b80      	subs	r0, r0, r6
 80087a6:	6060      	str	r0, [r4, #4]
 80087a8:	6863      	ldr	r3, [r4, #4]
 80087aa:	6123      	str	r3, [r4, #16]
 80087ac:	2300      	movs	r3, #0
 80087ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087b2:	e7aa      	b.n	800870a <_printf_i+0x146>
 80087b4:	6923      	ldr	r3, [r4, #16]
 80087b6:	4632      	mov	r2, r6
 80087b8:	4649      	mov	r1, r9
 80087ba:	4640      	mov	r0, r8
 80087bc:	47d0      	blx	sl
 80087be:	3001      	adds	r0, #1
 80087c0:	d0ad      	beq.n	800871e <_printf_i+0x15a>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	079b      	lsls	r3, r3, #30
 80087c6:	d413      	bmi.n	80087f0 <_printf_i+0x22c>
 80087c8:	68e0      	ldr	r0, [r4, #12]
 80087ca:	9b03      	ldr	r3, [sp, #12]
 80087cc:	4298      	cmp	r0, r3
 80087ce:	bfb8      	it	lt
 80087d0:	4618      	movlt	r0, r3
 80087d2:	e7a6      	b.n	8008722 <_printf_i+0x15e>
 80087d4:	2301      	movs	r3, #1
 80087d6:	4632      	mov	r2, r6
 80087d8:	4649      	mov	r1, r9
 80087da:	4640      	mov	r0, r8
 80087dc:	47d0      	blx	sl
 80087de:	3001      	adds	r0, #1
 80087e0:	d09d      	beq.n	800871e <_printf_i+0x15a>
 80087e2:	3501      	adds	r5, #1
 80087e4:	68e3      	ldr	r3, [r4, #12]
 80087e6:	9903      	ldr	r1, [sp, #12]
 80087e8:	1a5b      	subs	r3, r3, r1
 80087ea:	42ab      	cmp	r3, r5
 80087ec:	dcf2      	bgt.n	80087d4 <_printf_i+0x210>
 80087ee:	e7eb      	b.n	80087c8 <_printf_i+0x204>
 80087f0:	2500      	movs	r5, #0
 80087f2:	f104 0619 	add.w	r6, r4, #25
 80087f6:	e7f5      	b.n	80087e4 <_printf_i+0x220>
 80087f8:	0800e625 	.word	0x0800e625
 80087fc:	0800e636 	.word	0x0800e636

08008800 <_sbrk_r>:
 8008800:	b538      	push	{r3, r4, r5, lr}
 8008802:	4d06      	ldr	r5, [pc, #24]	@ (800881c <_sbrk_r+0x1c>)
 8008804:	2300      	movs	r3, #0
 8008806:	4604      	mov	r4, r0
 8008808:	4608      	mov	r0, r1
 800880a:	602b      	str	r3, [r5, #0]
 800880c:	f7fa fbea 	bl	8002fe4 <_sbrk>
 8008810:	1c43      	adds	r3, r0, #1
 8008812:	d102      	bne.n	800881a <_sbrk_r+0x1a>
 8008814:	682b      	ldr	r3, [r5, #0]
 8008816:	b103      	cbz	r3, 800881a <_sbrk_r+0x1a>
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	bd38      	pop	{r3, r4, r5, pc}
 800881c:	20000908 	.word	0x20000908

08008820 <_realloc_r>:
 8008820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008824:	4607      	mov	r7, r0
 8008826:	4614      	mov	r4, r2
 8008828:	460d      	mov	r5, r1
 800882a:	b921      	cbnz	r1, 8008836 <_realloc_r+0x16>
 800882c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008830:	4611      	mov	r1, r2
 8008832:	f7ff bc75 	b.w	8008120 <_malloc_r>
 8008836:	b92a      	cbnz	r2, 8008844 <_realloc_r+0x24>
 8008838:	f7ff fc06 	bl	8008048 <_free_r>
 800883c:	4625      	mov	r5, r4
 800883e:	4628      	mov	r0, r5
 8008840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008844:	f000 f81a 	bl	800887c <_malloc_usable_size_r>
 8008848:	4284      	cmp	r4, r0
 800884a:	4606      	mov	r6, r0
 800884c:	d802      	bhi.n	8008854 <_realloc_r+0x34>
 800884e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008852:	d8f4      	bhi.n	800883e <_realloc_r+0x1e>
 8008854:	4621      	mov	r1, r4
 8008856:	4638      	mov	r0, r7
 8008858:	f7ff fc62 	bl	8008120 <_malloc_r>
 800885c:	4680      	mov	r8, r0
 800885e:	b908      	cbnz	r0, 8008864 <_realloc_r+0x44>
 8008860:	4645      	mov	r5, r8
 8008862:	e7ec      	b.n	800883e <_realloc_r+0x1e>
 8008864:	42b4      	cmp	r4, r6
 8008866:	4622      	mov	r2, r4
 8008868:	4629      	mov	r1, r5
 800886a:	bf28      	it	cs
 800886c:	4632      	movcs	r2, r6
 800886e:	f7ff fbdd 	bl	800802c <memcpy>
 8008872:	4629      	mov	r1, r5
 8008874:	4638      	mov	r0, r7
 8008876:	f7ff fbe7 	bl	8008048 <_free_r>
 800887a:	e7f1      	b.n	8008860 <_realloc_r+0x40>

0800887c <_malloc_usable_size_r>:
 800887c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008880:	1f18      	subs	r0, r3, #4
 8008882:	2b00      	cmp	r3, #0
 8008884:	bfbc      	itt	lt
 8008886:	580b      	ldrlt	r3, [r1, r0]
 8008888:	18c0      	addlt	r0, r0, r3
 800888a:	4770      	bx	lr

0800888c <cosf>:
 800888c:	ee10 3a10 	vmov	r3, s0
 8008890:	b507      	push	{r0, r1, r2, lr}
 8008892:	4a1e      	ldr	r2, [pc, #120]	@ (800890c <cosf+0x80>)
 8008894:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008898:	4293      	cmp	r3, r2
 800889a:	d806      	bhi.n	80088aa <cosf+0x1e>
 800889c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8008910 <cosf+0x84>
 80088a0:	b003      	add	sp, #12
 80088a2:	f85d eb04 	ldr.w	lr, [sp], #4
 80088a6:	f000 b87b 	b.w	80089a0 <__kernel_cosf>
 80088aa:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80088ae:	d304      	bcc.n	80088ba <cosf+0x2e>
 80088b0:	ee30 0a40 	vsub.f32	s0, s0, s0
 80088b4:	b003      	add	sp, #12
 80088b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80088ba:	4668      	mov	r0, sp
 80088bc:	f000 f910 	bl	8008ae0 <__ieee754_rem_pio2f>
 80088c0:	f000 0003 	and.w	r0, r0, #3
 80088c4:	2801      	cmp	r0, #1
 80088c6:	d009      	beq.n	80088dc <cosf+0x50>
 80088c8:	2802      	cmp	r0, #2
 80088ca:	d010      	beq.n	80088ee <cosf+0x62>
 80088cc:	b9b0      	cbnz	r0, 80088fc <cosf+0x70>
 80088ce:	eddd 0a01 	vldr	s1, [sp, #4]
 80088d2:	ed9d 0a00 	vldr	s0, [sp]
 80088d6:	f000 f863 	bl	80089a0 <__kernel_cosf>
 80088da:	e7eb      	b.n	80088b4 <cosf+0x28>
 80088dc:	eddd 0a01 	vldr	s1, [sp, #4]
 80088e0:	ed9d 0a00 	vldr	s0, [sp]
 80088e4:	f000 f8b4 	bl	8008a50 <__kernel_sinf>
 80088e8:	eeb1 0a40 	vneg.f32	s0, s0
 80088ec:	e7e2      	b.n	80088b4 <cosf+0x28>
 80088ee:	eddd 0a01 	vldr	s1, [sp, #4]
 80088f2:	ed9d 0a00 	vldr	s0, [sp]
 80088f6:	f000 f853 	bl	80089a0 <__kernel_cosf>
 80088fa:	e7f5      	b.n	80088e8 <cosf+0x5c>
 80088fc:	eddd 0a01 	vldr	s1, [sp, #4]
 8008900:	ed9d 0a00 	vldr	s0, [sp]
 8008904:	2001      	movs	r0, #1
 8008906:	f000 f8a3 	bl	8008a50 <__kernel_sinf>
 800890a:	e7d3      	b.n	80088b4 <cosf+0x28>
 800890c:	3f490fd8 	.word	0x3f490fd8
 8008910:	00000000 	.word	0x00000000

08008914 <sinf>:
 8008914:	ee10 3a10 	vmov	r3, s0
 8008918:	b507      	push	{r0, r1, r2, lr}
 800891a:	4a1f      	ldr	r2, [pc, #124]	@ (8008998 <sinf+0x84>)
 800891c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008920:	4293      	cmp	r3, r2
 8008922:	d807      	bhi.n	8008934 <sinf+0x20>
 8008924:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800899c <sinf+0x88>
 8008928:	2000      	movs	r0, #0
 800892a:	b003      	add	sp, #12
 800892c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008930:	f000 b88e 	b.w	8008a50 <__kernel_sinf>
 8008934:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008938:	d304      	bcc.n	8008944 <sinf+0x30>
 800893a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800893e:	b003      	add	sp, #12
 8008940:	f85d fb04 	ldr.w	pc, [sp], #4
 8008944:	4668      	mov	r0, sp
 8008946:	f000 f8cb 	bl	8008ae0 <__ieee754_rem_pio2f>
 800894a:	f000 0003 	and.w	r0, r0, #3
 800894e:	2801      	cmp	r0, #1
 8008950:	d00a      	beq.n	8008968 <sinf+0x54>
 8008952:	2802      	cmp	r0, #2
 8008954:	d00f      	beq.n	8008976 <sinf+0x62>
 8008956:	b9c0      	cbnz	r0, 800898a <sinf+0x76>
 8008958:	eddd 0a01 	vldr	s1, [sp, #4]
 800895c:	ed9d 0a00 	vldr	s0, [sp]
 8008960:	2001      	movs	r0, #1
 8008962:	f000 f875 	bl	8008a50 <__kernel_sinf>
 8008966:	e7ea      	b.n	800893e <sinf+0x2a>
 8008968:	eddd 0a01 	vldr	s1, [sp, #4]
 800896c:	ed9d 0a00 	vldr	s0, [sp]
 8008970:	f000 f816 	bl	80089a0 <__kernel_cosf>
 8008974:	e7e3      	b.n	800893e <sinf+0x2a>
 8008976:	eddd 0a01 	vldr	s1, [sp, #4]
 800897a:	ed9d 0a00 	vldr	s0, [sp]
 800897e:	2001      	movs	r0, #1
 8008980:	f000 f866 	bl	8008a50 <__kernel_sinf>
 8008984:	eeb1 0a40 	vneg.f32	s0, s0
 8008988:	e7d9      	b.n	800893e <sinf+0x2a>
 800898a:	eddd 0a01 	vldr	s1, [sp, #4]
 800898e:	ed9d 0a00 	vldr	s0, [sp]
 8008992:	f000 f805 	bl	80089a0 <__kernel_cosf>
 8008996:	e7f5      	b.n	8008984 <sinf+0x70>
 8008998:	3f490fd8 	.word	0x3f490fd8
 800899c:	00000000 	.word	0x00000000

080089a0 <__kernel_cosf>:
 80089a0:	ee10 3a10 	vmov	r3, s0
 80089a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089a8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80089ac:	eef0 6a40 	vmov.f32	s13, s0
 80089b0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80089b4:	d204      	bcs.n	80089c0 <__kernel_cosf+0x20>
 80089b6:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80089ba:	ee17 2a90 	vmov	r2, s15
 80089be:	b342      	cbz	r2, 8008a12 <__kernel_cosf+0x72>
 80089c0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80089c4:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8008a30 <__kernel_cosf+0x90>
 80089c8:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8008a34 <__kernel_cosf+0x94>
 80089cc:	4a1a      	ldr	r2, [pc, #104]	@ (8008a38 <__kernel_cosf+0x98>)
 80089ce:	eea7 6a27 	vfma.f32	s12, s14, s15
 80089d2:	4293      	cmp	r3, r2
 80089d4:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008a3c <__kernel_cosf+0x9c>
 80089d8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80089dc:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8008a40 <__kernel_cosf+0xa0>
 80089e0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80089e4:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8008a44 <__kernel_cosf+0xa4>
 80089e8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80089ec:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8008a48 <__kernel_cosf+0xa8>
 80089f0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80089f4:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 80089f8:	ee26 6a07 	vmul.f32	s12, s12, s14
 80089fc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008a00:	eee7 0a06 	vfma.f32	s1, s14, s12
 8008a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a08:	d804      	bhi.n	8008a14 <__kernel_cosf+0x74>
 8008a0a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8008a0e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008a12:	4770      	bx	lr
 8008a14:	4a0d      	ldr	r2, [pc, #52]	@ (8008a4c <__kernel_cosf+0xac>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	bf9a      	itte	ls
 8008a1a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8008a1e:	ee07 3a10 	vmovls	s14, r3
 8008a22:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8008a26:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008a2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a2e:	e7ec      	b.n	8008a0a <__kernel_cosf+0x6a>
 8008a30:	ad47d74e 	.word	0xad47d74e
 8008a34:	310f74f6 	.word	0x310f74f6
 8008a38:	3e999999 	.word	0x3e999999
 8008a3c:	b493f27c 	.word	0xb493f27c
 8008a40:	37d00d01 	.word	0x37d00d01
 8008a44:	bab60b61 	.word	0xbab60b61
 8008a48:	3d2aaaab 	.word	0x3d2aaaab
 8008a4c:	3f480000 	.word	0x3f480000

08008a50 <__kernel_sinf>:
 8008a50:	ee10 3a10 	vmov	r3, s0
 8008a54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a58:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008a5c:	d204      	bcs.n	8008a68 <__kernel_sinf+0x18>
 8008a5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8008a62:	ee17 3a90 	vmov	r3, s15
 8008a66:	b35b      	cbz	r3, 8008ac0 <__kernel_sinf+0x70>
 8008a68:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008a6c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008ac4 <__kernel_sinf+0x74>
 8008a70:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8008ac8 <__kernel_sinf+0x78>
 8008a74:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008a78:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8008acc <__kernel_sinf+0x7c>
 8008a7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008a80:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8008ad0 <__kernel_sinf+0x80>
 8008a84:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008a88:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8008ad4 <__kernel_sinf+0x84>
 8008a8c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008a90:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008a94:	b930      	cbnz	r0, 8008aa4 <__kernel_sinf+0x54>
 8008a96:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8008ad8 <__kernel_sinf+0x88>
 8008a9a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8008a9e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008aa2:	4770      	bx	lr
 8008aa4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008aa8:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8008aac:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008ab0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008ab4:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8008adc <__kernel_sinf+0x8c>
 8008ab8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8008abc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	2f2ec9d3 	.word	0x2f2ec9d3
 8008ac8:	b2d72f34 	.word	0xb2d72f34
 8008acc:	3638ef1b 	.word	0x3638ef1b
 8008ad0:	b9500d01 	.word	0xb9500d01
 8008ad4:	3c088889 	.word	0x3c088889
 8008ad8:	be2aaaab 	.word	0xbe2aaaab
 8008adc:	3e2aaaab 	.word	0x3e2aaaab

08008ae0 <__ieee754_rem_pio2f>:
 8008ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ae2:	ee10 6a10 	vmov	r6, s0
 8008ae6:	4b88      	ldr	r3, [pc, #544]	@ (8008d08 <__ieee754_rem_pio2f+0x228>)
 8008ae8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8008aec:	429d      	cmp	r5, r3
 8008aee:	b087      	sub	sp, #28
 8008af0:	4604      	mov	r4, r0
 8008af2:	d805      	bhi.n	8008b00 <__ieee754_rem_pio2f+0x20>
 8008af4:	2300      	movs	r3, #0
 8008af6:	ed80 0a00 	vstr	s0, [r0]
 8008afa:	6043      	str	r3, [r0, #4]
 8008afc:	2000      	movs	r0, #0
 8008afe:	e022      	b.n	8008b46 <__ieee754_rem_pio2f+0x66>
 8008b00:	4b82      	ldr	r3, [pc, #520]	@ (8008d0c <__ieee754_rem_pio2f+0x22c>)
 8008b02:	429d      	cmp	r5, r3
 8008b04:	d83a      	bhi.n	8008b7c <__ieee754_rem_pio2f+0x9c>
 8008b06:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8008b0a:	2e00      	cmp	r6, #0
 8008b0c:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8008d10 <__ieee754_rem_pio2f+0x230>
 8008b10:	4a80      	ldr	r2, [pc, #512]	@ (8008d14 <__ieee754_rem_pio2f+0x234>)
 8008b12:	f023 030f 	bic.w	r3, r3, #15
 8008b16:	dd18      	ble.n	8008b4a <__ieee754_rem_pio2f+0x6a>
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	ee70 7a47 	vsub.f32	s15, s0, s14
 8008b1e:	bf09      	itett	eq
 8008b20:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8008d18 <__ieee754_rem_pio2f+0x238>
 8008b24:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8008d1c <__ieee754_rem_pio2f+0x23c>
 8008b28:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8008d20 <__ieee754_rem_pio2f+0x240>
 8008b2c:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8008b30:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8008b34:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b38:	ed80 7a00 	vstr	s14, [r0]
 8008b3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008b40:	edc0 7a01 	vstr	s15, [r0, #4]
 8008b44:	2001      	movs	r0, #1
 8008b46:	b007      	add	sp, #28
 8008b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008b50:	bf09      	itett	eq
 8008b52:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8008d18 <__ieee754_rem_pio2f+0x238>
 8008b56:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8008d1c <__ieee754_rem_pio2f+0x23c>
 8008b5a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8008d20 <__ieee754_rem_pio2f+0x240>
 8008b5e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8008b62:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008b66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008b6a:	ed80 7a00 	vstr	s14, [r0]
 8008b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b72:	edc0 7a01 	vstr	s15, [r0, #4]
 8008b76:	f04f 30ff 	mov.w	r0, #4294967295
 8008b7a:	e7e4      	b.n	8008b46 <__ieee754_rem_pio2f+0x66>
 8008b7c:	4b69      	ldr	r3, [pc, #420]	@ (8008d24 <__ieee754_rem_pio2f+0x244>)
 8008b7e:	429d      	cmp	r5, r3
 8008b80:	d873      	bhi.n	8008c6a <__ieee754_rem_pio2f+0x18a>
 8008b82:	f000 f8dd 	bl	8008d40 <fabsf>
 8008b86:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8008d28 <__ieee754_rem_pio2f+0x248>
 8008b8a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008b8e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008b96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008b9a:	ee17 0a90 	vmov	r0, s15
 8008b9e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8008d10 <__ieee754_rem_pio2f+0x230>
 8008ba2:	eea7 0a67 	vfms.f32	s0, s14, s15
 8008ba6:	281f      	cmp	r0, #31
 8008ba8:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8008d1c <__ieee754_rem_pio2f+0x23c>
 8008bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bb0:	eeb1 6a47 	vneg.f32	s12, s14
 8008bb4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008bb8:	ee16 1a90 	vmov	r1, s13
 8008bbc:	dc09      	bgt.n	8008bd2 <__ieee754_rem_pio2f+0xf2>
 8008bbe:	4a5b      	ldr	r2, [pc, #364]	@ (8008d2c <__ieee754_rem_pio2f+0x24c>)
 8008bc0:	1e47      	subs	r7, r0, #1
 8008bc2:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8008bc6:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8008bca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d107      	bne.n	8008be2 <__ieee754_rem_pio2f+0x102>
 8008bd2:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8008bd6:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8008bda:	2a08      	cmp	r2, #8
 8008bdc:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8008be0:	dc14      	bgt.n	8008c0c <__ieee754_rem_pio2f+0x12c>
 8008be2:	6021      	str	r1, [r4, #0]
 8008be4:	ed94 7a00 	vldr	s14, [r4]
 8008be8:	ee30 0a47 	vsub.f32	s0, s0, s14
 8008bec:	2e00      	cmp	r6, #0
 8008bee:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008bf2:	ed84 0a01 	vstr	s0, [r4, #4]
 8008bf6:	daa6      	bge.n	8008b46 <__ieee754_rem_pio2f+0x66>
 8008bf8:	eeb1 7a47 	vneg.f32	s14, s14
 8008bfc:	eeb1 0a40 	vneg.f32	s0, s0
 8008c00:	ed84 7a00 	vstr	s14, [r4]
 8008c04:	ed84 0a01 	vstr	s0, [r4, #4]
 8008c08:	4240      	negs	r0, r0
 8008c0a:	e79c      	b.n	8008b46 <__ieee754_rem_pio2f+0x66>
 8008c0c:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8008d18 <__ieee754_rem_pio2f+0x238>
 8008c10:	eef0 6a40 	vmov.f32	s13, s0
 8008c14:	eee6 6a25 	vfma.f32	s13, s12, s11
 8008c18:	ee70 7a66 	vsub.f32	s15, s0, s13
 8008c1c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008c20:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008d20 <__ieee754_rem_pio2f+0x240>
 8008c24:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8008c28:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8008c2c:	ee15 2a90 	vmov	r2, s11
 8008c30:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8008c34:	1a5b      	subs	r3, r3, r1
 8008c36:	2b19      	cmp	r3, #25
 8008c38:	dc04      	bgt.n	8008c44 <__ieee754_rem_pio2f+0x164>
 8008c3a:	edc4 5a00 	vstr	s11, [r4]
 8008c3e:	eeb0 0a66 	vmov.f32	s0, s13
 8008c42:	e7cf      	b.n	8008be4 <__ieee754_rem_pio2f+0x104>
 8008c44:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8008d30 <__ieee754_rem_pio2f+0x250>
 8008c48:	eeb0 0a66 	vmov.f32	s0, s13
 8008c4c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008c50:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008c54:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8008d34 <__ieee754_rem_pio2f+0x254>
 8008c58:	eee6 7a25 	vfma.f32	s15, s12, s11
 8008c5c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008c60:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008c64:	ed84 7a00 	vstr	s14, [r4]
 8008c68:	e7bc      	b.n	8008be4 <__ieee754_rem_pio2f+0x104>
 8008c6a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8008c6e:	d306      	bcc.n	8008c7e <__ieee754_rem_pio2f+0x19e>
 8008c70:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008c74:	edc0 7a01 	vstr	s15, [r0, #4]
 8008c78:	edc0 7a00 	vstr	s15, [r0]
 8008c7c:	e73e      	b.n	8008afc <__ieee754_rem_pio2f+0x1c>
 8008c7e:	15ea      	asrs	r2, r5, #23
 8008c80:	3a86      	subs	r2, #134	@ 0x86
 8008c82:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008c86:	ee07 3a90 	vmov	s15, r3
 8008c8a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008c8e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8008d38 <__ieee754_rem_pio2f+0x258>
 8008c92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008c96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008c9a:	ed8d 7a03 	vstr	s14, [sp, #12]
 8008c9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008ca2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008ca6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008caa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008cae:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008cb2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008cb6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8008cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cbe:	edcd 7a05 	vstr	s15, [sp, #20]
 8008cc2:	d11e      	bne.n	8008d02 <__ieee754_rem_pio2f+0x222>
 8008cc4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008cc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ccc:	bf0c      	ite	eq
 8008cce:	2301      	moveq	r3, #1
 8008cd0:	2302      	movne	r3, #2
 8008cd2:	491a      	ldr	r1, [pc, #104]	@ (8008d3c <__ieee754_rem_pio2f+0x25c>)
 8008cd4:	9101      	str	r1, [sp, #4]
 8008cd6:	2102      	movs	r1, #2
 8008cd8:	9100      	str	r1, [sp, #0]
 8008cda:	a803      	add	r0, sp, #12
 8008cdc:	4621      	mov	r1, r4
 8008cde:	f000 f837 	bl	8008d50 <__kernel_rem_pio2f>
 8008ce2:	2e00      	cmp	r6, #0
 8008ce4:	f6bf af2f 	bge.w	8008b46 <__ieee754_rem_pio2f+0x66>
 8008ce8:	edd4 7a00 	vldr	s15, [r4]
 8008cec:	eef1 7a67 	vneg.f32	s15, s15
 8008cf0:	edc4 7a00 	vstr	s15, [r4]
 8008cf4:	edd4 7a01 	vldr	s15, [r4, #4]
 8008cf8:	eef1 7a67 	vneg.f32	s15, s15
 8008cfc:	edc4 7a01 	vstr	s15, [r4, #4]
 8008d00:	e782      	b.n	8008c08 <__ieee754_rem_pio2f+0x128>
 8008d02:	2303      	movs	r3, #3
 8008d04:	e7e5      	b.n	8008cd2 <__ieee754_rem_pio2f+0x1f2>
 8008d06:	bf00      	nop
 8008d08:	3f490fd8 	.word	0x3f490fd8
 8008d0c:	4016cbe3 	.word	0x4016cbe3
 8008d10:	3fc90f80 	.word	0x3fc90f80
 8008d14:	3fc90fd0 	.word	0x3fc90fd0
 8008d18:	37354400 	.word	0x37354400
 8008d1c:	37354443 	.word	0x37354443
 8008d20:	2e85a308 	.word	0x2e85a308
 8008d24:	43490f80 	.word	0x43490f80
 8008d28:	3f22f984 	.word	0x3f22f984
 8008d2c:	0800e648 	.word	0x0800e648
 8008d30:	2e85a300 	.word	0x2e85a300
 8008d34:	248d3132 	.word	0x248d3132
 8008d38:	43800000 	.word	0x43800000
 8008d3c:	0800e6c8 	.word	0x0800e6c8

08008d40 <fabsf>:
 8008d40:	ee10 3a10 	vmov	r3, s0
 8008d44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d48:	ee00 3a10 	vmov	s0, r3
 8008d4c:	4770      	bx	lr
	...

08008d50 <__kernel_rem_pio2f>:
 8008d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d54:	ed2d 8b04 	vpush	{d8-d9}
 8008d58:	b0d9      	sub	sp, #356	@ 0x164
 8008d5a:	4690      	mov	r8, r2
 8008d5c:	9001      	str	r0, [sp, #4]
 8008d5e:	4ab6      	ldr	r2, [pc, #728]	@ (8009038 <__kernel_rem_pio2f+0x2e8>)
 8008d60:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8008d62:	f118 0f04 	cmn.w	r8, #4
 8008d66:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8008d6a:	460f      	mov	r7, r1
 8008d6c:	f103 3bff 	add.w	fp, r3, #4294967295
 8008d70:	db26      	blt.n	8008dc0 <__kernel_rem_pio2f+0x70>
 8008d72:	f1b8 0203 	subs.w	r2, r8, #3
 8008d76:	bf48      	it	mi
 8008d78:	f108 0204 	addmi.w	r2, r8, #4
 8008d7c:	10d2      	asrs	r2, r2, #3
 8008d7e:	1c55      	adds	r5, r2, #1
 8008d80:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8008d82:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8009048 <__kernel_rem_pio2f+0x2f8>
 8008d86:	00e8      	lsls	r0, r5, #3
 8008d88:	eba2 060b 	sub.w	r6, r2, fp
 8008d8c:	9002      	str	r0, [sp, #8]
 8008d8e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8008d92:	eb0a 0c0b 	add.w	ip, sl, fp
 8008d96:	ac1c      	add	r4, sp, #112	@ 0x70
 8008d98:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	4560      	cmp	r0, ip
 8008da0:	dd10      	ble.n	8008dc4 <__kernel_rem_pio2f+0x74>
 8008da2:	a91c      	add	r1, sp, #112	@ 0x70
 8008da4:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8008da8:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8008dac:	2600      	movs	r6, #0
 8008dae:	4556      	cmp	r6, sl
 8008db0:	dc24      	bgt.n	8008dfc <__kernel_rem_pio2f+0xac>
 8008db2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008db6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8009048 <__kernel_rem_pio2f+0x2f8>
 8008dba:	4684      	mov	ip, r0
 8008dbc:	2400      	movs	r4, #0
 8008dbe:	e016      	b.n	8008dee <__kernel_rem_pio2f+0x9e>
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	e7dc      	b.n	8008d7e <__kernel_rem_pio2f+0x2e>
 8008dc4:	42c6      	cmn	r6, r0
 8008dc6:	bf5d      	ittte	pl
 8008dc8:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8008dcc:	ee07 1a90 	vmovpl	s15, r1
 8008dd0:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8008dd4:	eef0 7a47 	vmovmi.f32	s15, s14
 8008dd8:	ece4 7a01 	vstmia	r4!, {s15}
 8008ddc:	3001      	adds	r0, #1
 8008dde:	e7de      	b.n	8008d9e <__kernel_rem_pio2f+0x4e>
 8008de0:	ecfe 6a01 	vldmia	lr!, {s13}
 8008de4:	ed3c 7a01 	vldmdb	ip!, {s14}
 8008de8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008dec:	3401      	adds	r4, #1
 8008dee:	455c      	cmp	r4, fp
 8008df0:	ddf6      	ble.n	8008de0 <__kernel_rem_pio2f+0x90>
 8008df2:	ece9 7a01 	vstmia	r9!, {s15}
 8008df6:	3601      	adds	r6, #1
 8008df8:	3004      	adds	r0, #4
 8008dfa:	e7d8      	b.n	8008dae <__kernel_rem_pio2f+0x5e>
 8008dfc:	a908      	add	r1, sp, #32
 8008dfe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008e02:	9104      	str	r1, [sp, #16]
 8008e04:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8008e06:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8009044 <__kernel_rem_pio2f+0x2f4>
 8008e0a:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8009040 <__kernel_rem_pio2f+0x2f0>
 8008e0e:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8008e12:	9203      	str	r2, [sp, #12]
 8008e14:	4654      	mov	r4, sl
 8008e16:	00a2      	lsls	r2, r4, #2
 8008e18:	9205      	str	r2, [sp, #20]
 8008e1a:	aa58      	add	r2, sp, #352	@ 0x160
 8008e1c:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8008e20:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8008e24:	a944      	add	r1, sp, #272	@ 0x110
 8008e26:	aa08      	add	r2, sp, #32
 8008e28:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8008e2c:	4694      	mov	ip, r2
 8008e2e:	4626      	mov	r6, r4
 8008e30:	2e00      	cmp	r6, #0
 8008e32:	dc4c      	bgt.n	8008ece <__kernel_rem_pio2f+0x17e>
 8008e34:	4628      	mov	r0, r5
 8008e36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e3a:	f000 f9f1 	bl	8009220 <scalbnf>
 8008e3e:	eeb0 8a40 	vmov.f32	s16, s0
 8008e42:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8008e46:	ee28 0a00 	vmul.f32	s0, s16, s0
 8008e4a:	f000 fa4f 	bl	80092ec <floorf>
 8008e4e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8008e52:	eea0 8a67 	vfms.f32	s16, s0, s15
 8008e56:	2d00      	cmp	r5, #0
 8008e58:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e5c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8008e60:	ee17 9a90 	vmov	r9, s15
 8008e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e68:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008e6c:	dd41      	ble.n	8008ef2 <__kernel_rem_pio2f+0x1a2>
 8008e6e:	f104 3cff 	add.w	ip, r4, #4294967295
 8008e72:	a908      	add	r1, sp, #32
 8008e74:	f1c5 0e08 	rsb	lr, r5, #8
 8008e78:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8008e7c:	fa46 f00e 	asr.w	r0, r6, lr
 8008e80:	4481      	add	r9, r0
 8008e82:	fa00 f00e 	lsl.w	r0, r0, lr
 8008e86:	1a36      	subs	r6, r6, r0
 8008e88:	f1c5 0007 	rsb	r0, r5, #7
 8008e8c:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8008e90:	4106      	asrs	r6, r0
 8008e92:	2e00      	cmp	r6, #0
 8008e94:	dd3c      	ble.n	8008f10 <__kernel_rem_pio2f+0x1c0>
 8008e96:	f04f 0e00 	mov.w	lr, #0
 8008e9a:	f109 0901 	add.w	r9, r9, #1
 8008e9e:	4670      	mov	r0, lr
 8008ea0:	4574      	cmp	r4, lr
 8008ea2:	dc68      	bgt.n	8008f76 <__kernel_rem_pio2f+0x226>
 8008ea4:	2d00      	cmp	r5, #0
 8008ea6:	dd03      	ble.n	8008eb0 <__kernel_rem_pio2f+0x160>
 8008ea8:	2d01      	cmp	r5, #1
 8008eaa:	d074      	beq.n	8008f96 <__kernel_rem_pio2f+0x246>
 8008eac:	2d02      	cmp	r5, #2
 8008eae:	d07d      	beq.n	8008fac <__kernel_rem_pio2f+0x25c>
 8008eb0:	2e02      	cmp	r6, #2
 8008eb2:	d12d      	bne.n	8008f10 <__kernel_rem_pio2f+0x1c0>
 8008eb4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008eb8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008ebc:	b340      	cbz	r0, 8008f10 <__kernel_rem_pio2f+0x1c0>
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	9306      	str	r3, [sp, #24]
 8008ec2:	f000 f9ad 	bl	8009220 <scalbnf>
 8008ec6:	9b06      	ldr	r3, [sp, #24]
 8008ec8:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008ecc:	e020      	b.n	8008f10 <__kernel_rem_pio2f+0x1c0>
 8008ece:	ee60 7a28 	vmul.f32	s15, s0, s17
 8008ed2:	3e01      	subs	r6, #1
 8008ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008edc:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008ee0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008ee4:	ecac 0a01 	vstmia	ip!, {s0}
 8008ee8:	ed30 0a01 	vldmdb	r0!, {s0}
 8008eec:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008ef0:	e79e      	b.n	8008e30 <__kernel_rem_pio2f+0xe0>
 8008ef2:	d105      	bne.n	8008f00 <__kernel_rem_pio2f+0x1b0>
 8008ef4:	1e60      	subs	r0, r4, #1
 8008ef6:	a908      	add	r1, sp, #32
 8008ef8:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8008efc:	11f6      	asrs	r6, r6, #7
 8008efe:	e7c8      	b.n	8008e92 <__kernel_rem_pio2f+0x142>
 8008f00:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8008f04:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f0c:	da31      	bge.n	8008f72 <__kernel_rem_pio2f+0x222>
 8008f0e:	2600      	movs	r6, #0
 8008f10:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f18:	f040 8098 	bne.w	800904c <__kernel_rem_pio2f+0x2fc>
 8008f1c:	1e60      	subs	r0, r4, #1
 8008f1e:	2200      	movs	r2, #0
 8008f20:	4550      	cmp	r0, sl
 8008f22:	da4b      	bge.n	8008fbc <__kernel_rem_pio2f+0x26c>
 8008f24:	2a00      	cmp	r2, #0
 8008f26:	d065      	beq.n	8008ff4 <__kernel_rem_pio2f+0x2a4>
 8008f28:	3c01      	subs	r4, #1
 8008f2a:	ab08      	add	r3, sp, #32
 8008f2c:	3d08      	subs	r5, #8
 8008f2e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0f8      	beq.n	8008f28 <__kernel_rem_pio2f+0x1d8>
 8008f36:	4628      	mov	r0, r5
 8008f38:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008f3c:	f000 f970 	bl	8009220 <scalbnf>
 8008f40:	1c63      	adds	r3, r4, #1
 8008f42:	aa44      	add	r2, sp, #272	@ 0x110
 8008f44:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8009044 <__kernel_rem_pio2f+0x2f4>
 8008f48:	0099      	lsls	r1, r3, #2
 8008f4a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008f4e:	4623      	mov	r3, r4
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f280 80a9 	bge.w	80090a8 <__kernel_rem_pio2f+0x358>
 8008f56:	4623      	mov	r3, r4
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f2c0 80c7 	blt.w	80090ec <__kernel_rem_pio2f+0x39c>
 8008f5e:	aa44      	add	r2, sp, #272	@ 0x110
 8008f60:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8008f64:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800903c <__kernel_rem_pio2f+0x2ec>
 8008f68:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8009048 <__kernel_rem_pio2f+0x2f8>
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	1ae2      	subs	r2, r4, r3
 8008f70:	e0b1      	b.n	80090d6 <__kernel_rem_pio2f+0x386>
 8008f72:	2602      	movs	r6, #2
 8008f74:	e78f      	b.n	8008e96 <__kernel_rem_pio2f+0x146>
 8008f76:	f852 1b04 	ldr.w	r1, [r2], #4
 8008f7a:	b948      	cbnz	r0, 8008f90 <__kernel_rem_pio2f+0x240>
 8008f7c:	b121      	cbz	r1, 8008f88 <__kernel_rem_pio2f+0x238>
 8008f7e:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8008f82:	f842 1c04 	str.w	r1, [r2, #-4]
 8008f86:	2101      	movs	r1, #1
 8008f88:	f10e 0e01 	add.w	lr, lr, #1
 8008f8c:	4608      	mov	r0, r1
 8008f8e:	e787      	b.n	8008ea0 <__kernel_rem_pio2f+0x150>
 8008f90:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8008f94:	e7f5      	b.n	8008f82 <__kernel_rem_pio2f+0x232>
 8008f96:	f104 3cff 	add.w	ip, r4, #4294967295
 8008f9a:	aa08      	add	r2, sp, #32
 8008f9c:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008fa0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008fa4:	a908      	add	r1, sp, #32
 8008fa6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8008faa:	e781      	b.n	8008eb0 <__kernel_rem_pio2f+0x160>
 8008fac:	f104 3cff 	add.w	ip, r4, #4294967295
 8008fb0:	aa08      	add	r2, sp, #32
 8008fb2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008fb6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008fba:	e7f3      	b.n	8008fa4 <__kernel_rem_pio2f+0x254>
 8008fbc:	a908      	add	r1, sp, #32
 8008fbe:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8008fc2:	3801      	subs	r0, #1
 8008fc4:	430a      	orrs	r2, r1
 8008fc6:	e7ab      	b.n	8008f20 <__kernel_rem_pio2f+0x1d0>
 8008fc8:	3201      	adds	r2, #1
 8008fca:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8008fce:	2e00      	cmp	r6, #0
 8008fd0:	d0fa      	beq.n	8008fc8 <__kernel_rem_pio2f+0x278>
 8008fd2:	9905      	ldr	r1, [sp, #20]
 8008fd4:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8008fd8:	eb0d 0001 	add.w	r0, sp, r1
 8008fdc:	18e6      	adds	r6, r4, r3
 8008fde:	a91c      	add	r1, sp, #112	@ 0x70
 8008fe0:	f104 0c01 	add.w	ip, r4, #1
 8008fe4:	384c      	subs	r0, #76	@ 0x4c
 8008fe6:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8008fea:	4422      	add	r2, r4
 8008fec:	4562      	cmp	r2, ip
 8008fee:	da04      	bge.n	8008ffa <__kernel_rem_pio2f+0x2aa>
 8008ff0:	4614      	mov	r4, r2
 8008ff2:	e710      	b.n	8008e16 <__kernel_rem_pio2f+0xc6>
 8008ff4:	9804      	ldr	r0, [sp, #16]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	e7e7      	b.n	8008fca <__kernel_rem_pio2f+0x27a>
 8008ffa:	9903      	ldr	r1, [sp, #12]
 8008ffc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8009000:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8009004:	9105      	str	r1, [sp, #20]
 8009006:	ee07 1a90 	vmov	s15, r1
 800900a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800900e:	2400      	movs	r4, #0
 8009010:	ece6 7a01 	vstmia	r6!, {s15}
 8009014:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8009048 <__kernel_rem_pio2f+0x2f8>
 8009018:	46b1      	mov	r9, r6
 800901a:	455c      	cmp	r4, fp
 800901c:	dd04      	ble.n	8009028 <__kernel_rem_pio2f+0x2d8>
 800901e:	ece0 7a01 	vstmia	r0!, {s15}
 8009022:	f10c 0c01 	add.w	ip, ip, #1
 8009026:	e7e1      	b.n	8008fec <__kernel_rem_pio2f+0x29c>
 8009028:	ecfe 6a01 	vldmia	lr!, {s13}
 800902c:	ed39 7a01 	vldmdb	r9!, {s14}
 8009030:	3401      	adds	r4, #1
 8009032:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009036:	e7f0      	b.n	800901a <__kernel_rem_pio2f+0x2ca>
 8009038:	0800ea0c 	.word	0x0800ea0c
 800903c:	0800e9e0 	.word	0x0800e9e0
 8009040:	43800000 	.word	0x43800000
 8009044:	3b800000 	.word	0x3b800000
 8009048:	00000000 	.word	0x00000000
 800904c:	9b02      	ldr	r3, [sp, #8]
 800904e:	eeb0 0a48 	vmov.f32	s0, s16
 8009052:	eba3 0008 	sub.w	r0, r3, r8
 8009056:	f000 f8e3 	bl	8009220 <scalbnf>
 800905a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8009040 <__kernel_rem_pio2f+0x2f0>
 800905e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8009062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009066:	db19      	blt.n	800909c <__kernel_rem_pio2f+0x34c>
 8009068:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8009044 <__kernel_rem_pio2f+0x2f4>
 800906c:	ee60 7a27 	vmul.f32	s15, s0, s15
 8009070:	aa08      	add	r2, sp, #32
 8009072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009076:	3508      	adds	r5, #8
 8009078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800907c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009080:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009084:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8009088:	ee10 3a10 	vmov	r3, s0
 800908c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009090:	ee17 3a90 	vmov	r3, s15
 8009094:	3401      	adds	r4, #1
 8009096:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800909a:	e74c      	b.n	8008f36 <__kernel_rem_pio2f+0x1e6>
 800909c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80090a0:	aa08      	add	r2, sp, #32
 80090a2:	ee10 3a10 	vmov	r3, s0
 80090a6:	e7f6      	b.n	8009096 <__kernel_rem_pio2f+0x346>
 80090a8:	a808      	add	r0, sp, #32
 80090aa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80090ae:	9001      	str	r0, [sp, #4]
 80090b0:	ee07 0a90 	vmov	s15, r0
 80090b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80090b8:	3b01      	subs	r3, #1
 80090ba:	ee67 7a80 	vmul.f32	s15, s15, s0
 80090be:	ee20 0a07 	vmul.f32	s0, s0, s14
 80090c2:	ed62 7a01 	vstmdb	r2!, {s15}
 80090c6:	e743      	b.n	8008f50 <__kernel_rem_pio2f+0x200>
 80090c8:	ecfc 6a01 	vldmia	ip!, {s13}
 80090cc:	ecb5 7a01 	vldmia	r5!, {s14}
 80090d0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80090d4:	3001      	adds	r0, #1
 80090d6:	4550      	cmp	r0, sl
 80090d8:	dc01      	bgt.n	80090de <__kernel_rem_pio2f+0x38e>
 80090da:	4290      	cmp	r0, r2
 80090dc:	ddf4      	ble.n	80090c8 <__kernel_rem_pio2f+0x378>
 80090de:	a858      	add	r0, sp, #352	@ 0x160
 80090e0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80090e4:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80090e8:	3b01      	subs	r3, #1
 80090ea:	e735      	b.n	8008f58 <__kernel_rem_pio2f+0x208>
 80090ec:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80090ee:	2b02      	cmp	r3, #2
 80090f0:	dc09      	bgt.n	8009106 <__kernel_rem_pio2f+0x3b6>
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	dc27      	bgt.n	8009146 <__kernel_rem_pio2f+0x3f6>
 80090f6:	d040      	beq.n	800917a <__kernel_rem_pio2f+0x42a>
 80090f8:	f009 0007 	and.w	r0, r9, #7
 80090fc:	b059      	add	sp, #356	@ 0x164
 80090fe:	ecbd 8b04 	vpop	{d8-d9}
 8009102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009106:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8009108:	2b03      	cmp	r3, #3
 800910a:	d1f5      	bne.n	80090f8 <__kernel_rem_pio2f+0x3a8>
 800910c:	aa30      	add	r2, sp, #192	@ 0xc0
 800910e:	1f0b      	subs	r3, r1, #4
 8009110:	4413      	add	r3, r2
 8009112:	461a      	mov	r2, r3
 8009114:	4620      	mov	r0, r4
 8009116:	2800      	cmp	r0, #0
 8009118:	dc50      	bgt.n	80091bc <__kernel_rem_pio2f+0x46c>
 800911a:	4622      	mov	r2, r4
 800911c:	2a01      	cmp	r2, #1
 800911e:	dc5d      	bgt.n	80091dc <__kernel_rem_pio2f+0x48c>
 8009120:	ab30      	add	r3, sp, #192	@ 0xc0
 8009122:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8009048 <__kernel_rem_pio2f+0x2f8>
 8009126:	440b      	add	r3, r1
 8009128:	2c01      	cmp	r4, #1
 800912a:	dc67      	bgt.n	80091fc <__kernel_rem_pio2f+0x4ac>
 800912c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8009130:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8009134:	2e00      	cmp	r6, #0
 8009136:	d167      	bne.n	8009208 <__kernel_rem_pio2f+0x4b8>
 8009138:	edc7 6a00 	vstr	s13, [r7]
 800913c:	ed87 7a01 	vstr	s14, [r7, #4]
 8009140:	edc7 7a02 	vstr	s15, [r7, #8]
 8009144:	e7d8      	b.n	80090f8 <__kernel_rem_pio2f+0x3a8>
 8009146:	ab30      	add	r3, sp, #192	@ 0xc0
 8009148:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8009048 <__kernel_rem_pio2f+0x2f8>
 800914c:	440b      	add	r3, r1
 800914e:	4622      	mov	r2, r4
 8009150:	2a00      	cmp	r2, #0
 8009152:	da24      	bge.n	800919e <__kernel_rem_pio2f+0x44e>
 8009154:	b34e      	cbz	r6, 80091aa <__kernel_rem_pio2f+0x45a>
 8009156:	eef1 7a47 	vneg.f32	s15, s14
 800915a:	edc7 7a00 	vstr	s15, [r7]
 800915e:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8009162:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009166:	aa31      	add	r2, sp, #196	@ 0xc4
 8009168:	2301      	movs	r3, #1
 800916a:	429c      	cmp	r4, r3
 800916c:	da20      	bge.n	80091b0 <__kernel_rem_pio2f+0x460>
 800916e:	b10e      	cbz	r6, 8009174 <__kernel_rem_pio2f+0x424>
 8009170:	eef1 7a67 	vneg.f32	s15, s15
 8009174:	edc7 7a01 	vstr	s15, [r7, #4]
 8009178:	e7be      	b.n	80090f8 <__kernel_rem_pio2f+0x3a8>
 800917a:	ab30      	add	r3, sp, #192	@ 0xc0
 800917c:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8009048 <__kernel_rem_pio2f+0x2f8>
 8009180:	440b      	add	r3, r1
 8009182:	2c00      	cmp	r4, #0
 8009184:	da05      	bge.n	8009192 <__kernel_rem_pio2f+0x442>
 8009186:	b10e      	cbz	r6, 800918c <__kernel_rem_pio2f+0x43c>
 8009188:	eef1 7a67 	vneg.f32	s15, s15
 800918c:	edc7 7a00 	vstr	s15, [r7]
 8009190:	e7b2      	b.n	80090f8 <__kernel_rem_pio2f+0x3a8>
 8009192:	ed33 7a01 	vldmdb	r3!, {s14}
 8009196:	3c01      	subs	r4, #1
 8009198:	ee77 7a87 	vadd.f32	s15, s15, s14
 800919c:	e7f1      	b.n	8009182 <__kernel_rem_pio2f+0x432>
 800919e:	ed73 7a01 	vldmdb	r3!, {s15}
 80091a2:	3a01      	subs	r2, #1
 80091a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80091a8:	e7d2      	b.n	8009150 <__kernel_rem_pio2f+0x400>
 80091aa:	eef0 7a47 	vmov.f32	s15, s14
 80091ae:	e7d4      	b.n	800915a <__kernel_rem_pio2f+0x40a>
 80091b0:	ecb2 7a01 	vldmia	r2!, {s14}
 80091b4:	3301      	adds	r3, #1
 80091b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091ba:	e7d6      	b.n	800916a <__kernel_rem_pio2f+0x41a>
 80091bc:	ed72 7a01 	vldmdb	r2!, {s15}
 80091c0:	edd2 6a01 	vldr	s13, [r2, #4]
 80091c4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80091c8:	3801      	subs	r0, #1
 80091ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091ce:	ed82 7a00 	vstr	s14, [r2]
 80091d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091d6:	edc2 7a01 	vstr	s15, [r2, #4]
 80091da:	e79c      	b.n	8009116 <__kernel_rem_pio2f+0x3c6>
 80091dc:	ed73 7a01 	vldmdb	r3!, {s15}
 80091e0:	edd3 6a01 	vldr	s13, [r3, #4]
 80091e4:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80091e8:	3a01      	subs	r2, #1
 80091ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80091ee:	ed83 7a00 	vstr	s14, [r3]
 80091f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80091f6:	edc3 7a01 	vstr	s15, [r3, #4]
 80091fa:	e78f      	b.n	800911c <__kernel_rem_pio2f+0x3cc>
 80091fc:	ed33 7a01 	vldmdb	r3!, {s14}
 8009200:	3c01      	subs	r4, #1
 8009202:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009206:	e78f      	b.n	8009128 <__kernel_rem_pio2f+0x3d8>
 8009208:	eef1 6a66 	vneg.f32	s13, s13
 800920c:	eeb1 7a47 	vneg.f32	s14, s14
 8009210:	edc7 6a00 	vstr	s13, [r7]
 8009214:	ed87 7a01 	vstr	s14, [r7, #4]
 8009218:	eef1 7a67 	vneg.f32	s15, s15
 800921c:	e790      	b.n	8009140 <__kernel_rem_pio2f+0x3f0>
 800921e:	bf00      	nop

08009220 <scalbnf>:
 8009220:	ee10 3a10 	vmov	r3, s0
 8009224:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8009228:	d02b      	beq.n	8009282 <scalbnf+0x62>
 800922a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800922e:	d302      	bcc.n	8009236 <scalbnf+0x16>
 8009230:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009234:	4770      	bx	lr
 8009236:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800923a:	d123      	bne.n	8009284 <scalbnf+0x64>
 800923c:	4b24      	ldr	r3, [pc, #144]	@ (80092d0 <scalbnf+0xb0>)
 800923e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80092d4 <scalbnf+0xb4>
 8009242:	4298      	cmp	r0, r3
 8009244:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009248:	db17      	blt.n	800927a <scalbnf+0x5a>
 800924a:	ee10 3a10 	vmov	r3, s0
 800924e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009252:	3a19      	subs	r2, #25
 8009254:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8009258:	4288      	cmp	r0, r1
 800925a:	dd15      	ble.n	8009288 <scalbnf+0x68>
 800925c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 80092d8 <scalbnf+0xb8>
 8009260:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 80092dc <scalbnf+0xbc>
 8009264:	ee10 3a10 	vmov	r3, s0
 8009268:	eeb0 7a67 	vmov.f32	s14, s15
 800926c:	2b00      	cmp	r3, #0
 800926e:	bfb8      	it	lt
 8009270:	eef0 7a66 	vmovlt.f32	s15, s13
 8009274:	ee27 0a87 	vmul.f32	s0, s15, s14
 8009278:	4770      	bx	lr
 800927a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80092e0 <scalbnf+0xc0>
 800927e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009282:	4770      	bx	lr
 8009284:	0dd2      	lsrs	r2, r2, #23
 8009286:	e7e5      	b.n	8009254 <scalbnf+0x34>
 8009288:	4410      	add	r0, r2
 800928a:	28fe      	cmp	r0, #254	@ 0xfe
 800928c:	dce6      	bgt.n	800925c <scalbnf+0x3c>
 800928e:	2800      	cmp	r0, #0
 8009290:	dd06      	ble.n	80092a0 <scalbnf+0x80>
 8009292:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009296:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800929a:	ee00 3a10 	vmov	s0, r3
 800929e:	4770      	bx	lr
 80092a0:	f110 0f16 	cmn.w	r0, #22
 80092a4:	da09      	bge.n	80092ba <scalbnf+0x9a>
 80092a6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80092e0 <scalbnf+0xc0>
 80092aa:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 80092e4 <scalbnf+0xc4>
 80092ae:	ee10 3a10 	vmov	r3, s0
 80092b2:	eeb0 7a67 	vmov.f32	s14, s15
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	e7d9      	b.n	800926e <scalbnf+0x4e>
 80092ba:	3019      	adds	r0, #25
 80092bc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80092c0:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 80092c4:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80092e8 <scalbnf+0xc8>
 80092c8:	ee07 3a90 	vmov	s15, r3
 80092cc:	e7d7      	b.n	800927e <scalbnf+0x5e>
 80092ce:	bf00      	nop
 80092d0:	ffff3cb0 	.word	0xffff3cb0
 80092d4:	4c000000 	.word	0x4c000000
 80092d8:	7149f2ca 	.word	0x7149f2ca
 80092dc:	f149f2ca 	.word	0xf149f2ca
 80092e0:	0da24260 	.word	0x0da24260
 80092e4:	8da24260 	.word	0x8da24260
 80092e8:	33000000 	.word	0x33000000

080092ec <floorf>:
 80092ec:	ee10 3a10 	vmov	r3, s0
 80092f0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80092f4:	3a7f      	subs	r2, #127	@ 0x7f
 80092f6:	2a16      	cmp	r2, #22
 80092f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80092fc:	dc2b      	bgt.n	8009356 <floorf+0x6a>
 80092fe:	2a00      	cmp	r2, #0
 8009300:	da12      	bge.n	8009328 <floorf+0x3c>
 8009302:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009368 <floorf+0x7c>
 8009306:	ee30 0a27 	vadd.f32	s0, s0, s15
 800930a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800930e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009312:	dd06      	ble.n	8009322 <floorf+0x36>
 8009314:	2b00      	cmp	r3, #0
 8009316:	da24      	bge.n	8009362 <floorf+0x76>
 8009318:	2900      	cmp	r1, #0
 800931a:	4b14      	ldr	r3, [pc, #80]	@ (800936c <floorf+0x80>)
 800931c:	bf08      	it	eq
 800931e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8009322:	ee00 3a10 	vmov	s0, r3
 8009326:	4770      	bx	lr
 8009328:	4911      	ldr	r1, [pc, #68]	@ (8009370 <floorf+0x84>)
 800932a:	4111      	asrs	r1, r2
 800932c:	420b      	tst	r3, r1
 800932e:	d0fa      	beq.n	8009326 <floorf+0x3a>
 8009330:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8009368 <floorf+0x7c>
 8009334:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009338:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800933c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009340:	ddef      	ble.n	8009322 <floorf+0x36>
 8009342:	2b00      	cmp	r3, #0
 8009344:	bfbe      	ittt	lt
 8009346:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800934a:	fa40 f202 	asrlt.w	r2, r0, r2
 800934e:	189b      	addlt	r3, r3, r2
 8009350:	ea23 0301 	bic.w	r3, r3, r1
 8009354:	e7e5      	b.n	8009322 <floorf+0x36>
 8009356:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800935a:	d3e4      	bcc.n	8009326 <floorf+0x3a>
 800935c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009360:	4770      	bx	lr
 8009362:	2300      	movs	r3, #0
 8009364:	e7dd      	b.n	8009322 <floorf+0x36>
 8009366:	bf00      	nop
 8009368:	7149f2ca 	.word	0x7149f2ca
 800936c:	bf800000 	.word	0xbf800000
 8009370:	007fffff 	.word	0x007fffff

08009374 <_init>:
 8009374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009376:	bf00      	nop
 8009378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937a:	bc08      	pop	{r3}
 800937c:	469e      	mov	lr, r3
 800937e:	4770      	bx	lr

08009380 <_fini>:
 8009380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009382:	bf00      	nop
 8009384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009386:	bc08      	pop	{r3}
 8009388:	469e      	mov	lr, r3
 800938a:	4770      	bx	lr
